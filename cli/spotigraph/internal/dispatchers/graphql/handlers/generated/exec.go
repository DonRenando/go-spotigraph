// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"bytes"
	"context"
	"errors"
	"strconv"
	"sync"
	"sync/atomic"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	"github.com/vektah/gqlparser"
	"github.com/vektah/gqlparser/ast"
	"go.zenithar.org/spotigraph/pkg/protocol/v1/spotigraph"
)

// region    ************************** generated!.gotpl **************************

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Chapter() ChapterResolver
	Error() ErrorResolver
	Guild() GuildResolver
	Mutation() MutationResolver
	Query() QueryResolver
	Squad() SquadResolver
	Tribe() TribeResolver
	User() UserResolver
}

type DirectiveRoot struct {
}

type ComplexityRoot struct {
	Chapter struct {
		Id      func(childComplexity int) int
		Leader  func(childComplexity int) int
		Members func(childComplexity int, paging *PagingRequest) int
		Name    func(childComplexity int) int
		Urn     func(childComplexity int) int
	}

	ChapterPagingConnection struct {
		Items     func(childComplexity int) int
		NextToken func(childComplexity int) int
	}

	Error struct {
		Code    func(childComplexity int) int
		Message func(childComplexity int) int
	}

	Guild struct {
		Id      func(childComplexity int) int
		Members func(childComplexity int, paging *PagingRequest) int
		Name    func(childComplexity int) int
		Urn     func(childComplexity int) int
	}

	GuildPagingConnection struct {
		Items     func(childComplexity int) int
		NextToken func(childComplexity int) int
	}

	Mutation struct {
		AddChapterMembers    func(childComplexity int, id string, users []*string) int
		AddGuildMembers      func(childComplexity int, id string, users []*string) int
		AddSquadMembers      func(childComplexity int, id string, users []*string) int
		AddTribeSquads       func(childComplexity int, id string, squads []*string) int
		CreateChapter        func(childComplexity int, input *spotigraph.ChapterCreateReq) int
		CreateGuild          func(childComplexity int, input *spotigraph.GuildCreateReq) int
		CreateSquad          func(childComplexity int, input *spotigraph.SquadCreateReq) int
		CreateTribe          func(childComplexity int, input *spotigraph.TribeCreateReq) int
		CreateUser           func(childComplexity int, input *spotigraph.UserCreateReq) int
		DeleteChapter        func(childComplexity int, id *string) int
		DeleteGuild          func(childComplexity int, id *string) int
		DeleteSquad          func(childComplexity int, id *string) int
		DeleteTribe          func(childComplexity int, id *string) int
		DeleteUser           func(childComplexity int, id *string) int
		RemoveChapterMembers func(childComplexity int, id string, users []*string) int
		RemoveGuildMembers   func(childComplexity int, id string, users []*string) int
		RemoveSquadMembers   func(childComplexity int, id string, users []*string) int
		RemoveTribeSquads    func(childComplexity int, id string, squads []*string) int
		UpdateChapter        func(childComplexity int, input *ChapterUpdateInput) int
		UpdateGuild          func(childComplexity int, input *GuildUpdateInput) int
		UpdateSquad          func(childComplexity int, input *SquadUpdateInput) int
		UpdateTribe          func(childComplexity int, input *TribeUpdateInput) int
		UpdateUser           func(childComplexity int, input *UserUpdateInput) int
	}

	Query struct {
		GetChapter        func(childComplexity int, id string) int
		GetChapters       func(childComplexity int, ids []string) int
		GetGuild          func(childComplexity int, id string) int
		GetGuilds         func(childComplexity int, ids []string) int
		GetSquad          func(childComplexity int, id string) int
		GetSquads         func(childComplexity int, ids []string) int
		GetTribe          func(childComplexity int, id string) int
		GetTribes         func(childComplexity int, ids []string) int
		GetUser           func(childComplexity int, id string) int
		GetUsers          func(childComplexity int, ids []string) int
		Me                func(childComplexity int) int
		SearchForChapters func(childComplexity int, paging *PagingRequest) int
		SearchForGuilds   func(childComplexity int, paging *PagingRequest) int
		SearchForSquads   func(childComplexity int, paging *PagingRequest) int
		SearchForTribes   func(childComplexity int, paging *PagingRequest) int
		SearchForUsers    func(childComplexity int, paging *PagingRequest) int
	}

	Squad struct {
		Id           func(childComplexity int) int
		Members      func(childComplexity int, paging *PagingRequest) int
		Name         func(childComplexity int) int
		ProductOwner func(childComplexity int) int
		Urn          func(childComplexity int) int
	}

	SquadPagingConnection struct {
		Items     func(childComplexity int) int
		NextToken func(childComplexity int) int
	}

	Tribe struct {
		Id     func(childComplexity int) int
		Name   func(childComplexity int) int
		Squads func(childComplexity int, paging *PagingRequest) int
		Urn    func(childComplexity int) int
	}

	TribePagingConnection struct {
		Items     func(childComplexity int) int
		NextToken func(childComplexity int) int
	}

	User struct {
		Chapter   func(childComplexity int) int
		Guilds    func(childComplexity int, paging *PagingRequest) int
		Id        func(childComplexity int) int
		Principal func(childComplexity int) int
		Squads    func(childComplexity int, paging *PagingRequest) int
		Urn       func(childComplexity int) int
	}

	UserPagingConnection struct {
		Items     func(childComplexity int) int
		NextToken func(childComplexity int) int
	}
}

type ChapterResolver interface {
	Leader(ctx context.Context, obj *spotigraph.Domain_Chapter) (*spotigraph.Domain_User, error)
	Members(ctx context.Context, obj *spotigraph.Domain_Chapter, paging *PagingRequest) (*UserPagingConnection, error)
}

type ErrorResolver interface {
	Code(ctx context.Context, obj *spotigraph.Error) (int, error)
}

type GuildResolver interface {
	Members(ctx context.Context, obj *spotigraph.Domain_Guild, paging *PagingRequest) (*UserPagingConnection, error)
}

type MutationResolver interface {
	CreateUser(ctx context.Context, input *spotigraph.UserCreateReq) (*spotigraph.Domain_User, error)
	UpdateUser(ctx context.Context, input *UserUpdateInput) (*spotigraph.Domain_User, error)
	DeleteUser(ctx context.Context, id *string) (*spotigraph.Domain_User, error)
	CreateSquad(ctx context.Context, input *spotigraph.SquadCreateReq) (*spotigraph.Domain_Squad, error)
	UpdateSquad(ctx context.Context, input *SquadUpdateInput) (*spotigraph.Domain_Squad, error)
	DeleteSquad(ctx context.Context, id *string) (*spotigraph.Domain_Squad, error)
	AddSquadMembers(ctx context.Context, id string, users []*string) (*spotigraph.Domain_Squad, error)
	RemoveSquadMembers(ctx context.Context, id string, users []*string) (*spotigraph.Domain_Squad, error)
	CreateTribe(ctx context.Context, input *spotigraph.TribeCreateReq) (*spotigraph.Domain_Tribe, error)
	UpdateTribe(ctx context.Context, input *TribeUpdateInput) (*spotigraph.Domain_Tribe, error)
	DeleteTribe(ctx context.Context, id *string) (*spotigraph.Domain_Tribe, error)
	AddTribeSquads(ctx context.Context, id string, squads []*string) (*spotigraph.Domain_Tribe, error)
	RemoveTribeSquads(ctx context.Context, id string, squads []*string) (*spotigraph.Domain_Tribe, error)
	CreateChapter(ctx context.Context, input *spotigraph.ChapterCreateReq) (*spotigraph.Domain_Chapter, error)
	UpdateChapter(ctx context.Context, input *ChapterUpdateInput) (*spotigraph.Domain_Chapter, error)
	DeleteChapter(ctx context.Context, id *string) (*spotigraph.Domain_Chapter, error)
	AddChapterMembers(ctx context.Context, id string, users []*string) (*spotigraph.Domain_Chapter, error)
	RemoveChapterMembers(ctx context.Context, id string, users []*string) (*spotigraph.Domain_Chapter, error)
	CreateGuild(ctx context.Context, input *spotigraph.GuildCreateReq) (*spotigraph.Domain_Guild, error)
	UpdateGuild(ctx context.Context, input *GuildUpdateInput) (*spotigraph.Domain_Guild, error)
	DeleteGuild(ctx context.Context, id *string) (*spotigraph.Domain_Guild, error)
	AddGuildMembers(ctx context.Context, id string, users []*string) (*spotigraph.Domain_Guild, error)
	RemoveGuildMembers(ctx context.Context, id string, users []*string) (*spotigraph.Domain_Guild, error)
}

type QueryResolver interface {
	Me(ctx context.Context) (*spotigraph.Domain_User, error)
	SearchForUsers(ctx context.Context, paging *PagingRequest) (*UserPagingConnection, error)
	GetUser(ctx context.Context, id string) (*spotigraph.Domain_User, error)
	GetUsers(ctx context.Context, ids []string) ([]*spotigraph.Domain_User, error)
	SearchForSquads(ctx context.Context, paging *PagingRequest) (*SquadPagingConnection, error)
	GetSquad(ctx context.Context, id string) (*spotigraph.Domain_Squad, error)
	GetSquads(ctx context.Context, ids []string) ([]*spotigraph.Domain_Squad, error)
	SearchForTribes(ctx context.Context, paging *PagingRequest) (*TribePagingConnection, error)
	GetTribe(ctx context.Context, id string) (*spotigraph.Domain_Tribe, error)
	GetTribes(ctx context.Context, ids []string) ([]*spotigraph.Domain_Tribe, error)
	SearchForChapters(ctx context.Context, paging *PagingRequest) (*ChapterPagingConnection, error)
	GetChapter(ctx context.Context, id string) (*spotigraph.Domain_Chapter, error)
	GetChapters(ctx context.Context, ids []string) ([]*spotigraph.Domain_Chapter, error)
	SearchForGuilds(ctx context.Context, paging *PagingRequest) (*GuildPagingConnection, error)
	GetGuild(ctx context.Context, id string) (*spotigraph.Domain_Guild, error)
	GetGuilds(ctx context.Context, ids []string) ([]*spotigraph.Domain_Guild, error)
}

type SquadResolver interface {
	ProductOwner(ctx context.Context, obj *spotigraph.Domain_Squad) (*spotigraph.Domain_User, error)
	Members(ctx context.Context, obj *spotigraph.Domain_Squad, paging *PagingRequest) (*UserPagingConnection, error)
}

type TribeResolver interface {
	Squads(ctx context.Context, obj *spotigraph.Domain_Tribe, paging *PagingRequest) (*SquadPagingConnection, error)
}

type UserResolver interface {
	Squads(ctx context.Context, obj *spotigraph.Domain_User, paging *PagingRequest) (*SquadPagingConnection, error)
	Chapter(ctx context.Context, obj *spotigraph.Domain_User) (*spotigraph.Domain_Chapter, error)
	Guilds(ctx context.Context, obj *spotigraph.Domain_User, paging *PagingRequest) (*GuildPagingConnection, error)
}

type executableSchema struct {
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	ec := executionContext{nil, e}
	_ = ec
	switch typeName + "." + field {

	case "Chapter.id":
		if e.complexity.Chapter.Id == nil {
			break
		}

		return e.complexity.Chapter.Id(childComplexity), true

	case "Chapter.leader":
		if e.complexity.Chapter.Leader == nil {
			break
		}

		return e.complexity.Chapter.Leader(childComplexity), true

	case "Chapter.members":
		if e.complexity.Chapter.Members == nil {
			break
		}

		args, err := ec.field_Chapter_members_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Chapter.Members(childComplexity, args["paging"].(*PagingRequest)), true

	case "Chapter.name":
		if e.complexity.Chapter.Name == nil {
			break
		}

		return e.complexity.Chapter.Name(childComplexity), true

	case "Chapter.urn":
		if e.complexity.Chapter.Urn == nil {
			break
		}

		return e.complexity.Chapter.Urn(childComplexity), true

	case "ChapterPagingConnection.items":
		if e.complexity.ChapterPagingConnection.Items == nil {
			break
		}

		return e.complexity.ChapterPagingConnection.Items(childComplexity), true

	case "ChapterPagingConnection.nextToken":
		if e.complexity.ChapterPagingConnection.NextToken == nil {
			break
		}

		return e.complexity.ChapterPagingConnection.NextToken(childComplexity), true

	case "Error.code":
		if e.complexity.Error.Code == nil {
			break
		}

		return e.complexity.Error.Code(childComplexity), true

	case "Error.message":
		if e.complexity.Error.Message == nil {
			break
		}

		return e.complexity.Error.Message(childComplexity), true

	case "Guild.id":
		if e.complexity.Guild.Id == nil {
			break
		}

		return e.complexity.Guild.Id(childComplexity), true

	case "Guild.members":
		if e.complexity.Guild.Members == nil {
			break
		}

		args, err := ec.field_Guild_members_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Guild.Members(childComplexity, args["paging"].(*PagingRequest)), true

	case "Guild.name":
		if e.complexity.Guild.Name == nil {
			break
		}

		return e.complexity.Guild.Name(childComplexity), true

	case "Guild.urn":
		if e.complexity.Guild.Urn == nil {
			break
		}

		return e.complexity.Guild.Urn(childComplexity), true

	case "GuildPagingConnection.items":
		if e.complexity.GuildPagingConnection.Items == nil {
			break
		}

		return e.complexity.GuildPagingConnection.Items(childComplexity), true

	case "GuildPagingConnection.nextToken":
		if e.complexity.GuildPagingConnection.NextToken == nil {
			break
		}

		return e.complexity.GuildPagingConnection.NextToken(childComplexity), true

	case "Mutation.addChapterMembers":
		if e.complexity.Mutation.AddChapterMembers == nil {
			break
		}

		args, err := ec.field_Mutation_addChapterMembers_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddChapterMembers(childComplexity, args["id"].(string), args["users"].([]*string)), true

	case "Mutation.addGuildMembers":
		if e.complexity.Mutation.AddGuildMembers == nil {
			break
		}

		args, err := ec.field_Mutation_addGuildMembers_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddGuildMembers(childComplexity, args["id"].(string), args["users"].([]*string)), true

	case "Mutation.addSquadMembers":
		if e.complexity.Mutation.AddSquadMembers == nil {
			break
		}

		args, err := ec.field_Mutation_addSquadMembers_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddSquadMembers(childComplexity, args["id"].(string), args["users"].([]*string)), true

	case "Mutation.addTribeSquads":
		if e.complexity.Mutation.AddTribeSquads == nil {
			break
		}

		args, err := ec.field_Mutation_addTribeSquads_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddTribeSquads(childComplexity, args["id"].(string), args["squads"].([]*string)), true

	case "Mutation.createChapter":
		if e.complexity.Mutation.CreateChapter == nil {
			break
		}

		args, err := ec.field_Mutation_createChapter_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateChapter(childComplexity, args["input"].(*spotigraph.ChapterCreateReq)), true

	case "Mutation.createGuild":
		if e.complexity.Mutation.CreateGuild == nil {
			break
		}

		args, err := ec.field_Mutation_createGuild_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateGuild(childComplexity, args["input"].(*spotigraph.GuildCreateReq)), true

	case "Mutation.createSquad":
		if e.complexity.Mutation.CreateSquad == nil {
			break
		}

		args, err := ec.field_Mutation_createSquad_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateSquad(childComplexity, args["input"].(*spotigraph.SquadCreateReq)), true

	case "Mutation.createTribe":
		if e.complexity.Mutation.CreateTribe == nil {
			break
		}

		args, err := ec.field_Mutation_createTribe_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateTribe(childComplexity, args["input"].(*spotigraph.TribeCreateReq)), true

	case "Mutation.createUser":
		if e.complexity.Mutation.CreateUser == nil {
			break
		}

		args, err := ec.field_Mutation_createUser_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateUser(childComplexity, args["input"].(*spotigraph.UserCreateReq)), true

	case "Mutation.deleteChapter":
		if e.complexity.Mutation.DeleteChapter == nil {
			break
		}

		args, err := ec.field_Mutation_deleteChapter_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteChapter(childComplexity, args["id"].(*string)), true

	case "Mutation.deleteGuild":
		if e.complexity.Mutation.DeleteGuild == nil {
			break
		}

		args, err := ec.field_Mutation_deleteGuild_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteGuild(childComplexity, args["id"].(*string)), true

	case "Mutation.deleteSquad":
		if e.complexity.Mutation.DeleteSquad == nil {
			break
		}

		args, err := ec.field_Mutation_deleteSquad_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteSquad(childComplexity, args["id"].(*string)), true

	case "Mutation.deleteTribe":
		if e.complexity.Mutation.DeleteTribe == nil {
			break
		}

		args, err := ec.field_Mutation_deleteTribe_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteTribe(childComplexity, args["id"].(*string)), true

	case "Mutation.deleteUser":
		if e.complexity.Mutation.DeleteUser == nil {
			break
		}

		args, err := ec.field_Mutation_deleteUser_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteUser(childComplexity, args["id"].(*string)), true

	case "Mutation.removeChapterMembers":
		if e.complexity.Mutation.RemoveChapterMembers == nil {
			break
		}

		args, err := ec.field_Mutation_removeChapterMembers_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RemoveChapterMembers(childComplexity, args["id"].(string), args["users"].([]*string)), true

	case "Mutation.removeGuildMembers":
		if e.complexity.Mutation.RemoveGuildMembers == nil {
			break
		}

		args, err := ec.field_Mutation_removeGuildMembers_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RemoveGuildMembers(childComplexity, args["id"].(string), args["users"].([]*string)), true

	case "Mutation.removeSquadMembers":
		if e.complexity.Mutation.RemoveSquadMembers == nil {
			break
		}

		args, err := ec.field_Mutation_removeSquadMembers_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RemoveSquadMembers(childComplexity, args["id"].(string), args["users"].([]*string)), true

	case "Mutation.removeTribeSquads":
		if e.complexity.Mutation.RemoveTribeSquads == nil {
			break
		}

		args, err := ec.field_Mutation_removeTribeSquads_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RemoveTribeSquads(childComplexity, args["id"].(string), args["squads"].([]*string)), true

	case "Mutation.updateChapter":
		if e.complexity.Mutation.UpdateChapter == nil {
			break
		}

		args, err := ec.field_Mutation_updateChapter_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateChapter(childComplexity, args["input"].(*ChapterUpdateInput)), true

	case "Mutation.updateGuild":
		if e.complexity.Mutation.UpdateGuild == nil {
			break
		}

		args, err := ec.field_Mutation_updateGuild_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateGuild(childComplexity, args["input"].(*GuildUpdateInput)), true

	case "Mutation.updateSquad":
		if e.complexity.Mutation.UpdateSquad == nil {
			break
		}

		args, err := ec.field_Mutation_updateSquad_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateSquad(childComplexity, args["input"].(*SquadUpdateInput)), true

	case "Mutation.updateTribe":
		if e.complexity.Mutation.UpdateTribe == nil {
			break
		}

		args, err := ec.field_Mutation_updateTribe_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateTribe(childComplexity, args["input"].(*TribeUpdateInput)), true

	case "Mutation.updateUser":
		if e.complexity.Mutation.UpdateUser == nil {
			break
		}

		args, err := ec.field_Mutation_updateUser_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateUser(childComplexity, args["input"].(*UserUpdateInput)), true

	case "Query.getChapter":
		if e.complexity.Query.GetChapter == nil {
			break
		}

		args, err := ec.field_Query_getChapter_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetChapter(childComplexity, args["id"].(string)), true

	case "Query.getChapters":
		if e.complexity.Query.GetChapters == nil {
			break
		}

		args, err := ec.field_Query_getChapters_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetChapters(childComplexity, args["ids"].([]string)), true

	case "Query.getGuild":
		if e.complexity.Query.GetGuild == nil {
			break
		}

		args, err := ec.field_Query_getGuild_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetGuild(childComplexity, args["id"].(string)), true

	case "Query.getGuilds":
		if e.complexity.Query.GetGuilds == nil {
			break
		}

		args, err := ec.field_Query_getGuilds_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetGuilds(childComplexity, args["ids"].([]string)), true

	case "Query.getSquad":
		if e.complexity.Query.GetSquad == nil {
			break
		}

		args, err := ec.field_Query_getSquad_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetSquad(childComplexity, args["id"].(string)), true

	case "Query.getSquads":
		if e.complexity.Query.GetSquads == nil {
			break
		}

		args, err := ec.field_Query_getSquads_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetSquads(childComplexity, args["ids"].([]string)), true

	case "Query.getTribe":
		if e.complexity.Query.GetTribe == nil {
			break
		}

		args, err := ec.field_Query_getTribe_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetTribe(childComplexity, args["id"].(string)), true

	case "Query.getTribes":
		if e.complexity.Query.GetTribes == nil {
			break
		}

		args, err := ec.field_Query_getTribes_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetTribes(childComplexity, args["ids"].([]string)), true

	case "Query.getUser":
		if e.complexity.Query.GetUser == nil {
			break
		}

		args, err := ec.field_Query_getUser_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetUser(childComplexity, args["id"].(string)), true

	case "Query.getUsers":
		if e.complexity.Query.GetUsers == nil {
			break
		}

		args, err := ec.field_Query_getUsers_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetUsers(childComplexity, args["ids"].([]string)), true

	case "Query.me":
		if e.complexity.Query.Me == nil {
			break
		}

		return e.complexity.Query.Me(childComplexity), true

	case "Query.searchForChapters":
		if e.complexity.Query.SearchForChapters == nil {
			break
		}

		args, err := ec.field_Query_searchForChapters_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.SearchForChapters(childComplexity, args["paging"].(*PagingRequest)), true

	case "Query.searchForGuilds":
		if e.complexity.Query.SearchForGuilds == nil {
			break
		}

		args, err := ec.field_Query_searchForGuilds_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.SearchForGuilds(childComplexity, args["paging"].(*PagingRequest)), true

	case "Query.searchForSquads":
		if e.complexity.Query.SearchForSquads == nil {
			break
		}

		args, err := ec.field_Query_searchForSquads_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.SearchForSquads(childComplexity, args["paging"].(*PagingRequest)), true

	case "Query.searchForTribes":
		if e.complexity.Query.SearchForTribes == nil {
			break
		}

		args, err := ec.field_Query_searchForTribes_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.SearchForTribes(childComplexity, args["paging"].(*PagingRequest)), true

	case "Query.searchForUsers":
		if e.complexity.Query.SearchForUsers == nil {
			break
		}

		args, err := ec.field_Query_searchForUsers_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.SearchForUsers(childComplexity, args["paging"].(*PagingRequest)), true

	case "Squad.id":
		if e.complexity.Squad.Id == nil {
			break
		}

		return e.complexity.Squad.Id(childComplexity), true

	case "Squad.members":
		if e.complexity.Squad.Members == nil {
			break
		}

		args, err := ec.field_Squad_members_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Squad.Members(childComplexity, args["paging"].(*PagingRequest)), true

	case "Squad.name":
		if e.complexity.Squad.Name == nil {
			break
		}

		return e.complexity.Squad.Name(childComplexity), true

	case "Squad.productOwner":
		if e.complexity.Squad.ProductOwner == nil {
			break
		}

		return e.complexity.Squad.ProductOwner(childComplexity), true

	case "Squad.urn":
		if e.complexity.Squad.Urn == nil {
			break
		}

		return e.complexity.Squad.Urn(childComplexity), true

	case "SquadPagingConnection.items":
		if e.complexity.SquadPagingConnection.Items == nil {
			break
		}

		return e.complexity.SquadPagingConnection.Items(childComplexity), true

	case "SquadPagingConnection.nextToken":
		if e.complexity.SquadPagingConnection.NextToken == nil {
			break
		}

		return e.complexity.SquadPagingConnection.NextToken(childComplexity), true

	case "Tribe.id":
		if e.complexity.Tribe.Id == nil {
			break
		}

		return e.complexity.Tribe.Id(childComplexity), true

	case "Tribe.name":
		if e.complexity.Tribe.Name == nil {
			break
		}

		return e.complexity.Tribe.Name(childComplexity), true

	case "Tribe.squads":
		if e.complexity.Tribe.Squads == nil {
			break
		}

		args, err := ec.field_Tribe_squads_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Tribe.Squads(childComplexity, args["paging"].(*PagingRequest)), true

	case "Tribe.urn":
		if e.complexity.Tribe.Urn == nil {
			break
		}

		return e.complexity.Tribe.Urn(childComplexity), true

	case "TribePagingConnection.items":
		if e.complexity.TribePagingConnection.Items == nil {
			break
		}

		return e.complexity.TribePagingConnection.Items(childComplexity), true

	case "TribePagingConnection.nextToken":
		if e.complexity.TribePagingConnection.NextToken == nil {
			break
		}

		return e.complexity.TribePagingConnection.NextToken(childComplexity), true

	case "User.chapter":
		if e.complexity.User.Chapter == nil {
			break
		}

		return e.complexity.User.Chapter(childComplexity), true

	case "User.guilds":
		if e.complexity.User.Guilds == nil {
			break
		}

		args, err := ec.field_User_guilds_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.User.Guilds(childComplexity, args["paging"].(*PagingRequest)), true

	case "User.id":
		if e.complexity.User.Id == nil {
			break
		}

		return e.complexity.User.Id(childComplexity), true

	case "User.principal":
		if e.complexity.User.Principal == nil {
			break
		}

		return e.complexity.User.Principal(childComplexity), true

	case "User.squads":
		if e.complexity.User.Squads == nil {
			break
		}

		args, err := ec.field_User_squads_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.User.Squads(childComplexity, args["paging"].(*PagingRequest)), true

	case "User.urn":
		if e.complexity.User.Urn == nil {
			break
		}

		return e.complexity.User.Urn(childComplexity), true

	case "UserPagingConnection.items":
		if e.complexity.UserPagingConnection.Items == nil {
			break
		}

		return e.complexity.UserPagingConnection.Items(childComplexity), true

	case "UserPagingConnection.nextToken":
		if e.complexity.UserPagingConnection.NextToken == nil {
			break
		}

		return e.complexity.UserPagingConnection.NextToken(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Query(ctx context.Context, op *ast.OperationDefinition) *graphql.Response {
	ec := executionContext{graphql.GetRequestContext(ctx), e}

	buf := ec.RequestMiddleware(ctx, func(ctx context.Context) []byte {
		data := ec._Query(ctx, op.SelectionSet)
		var buf bytes.Buffer
		data.MarshalGQL(&buf)
		return buf.Bytes()
	})

	return &graphql.Response{
		Data:       buf,
		Errors:     ec.Errors,
		Extensions: ec.Extensions,
	}
}

func (e *executableSchema) Mutation(ctx context.Context, op *ast.OperationDefinition) *graphql.Response {
	ec := executionContext{graphql.GetRequestContext(ctx), e}

	buf := ec.RequestMiddleware(ctx, func(ctx context.Context) []byte {
		data := ec._Mutation(ctx, op.SelectionSet)
		var buf bytes.Buffer
		data.MarshalGQL(&buf)
		return buf.Bytes()
	})

	return &graphql.Response{
		Data:       buf,
		Errors:     ec.Errors,
		Extensions: ec.Extensions,
	}
}

func (e *executableSchema) Subscription(ctx context.Context, op *ast.OperationDefinition) func() *graphql.Response {
	return graphql.OneShot(graphql.ErrorResponse(ctx, "subscriptions are not supported"))
}

type executionContext struct {
	*graphql.RequestContext
	*executableSchema
}

func (ec *executionContext) FieldMiddleware(ctx context.Context, obj interface{}, next graphql.Resolver) (ret interface{}) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	res, err := ec.ResolverMiddleware(ctx, next)
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	return res
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(parsedSchema), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(parsedSchema, parsedSchema.Types[name]), nil
}

var parsedSchema = gqlparser.MustLoadSchema(
	&ast.Source{Name: "schema/chapter.graphql", Input: `# Chapter describe group of user working together
type Chapter {
  # Internal identifier
  id:   ID!
  # Node identifier
  urn: String!
  # Chapter name
  name: String!

  # Chapter leader of this chapter
  leader: User!
  # User collection member of this chapter
  members(paging: PagingRequest): UserPagingConnection
}

# --------------------------------------------------------

# Query extension
extend type Query {
  # List all chapters
  searchForChapters(paging: PagingRequest): ChapterPagingConnection
  # Retrieve a chapter by id
  getChapter(id: ID!): Chapter
  # Retrieve multiple chapters by id
  getChapters(ids: [ID!]): [Chapter]
}

# --------------------------------------------------------

# PagingConnection for chapter pagination
type ChapterPagingConnection {
  items: [Chapter]
  nextToken: String
}

# Input object for chapter creation
input ChapterCreateInput {
  # Chapter name
  name: String!
}

# Input object for chapter update
input ChapterUpdateInput {
  # User identifier
  id: ID!
  # Name
  name: String
  # Chapter leader
  leader: ID
}

# Mutation extension
extend type Mutation {
  # Create a new chapter
  createChapter(input: ChapterCreateInput): Chapter
  # Update the chapter informations
  updateChapter(input: ChapterUpdateInput): Chapter
  # Delete a chapter
  deleteChapter(id: ID): Chapter
  # Assign users to chapter
  addChapterMembers(id: ID!, users: [ID]): Chapter
  # Remove users from chapter
  removeChapterMembers(id: ID!, users: [ID]): Chapter
}
`},
	&ast.Source{Name: "schema/common.graphql", Input: `# Business error return by backend
type Error {
  # Error code as HTTP status
  code: Int!
  # Error message attached to event
  message: String!
}

# PagingRequest for paginable collection
input PagingRequest {
  # Item limit
  limit: Int
  # Next page token
  nextToken: String
}
`},
	&ast.Source{Name: "schema/guild.graphql", Input: `# Guild describe group of user working together
type Guild {
  # Internal identifier
  id:   ID!
  # Node identifier
  urn: String!
  # Guild name
  name: String!

  # User collection member of this guild
  members(paging: PagingRequest): UserPagingConnection
}

# --------------------------------------------------------

# Query extension
extend type Query {
  # List all guilds
  searchForGuilds(paging: PagingRequest): GuildPagingConnection
  # Retrieve a guild by id
  getGuild(id: ID!): Guild
  # Retrieve multiple guilds by id
  getGuilds(ids: [ID!]): [Guild]
}

# --------------------------------------------------------

# PagingConnection for guild pagination
type GuildPagingConnection {
  items: [Guild]
  nextToken: String
}

# Input object for guild creation
input GuildCreateInput {
  # Guild name
  name: String!
}

# Input object for guild update
input GuildUpdateInput {
  # User identifier
  id: ID!
  # Name
  name: String
}

# Mutation extension
extend type Mutation {
  # Create a new guild
  createGuild(input: GuildCreateInput): Guild
  # Update the guild informations
  updateGuild(input: GuildUpdateInput): Guild
  # Delete a guild
  deleteGuild(id: ID): Guild
  # Assign users to guild
  addGuildMembers(id: ID!, users: [ID]): Guild
  # Remove users from guild
  removeGuildMembers(id: ID!, users: [ID]): Guild
}
`},
	&ast.Source{Name: "schema/squad.graphql", Input: `# Squad describe group of user working together
type Squad {
  # Internal identifier
  id:   ID!
  # Node identifier
  urn: String!
  # Squad name
  name: String!

  # Product owner of this squad
  productOwner: User!
  # User collection member of this squad
  members(paging: PagingRequest): UserPagingConnection
}

# --------------------------------------------------------

# Query extension
extend type Query {
  # List all squads
  searchForSquads(paging: PagingRequest): SquadPagingConnection
  # Retrieve a squad by id
  getSquad(id: ID!): Squad
  # Retrieve multiple squads by id
  getSquads(ids: [ID!]): [Squad]
}

# --------------------------------------------------------

# PagingConnection for squad pagination
type SquadPagingConnection {
  items: [Squad]
  nextToken: String
}

# Input object for squad creation
input SquadCreateInput {
  # Squad name
  name: String!
}

# Input object for squad update
input SquadUpdateInput {
  # User identifier
  id: ID!
  # Name
  name: String
  # Product Owner
  productOwnerID: ID
}

# Mutation extension
extend type Mutation {
  # Create a new squad
  createSquad(input: SquadCreateInput): Squad
  # Update the squad informations
  updateSquad(input: SquadUpdateInput): Squad
  # Delete a squad
  deleteSquad(id: ID): Squad
  # Assign users to squad
  addSquadMembers(id: ID!, users: [ID]): Squad
  # Remove users from squad
  removeSquadMembers(id: ID!, users: [ID]): Squad
}
`},
	&ast.Source{Name: "schema/tribe.graphql", Input: `# Tribe describe group of squad working together
type Tribe {
  # Internal identifier
  id:   ID!
  # Node identifier
  urn: String!
  # Tribe name
  name: String!

  # Squad collection member of this tribe
  squads(paging: PagingRequest): SquadPagingConnection
}

# --------------------------------------------------------

# Query extension
extend type Query {
  # List all tribes
  searchForTribes(paging: PagingRequest): TribePagingConnection
  # Retrieve a tribe by id
  getTribe(id: ID!): Tribe
  # Retrieve multiple tribes by id
  getTribes(ids: [ID!]): [Tribe]
}

# --------------------------------------------------------

# PagingConnection for tribe pagination
type TribePagingConnection {
  items: [Tribe]
  nextToken: String
}

# Input object for tribe creation
input TribeCreateInput {
  # Tribe name
  name: String!
}

# Input object for tribe update
input TribeUpdateInput {
  # User identifier
  id: ID!
  # Name
  name: String
}

# Mutation extension
extend type Mutation {
  # Create a new tribe
  createTribe(input: TribeCreateInput): Tribe
  # Update the tribe informations
  updateTribe(input: TribeUpdateInput): Tribe
  # Delete a tribe
  deleteTribe(id: ID): Tribe
  # Assign squads to tribe
  addTribeSquads(id: ID!, squads: [ID]): Tribe
  # Remove squads from tribe
  removeTribeSquads(id: ID!, squads: [ID]): Tribe
}
`},
	&ast.Source{Name: "schema/user.graphql", Input: `# User describe identity known by the service
type User {
  # Internal identifier
  id:   ID!
  # Node identifier
  urn: String!
  # Principal hash
  principal: String! # required

  # User squads
  squads(paging: PagingRequest): SquadPagingConnection
  # User chapter
  chapter: Chapter
  # User guilds
  guilds(paging: PagingRequest): GuildPagingConnection
}

# --------------------------------------------------------

# Query extension
type Query {
  # Authenticated user
  me: User!
  # Search for users
  searchForUsers(paging: PagingRequest): UserPagingConnection
  # Retrieve an user by id
  getUser(id: ID!): User
  # Retrieve multiple users by id
  getUsers(ids: [ID!]): [User]
}

# --------------------------------------------------------

# PagingConnection for user pagination
type UserPagingConnection {
  items: [User]
  nextToken: String
}

# Input object for user creation
input UserCreateInput {
  # User identity principal
  principal: String!
}

# Input object for user update
input UserUpdateInput {
  # User identifier
  id: ID!

  # TODO: Add updatable attributes
}

# Mutation extension
type Mutation {
  # Create a new user identity
  createUser(input: UserCreateInput): User
  # Update the user identity informations
  updateUser(input: UserUpdateInput): User
  # Delete an user identity
  deleteUser(id: ID): User
}
`},
)

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) field_Chapter_members_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *PagingRequest
	if tmp, ok := rawArgs["paging"]; ok {
		arg0, err = ec.unmarshalOPagingRequest2ᚖgoᚗzenitharᚗorgᚋspotigraphᚋcliᚋspotigraphᚋinternalᚋdispatchersᚋgraphqlᚋhandlersᚋgeneratedᚐPagingRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["paging"] = arg0
	return args, nil
}

func (ec *executionContext) field_Guild_members_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *PagingRequest
	if tmp, ok := rawArgs["paging"]; ok {
		arg0, err = ec.unmarshalOPagingRequest2ᚖgoᚗzenitharᚗorgᚋspotigraphᚋcliᚋspotigraphᚋinternalᚋdispatchersᚋgraphqlᚋhandlersᚋgeneratedᚐPagingRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["paging"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_addChapterMembers_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 []*string
	if tmp, ok := rawArgs["users"]; ok {
		arg1, err = ec.unmarshalOID2ᚕᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["users"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_addGuildMembers_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 []*string
	if tmp, ok := rawArgs["users"]; ok {
		arg1, err = ec.unmarshalOID2ᚕᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["users"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_addSquadMembers_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 []*string
	if tmp, ok := rawArgs["users"]; ok {
		arg1, err = ec.unmarshalOID2ᚕᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["users"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_addTribeSquads_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 []*string
	if tmp, ok := rawArgs["squads"]; ok {
		arg1, err = ec.unmarshalOID2ᚕᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["squads"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_createChapter_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *spotigraph.ChapterCreateReq
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalOChapterCreateInput2ᚖgoᚗzenitharᚗorgᚋspotigraphᚋpkgᚋprotocolᚋv1ᚋspotigraphᚐChapterCreateReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createGuild_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *spotigraph.GuildCreateReq
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalOGuildCreateInput2ᚖgoᚗzenitharᚗorgᚋspotigraphᚋpkgᚋprotocolᚋv1ᚋspotigraphᚐGuildCreateReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createSquad_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *spotigraph.SquadCreateReq
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalOSquadCreateInput2ᚖgoᚗzenitharᚗorgᚋspotigraphᚋpkgᚋprotocolᚋv1ᚋspotigraphᚐSquadCreateReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createTribe_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *spotigraph.TribeCreateReq
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalOTribeCreateInput2ᚖgoᚗzenitharᚗorgᚋspotigraphᚋpkgᚋprotocolᚋv1ᚋspotigraphᚐTribeCreateReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createUser_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *spotigraph.UserCreateReq
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalOUserCreateInput2ᚖgoᚗzenitharᚗorgᚋspotigraphᚋpkgᚋprotocolᚋv1ᚋspotigraphᚐUserCreateReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteChapter_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteGuild_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteSquad_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteTribe_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteUser_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_removeChapterMembers_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 []*string
	if tmp, ok := rawArgs["users"]; ok {
		arg1, err = ec.unmarshalOID2ᚕᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["users"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_removeGuildMembers_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 []*string
	if tmp, ok := rawArgs["users"]; ok {
		arg1, err = ec.unmarshalOID2ᚕᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["users"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_removeSquadMembers_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 []*string
	if tmp, ok := rawArgs["users"]; ok {
		arg1, err = ec.unmarshalOID2ᚕᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["users"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_removeTribeSquads_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 []*string
	if tmp, ok := rawArgs["squads"]; ok {
		arg1, err = ec.unmarshalOID2ᚕᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["squads"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateChapter_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *ChapterUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalOChapterUpdateInput2ᚖgoᚗzenitharᚗorgᚋspotigraphᚋcliᚋspotigraphᚋinternalᚋdispatchersᚋgraphqlᚋhandlersᚋgeneratedᚐChapterUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateGuild_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *GuildUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalOGuildUpdateInput2ᚖgoᚗzenitharᚗorgᚋspotigraphᚋcliᚋspotigraphᚋinternalᚋdispatchersᚋgraphqlᚋhandlersᚋgeneratedᚐGuildUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateSquad_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *SquadUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalOSquadUpdateInput2ᚖgoᚗzenitharᚗorgᚋspotigraphᚋcliᚋspotigraphᚋinternalᚋdispatchersᚋgraphqlᚋhandlersᚋgeneratedᚐSquadUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateTribe_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *TribeUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalOTribeUpdateInput2ᚖgoᚗzenitharᚗorgᚋspotigraphᚋcliᚋspotigraphᚋinternalᚋdispatchersᚋgraphqlᚋhandlersᚋgeneratedᚐTribeUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateUser_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *UserUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalOUserUpdateInput2ᚖgoᚗzenitharᚗorgᚋspotigraphᚋcliᚋspotigraphᚋinternalᚋdispatchersᚋgraphqlᚋhandlersᚋgeneratedᚐUserUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getChapter_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getChapters_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []string
	if tmp, ok := rawArgs["ids"]; ok {
		arg0, err = ec.unmarshalOID2ᚕstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["ids"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getGuild_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getGuilds_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []string
	if tmp, ok := rawArgs["ids"]; ok {
		arg0, err = ec.unmarshalOID2ᚕstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["ids"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getSquad_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getSquads_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []string
	if tmp, ok := rawArgs["ids"]; ok {
		arg0, err = ec.unmarshalOID2ᚕstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["ids"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getTribe_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getTribes_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []string
	if tmp, ok := rawArgs["ids"]; ok {
		arg0, err = ec.unmarshalOID2ᚕstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["ids"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getUser_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getUsers_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []string
	if tmp, ok := rawArgs["ids"]; ok {
		arg0, err = ec.unmarshalOID2ᚕstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["ids"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_searchForChapters_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *PagingRequest
	if tmp, ok := rawArgs["paging"]; ok {
		arg0, err = ec.unmarshalOPagingRequest2ᚖgoᚗzenitharᚗorgᚋspotigraphᚋcliᚋspotigraphᚋinternalᚋdispatchersᚋgraphqlᚋhandlersᚋgeneratedᚐPagingRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["paging"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_searchForGuilds_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *PagingRequest
	if tmp, ok := rawArgs["paging"]; ok {
		arg0, err = ec.unmarshalOPagingRequest2ᚖgoᚗzenitharᚗorgᚋspotigraphᚋcliᚋspotigraphᚋinternalᚋdispatchersᚋgraphqlᚋhandlersᚋgeneratedᚐPagingRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["paging"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_searchForSquads_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *PagingRequest
	if tmp, ok := rawArgs["paging"]; ok {
		arg0, err = ec.unmarshalOPagingRequest2ᚖgoᚗzenitharᚗorgᚋspotigraphᚋcliᚋspotigraphᚋinternalᚋdispatchersᚋgraphqlᚋhandlersᚋgeneratedᚐPagingRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["paging"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_searchForTribes_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *PagingRequest
	if tmp, ok := rawArgs["paging"]; ok {
		arg0, err = ec.unmarshalOPagingRequest2ᚖgoᚗzenitharᚗorgᚋspotigraphᚋcliᚋspotigraphᚋinternalᚋdispatchersᚋgraphqlᚋhandlersᚋgeneratedᚐPagingRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["paging"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_searchForUsers_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *PagingRequest
	if tmp, ok := rawArgs["paging"]; ok {
		arg0, err = ec.unmarshalOPagingRequest2ᚖgoᚗzenitharᚗorgᚋspotigraphᚋcliᚋspotigraphᚋinternalᚋdispatchersᚋgraphqlᚋhandlersᚋgeneratedᚐPagingRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["paging"] = arg0
	return args, nil
}

func (ec *executionContext) field_Squad_members_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *PagingRequest
	if tmp, ok := rawArgs["paging"]; ok {
		arg0, err = ec.unmarshalOPagingRequest2ᚖgoᚗzenitharᚗorgᚋspotigraphᚋcliᚋspotigraphᚋinternalᚋdispatchersᚋgraphqlᚋhandlersᚋgeneratedᚐPagingRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["paging"] = arg0
	return args, nil
}

func (ec *executionContext) field_Tribe_squads_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *PagingRequest
	if tmp, ok := rawArgs["paging"]; ok {
		arg0, err = ec.unmarshalOPagingRequest2ᚖgoᚗzenitharᚗorgᚋspotigraphᚋcliᚋspotigraphᚋinternalᚋdispatchersᚋgraphqlᚋhandlersᚋgeneratedᚐPagingRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["paging"] = arg0
	return args, nil
}

func (ec *executionContext) field_User_guilds_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *PagingRequest
	if tmp, ok := rawArgs["paging"]; ok {
		arg0, err = ec.unmarshalOPagingRequest2ᚖgoᚗzenitharᚗorgᚋspotigraphᚋcliᚋspotigraphᚋinternalᚋdispatchersᚋgraphqlᚋhandlersᚋgeneratedᚐPagingRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["paging"] = arg0
	return args, nil
}

func (ec *executionContext) field_User_squads_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *PagingRequest
	if tmp, ok := rawArgs["paging"]; ok {
		arg0, err = ec.unmarshalOPagingRequest2ᚖgoᚗzenitharᚗorgᚋspotigraphᚋcliᚋspotigraphᚋinternalᚋdispatchersᚋgraphqlᚋhandlersᚋgeneratedᚐPagingRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["paging"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

// endregion ***************************** args.gotpl *****************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _Chapter_id(ctx context.Context, field graphql.CollectedField, obj *spotigraph.Domain_Chapter) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Chapter",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Id, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Chapter_urn(ctx context.Context, field graphql.CollectedField, obj *spotigraph.Domain_Chapter) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Chapter",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Urn, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Chapter_name(ctx context.Context, field graphql.CollectedField, obj *spotigraph.Domain_Chapter) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Chapter",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Chapter_leader(ctx context.Context, field graphql.CollectedField, obj *spotigraph.Domain_Chapter) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Chapter",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Chapter().Leader(rctx, obj)
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*spotigraph.Domain_User)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNUser2ᚖgoᚗzenitharᚗorgᚋspotigraphᚋpkgᚋprotocolᚋv1ᚋspotigraphᚐDomain_User(ctx, field.Selections, res)
}

func (ec *executionContext) _Chapter_members(ctx context.Context, field graphql.CollectedField, obj *spotigraph.Domain_Chapter) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Chapter",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Chapter_members_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Chapter().Members(rctx, obj, args["paging"].(*PagingRequest))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*UserPagingConnection)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOUserPagingConnection2ᚖgoᚗzenitharᚗorgᚋspotigraphᚋcliᚋspotigraphᚋinternalᚋdispatchersᚋgraphqlᚋhandlersᚋgeneratedᚐUserPagingConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _ChapterPagingConnection_items(ctx context.Context, field graphql.CollectedField, obj *ChapterPagingConnection) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "ChapterPagingConnection",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Items, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*spotigraph.Domain_Chapter)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOChapter2ᚕᚖgoᚗzenitharᚗorgᚋspotigraphᚋpkgᚋprotocolᚋv1ᚋspotigraphᚐDomain_Chapter(ctx, field.Selections, res)
}

func (ec *executionContext) _ChapterPagingConnection_nextToken(ctx context.Context, field graphql.CollectedField, obj *ChapterPagingConnection) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "ChapterPagingConnection",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NextToken, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Error_code(ctx context.Context, field graphql.CollectedField, obj *spotigraph.Error) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Error",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Error().Code(rctx, obj)
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Error_message(ctx context.Context, field graphql.CollectedField, obj *spotigraph.Error) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Error",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Guild_id(ctx context.Context, field graphql.CollectedField, obj *spotigraph.Domain_Guild) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Guild",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Id, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Guild_urn(ctx context.Context, field graphql.CollectedField, obj *spotigraph.Domain_Guild) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Guild",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Urn, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Guild_name(ctx context.Context, field graphql.CollectedField, obj *spotigraph.Domain_Guild) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Guild",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Guild_members(ctx context.Context, field graphql.CollectedField, obj *spotigraph.Domain_Guild) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Guild",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Guild_members_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Guild().Members(rctx, obj, args["paging"].(*PagingRequest))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*UserPagingConnection)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOUserPagingConnection2ᚖgoᚗzenitharᚗorgᚋspotigraphᚋcliᚋspotigraphᚋinternalᚋdispatchersᚋgraphqlᚋhandlersᚋgeneratedᚐUserPagingConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _GuildPagingConnection_items(ctx context.Context, field graphql.CollectedField, obj *GuildPagingConnection) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "GuildPagingConnection",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Items, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*spotigraph.Domain_Guild)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOGuild2ᚕᚖgoᚗzenitharᚗorgᚋspotigraphᚋpkgᚋprotocolᚋv1ᚋspotigraphᚐDomain_Guild(ctx, field.Selections, res)
}

func (ec *executionContext) _GuildPagingConnection_nextToken(ctx context.Context, field graphql.CollectedField, obj *GuildPagingConnection) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "GuildPagingConnection",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NextToken, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createUser(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createUser_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateUser(rctx, args["input"].(*spotigraph.UserCreateReq))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*spotigraph.Domain_User)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOUser2ᚖgoᚗzenitharᚗorgᚋspotigraphᚋpkgᚋprotocolᚋv1ᚋspotigraphᚐDomain_User(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateUser(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateUser_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateUser(rctx, args["input"].(*UserUpdateInput))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*spotigraph.Domain_User)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOUser2ᚖgoᚗzenitharᚗorgᚋspotigraphᚋpkgᚋprotocolᚋv1ᚋspotigraphᚐDomain_User(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteUser(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteUser_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteUser(rctx, args["id"].(*string))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*spotigraph.Domain_User)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOUser2ᚖgoᚗzenitharᚗorgᚋspotigraphᚋpkgᚋprotocolᚋv1ᚋspotigraphᚐDomain_User(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createSquad(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createSquad_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateSquad(rctx, args["input"].(*spotigraph.SquadCreateReq))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*spotigraph.Domain_Squad)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOSquad2ᚖgoᚗzenitharᚗorgᚋspotigraphᚋpkgᚋprotocolᚋv1ᚋspotigraphᚐDomain_Squad(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateSquad(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateSquad_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateSquad(rctx, args["input"].(*SquadUpdateInput))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*spotigraph.Domain_Squad)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOSquad2ᚖgoᚗzenitharᚗorgᚋspotigraphᚋpkgᚋprotocolᚋv1ᚋspotigraphᚐDomain_Squad(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteSquad(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteSquad_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteSquad(rctx, args["id"].(*string))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*spotigraph.Domain_Squad)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOSquad2ᚖgoᚗzenitharᚗorgᚋspotigraphᚋpkgᚋprotocolᚋv1ᚋspotigraphᚐDomain_Squad(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_addSquadMembers(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_addSquadMembers_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AddSquadMembers(rctx, args["id"].(string), args["users"].([]*string))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*spotigraph.Domain_Squad)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOSquad2ᚖgoᚗzenitharᚗorgᚋspotigraphᚋpkgᚋprotocolᚋv1ᚋspotigraphᚐDomain_Squad(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_removeSquadMembers(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_removeSquadMembers_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().RemoveSquadMembers(rctx, args["id"].(string), args["users"].([]*string))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*spotigraph.Domain_Squad)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOSquad2ᚖgoᚗzenitharᚗorgᚋspotigraphᚋpkgᚋprotocolᚋv1ᚋspotigraphᚐDomain_Squad(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createTribe(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createTribe_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateTribe(rctx, args["input"].(*spotigraph.TribeCreateReq))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*spotigraph.Domain_Tribe)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOTribe2ᚖgoᚗzenitharᚗorgᚋspotigraphᚋpkgᚋprotocolᚋv1ᚋspotigraphᚐDomain_Tribe(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateTribe(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateTribe_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateTribe(rctx, args["input"].(*TribeUpdateInput))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*spotigraph.Domain_Tribe)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOTribe2ᚖgoᚗzenitharᚗorgᚋspotigraphᚋpkgᚋprotocolᚋv1ᚋspotigraphᚐDomain_Tribe(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteTribe(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteTribe_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteTribe(rctx, args["id"].(*string))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*spotigraph.Domain_Tribe)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOTribe2ᚖgoᚗzenitharᚗorgᚋspotigraphᚋpkgᚋprotocolᚋv1ᚋspotigraphᚐDomain_Tribe(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_addTribeSquads(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_addTribeSquads_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AddTribeSquads(rctx, args["id"].(string), args["squads"].([]*string))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*spotigraph.Domain_Tribe)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOTribe2ᚖgoᚗzenitharᚗorgᚋspotigraphᚋpkgᚋprotocolᚋv1ᚋspotigraphᚐDomain_Tribe(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_removeTribeSquads(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_removeTribeSquads_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().RemoveTribeSquads(rctx, args["id"].(string), args["squads"].([]*string))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*spotigraph.Domain_Tribe)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOTribe2ᚖgoᚗzenitharᚗorgᚋspotigraphᚋpkgᚋprotocolᚋv1ᚋspotigraphᚐDomain_Tribe(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createChapter(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createChapter_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateChapter(rctx, args["input"].(*spotigraph.ChapterCreateReq))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*spotigraph.Domain_Chapter)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOChapter2ᚖgoᚗzenitharᚗorgᚋspotigraphᚋpkgᚋprotocolᚋv1ᚋspotigraphᚐDomain_Chapter(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateChapter(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateChapter_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateChapter(rctx, args["input"].(*ChapterUpdateInput))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*spotigraph.Domain_Chapter)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOChapter2ᚖgoᚗzenitharᚗorgᚋspotigraphᚋpkgᚋprotocolᚋv1ᚋspotigraphᚐDomain_Chapter(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteChapter(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteChapter_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteChapter(rctx, args["id"].(*string))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*spotigraph.Domain_Chapter)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOChapter2ᚖgoᚗzenitharᚗorgᚋspotigraphᚋpkgᚋprotocolᚋv1ᚋspotigraphᚐDomain_Chapter(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_addChapterMembers(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_addChapterMembers_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AddChapterMembers(rctx, args["id"].(string), args["users"].([]*string))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*spotigraph.Domain_Chapter)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOChapter2ᚖgoᚗzenitharᚗorgᚋspotigraphᚋpkgᚋprotocolᚋv1ᚋspotigraphᚐDomain_Chapter(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_removeChapterMembers(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_removeChapterMembers_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().RemoveChapterMembers(rctx, args["id"].(string), args["users"].([]*string))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*spotigraph.Domain_Chapter)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOChapter2ᚖgoᚗzenitharᚗorgᚋspotigraphᚋpkgᚋprotocolᚋv1ᚋspotigraphᚐDomain_Chapter(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createGuild(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createGuild_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateGuild(rctx, args["input"].(*spotigraph.GuildCreateReq))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*spotigraph.Domain_Guild)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOGuild2ᚖgoᚗzenitharᚗorgᚋspotigraphᚋpkgᚋprotocolᚋv1ᚋspotigraphᚐDomain_Guild(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateGuild(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateGuild_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateGuild(rctx, args["input"].(*GuildUpdateInput))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*spotigraph.Domain_Guild)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOGuild2ᚖgoᚗzenitharᚗorgᚋspotigraphᚋpkgᚋprotocolᚋv1ᚋspotigraphᚐDomain_Guild(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteGuild(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteGuild_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteGuild(rctx, args["id"].(*string))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*spotigraph.Domain_Guild)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOGuild2ᚖgoᚗzenitharᚗorgᚋspotigraphᚋpkgᚋprotocolᚋv1ᚋspotigraphᚐDomain_Guild(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_addGuildMembers(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_addGuildMembers_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AddGuildMembers(rctx, args["id"].(string), args["users"].([]*string))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*spotigraph.Domain_Guild)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOGuild2ᚖgoᚗzenitharᚗorgᚋspotigraphᚋpkgᚋprotocolᚋv1ᚋspotigraphᚐDomain_Guild(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_removeGuildMembers(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_removeGuildMembers_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().RemoveGuildMembers(rctx, args["id"].(string), args["users"].([]*string))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*spotigraph.Domain_Guild)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOGuild2ᚖgoᚗzenitharᚗorgᚋspotigraphᚋpkgᚋprotocolᚋv1ᚋspotigraphᚐDomain_Guild(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_me(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Me(rctx)
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*spotigraph.Domain_User)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNUser2ᚖgoᚗzenitharᚗorgᚋspotigraphᚋpkgᚋprotocolᚋv1ᚋspotigraphᚐDomain_User(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_searchForUsers(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_searchForUsers_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().SearchForUsers(rctx, args["paging"].(*PagingRequest))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*UserPagingConnection)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOUserPagingConnection2ᚖgoᚗzenitharᚗorgᚋspotigraphᚋcliᚋspotigraphᚋinternalᚋdispatchersᚋgraphqlᚋhandlersᚋgeneratedᚐUserPagingConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getUser(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getUser_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetUser(rctx, args["id"].(string))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*spotigraph.Domain_User)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOUser2ᚖgoᚗzenitharᚗorgᚋspotigraphᚋpkgᚋprotocolᚋv1ᚋspotigraphᚐDomain_User(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getUsers(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getUsers_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetUsers(rctx, args["ids"].([]string))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*spotigraph.Domain_User)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOUser2ᚕᚖgoᚗzenitharᚗorgᚋspotigraphᚋpkgᚋprotocolᚋv1ᚋspotigraphᚐDomain_User(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_searchForSquads(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_searchForSquads_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().SearchForSquads(rctx, args["paging"].(*PagingRequest))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*SquadPagingConnection)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOSquadPagingConnection2ᚖgoᚗzenitharᚗorgᚋspotigraphᚋcliᚋspotigraphᚋinternalᚋdispatchersᚋgraphqlᚋhandlersᚋgeneratedᚐSquadPagingConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getSquad(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getSquad_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetSquad(rctx, args["id"].(string))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*spotigraph.Domain_Squad)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOSquad2ᚖgoᚗzenitharᚗorgᚋspotigraphᚋpkgᚋprotocolᚋv1ᚋspotigraphᚐDomain_Squad(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getSquads(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getSquads_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetSquads(rctx, args["ids"].([]string))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*spotigraph.Domain_Squad)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOSquad2ᚕᚖgoᚗzenitharᚗorgᚋspotigraphᚋpkgᚋprotocolᚋv1ᚋspotigraphᚐDomain_Squad(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_searchForTribes(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_searchForTribes_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().SearchForTribes(rctx, args["paging"].(*PagingRequest))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*TribePagingConnection)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOTribePagingConnection2ᚖgoᚗzenitharᚗorgᚋspotigraphᚋcliᚋspotigraphᚋinternalᚋdispatchersᚋgraphqlᚋhandlersᚋgeneratedᚐTribePagingConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getTribe(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getTribe_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetTribe(rctx, args["id"].(string))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*spotigraph.Domain_Tribe)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOTribe2ᚖgoᚗzenitharᚗorgᚋspotigraphᚋpkgᚋprotocolᚋv1ᚋspotigraphᚐDomain_Tribe(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getTribes(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getTribes_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetTribes(rctx, args["ids"].([]string))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*spotigraph.Domain_Tribe)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOTribe2ᚕᚖgoᚗzenitharᚗorgᚋspotigraphᚋpkgᚋprotocolᚋv1ᚋspotigraphᚐDomain_Tribe(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_searchForChapters(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_searchForChapters_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().SearchForChapters(rctx, args["paging"].(*PagingRequest))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ChapterPagingConnection)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOChapterPagingConnection2ᚖgoᚗzenitharᚗorgᚋspotigraphᚋcliᚋspotigraphᚋinternalᚋdispatchersᚋgraphqlᚋhandlersᚋgeneratedᚐChapterPagingConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getChapter(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getChapter_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetChapter(rctx, args["id"].(string))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*spotigraph.Domain_Chapter)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOChapter2ᚖgoᚗzenitharᚗorgᚋspotigraphᚋpkgᚋprotocolᚋv1ᚋspotigraphᚐDomain_Chapter(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getChapters(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getChapters_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetChapters(rctx, args["ids"].([]string))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*spotigraph.Domain_Chapter)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOChapter2ᚕᚖgoᚗzenitharᚗorgᚋspotigraphᚋpkgᚋprotocolᚋv1ᚋspotigraphᚐDomain_Chapter(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_searchForGuilds(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_searchForGuilds_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().SearchForGuilds(rctx, args["paging"].(*PagingRequest))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*GuildPagingConnection)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOGuildPagingConnection2ᚖgoᚗzenitharᚗorgᚋspotigraphᚋcliᚋspotigraphᚋinternalᚋdispatchersᚋgraphqlᚋhandlersᚋgeneratedᚐGuildPagingConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getGuild(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getGuild_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetGuild(rctx, args["id"].(string))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*spotigraph.Domain_Guild)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOGuild2ᚖgoᚗzenitharᚗorgᚋspotigraphᚋpkgᚋprotocolᚋv1ᚋspotigraphᚐDomain_Guild(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getGuilds(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getGuilds_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetGuilds(rctx, args["ids"].([]string))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*spotigraph.Domain_Guild)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOGuild2ᚕᚖgoᚗzenitharᚗorgᚋspotigraphᚋpkgᚋprotocolᚋv1ᚋspotigraphᚐDomain_Guild(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query___type_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectType(args["name"].(string))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectSchema()
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx, field.Selections, res)
}

func (ec *executionContext) _Squad_id(ctx context.Context, field graphql.CollectedField, obj *spotigraph.Domain_Squad) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Squad",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Id, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Squad_urn(ctx context.Context, field graphql.CollectedField, obj *spotigraph.Domain_Squad) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Squad",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Urn, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Squad_name(ctx context.Context, field graphql.CollectedField, obj *spotigraph.Domain_Squad) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Squad",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Squad_productOwner(ctx context.Context, field graphql.CollectedField, obj *spotigraph.Domain_Squad) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Squad",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Squad().ProductOwner(rctx, obj)
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*spotigraph.Domain_User)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNUser2ᚖgoᚗzenitharᚗorgᚋspotigraphᚋpkgᚋprotocolᚋv1ᚋspotigraphᚐDomain_User(ctx, field.Selections, res)
}

func (ec *executionContext) _Squad_members(ctx context.Context, field graphql.CollectedField, obj *spotigraph.Domain_Squad) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Squad",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Squad_members_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Squad().Members(rctx, obj, args["paging"].(*PagingRequest))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*UserPagingConnection)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOUserPagingConnection2ᚖgoᚗzenitharᚗorgᚋspotigraphᚋcliᚋspotigraphᚋinternalᚋdispatchersᚋgraphqlᚋhandlersᚋgeneratedᚐUserPagingConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _SquadPagingConnection_items(ctx context.Context, field graphql.CollectedField, obj *SquadPagingConnection) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "SquadPagingConnection",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Items, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*spotigraph.Domain_Squad)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOSquad2ᚕᚖgoᚗzenitharᚗorgᚋspotigraphᚋpkgᚋprotocolᚋv1ᚋspotigraphᚐDomain_Squad(ctx, field.Selections, res)
}

func (ec *executionContext) _SquadPagingConnection_nextToken(ctx context.Context, field graphql.CollectedField, obj *SquadPagingConnection) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "SquadPagingConnection",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NextToken, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Tribe_id(ctx context.Context, field graphql.CollectedField, obj *spotigraph.Domain_Tribe) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Tribe",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Id, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Tribe_urn(ctx context.Context, field graphql.CollectedField, obj *spotigraph.Domain_Tribe) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Tribe",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Urn, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Tribe_name(ctx context.Context, field graphql.CollectedField, obj *spotigraph.Domain_Tribe) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Tribe",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Tribe_squads(ctx context.Context, field graphql.CollectedField, obj *spotigraph.Domain_Tribe) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Tribe",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Tribe_squads_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Tribe().Squads(rctx, obj, args["paging"].(*PagingRequest))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*SquadPagingConnection)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOSquadPagingConnection2ᚖgoᚗzenitharᚗorgᚋspotigraphᚋcliᚋspotigraphᚋinternalᚋdispatchersᚋgraphqlᚋhandlersᚋgeneratedᚐSquadPagingConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _TribePagingConnection_items(ctx context.Context, field graphql.CollectedField, obj *TribePagingConnection) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "TribePagingConnection",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Items, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*spotigraph.Domain_Tribe)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOTribe2ᚕᚖgoᚗzenitharᚗorgᚋspotigraphᚋpkgᚋprotocolᚋv1ᚋspotigraphᚐDomain_Tribe(ctx, field.Selections, res)
}

func (ec *executionContext) _TribePagingConnection_nextToken(ctx context.Context, field graphql.CollectedField, obj *TribePagingConnection) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "TribePagingConnection",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NextToken, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _User_id(ctx context.Context, field graphql.CollectedField, obj *spotigraph.Domain_User) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "User",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Id, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _User_urn(ctx context.Context, field graphql.CollectedField, obj *spotigraph.Domain_User) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "User",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Urn, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _User_principal(ctx context.Context, field graphql.CollectedField, obj *spotigraph.Domain_User) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "User",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Principal, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _User_squads(ctx context.Context, field graphql.CollectedField, obj *spotigraph.Domain_User) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "User",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_User_squads_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.User().Squads(rctx, obj, args["paging"].(*PagingRequest))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*SquadPagingConnection)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOSquadPagingConnection2ᚖgoᚗzenitharᚗorgᚋspotigraphᚋcliᚋspotigraphᚋinternalᚋdispatchersᚋgraphqlᚋhandlersᚋgeneratedᚐSquadPagingConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _User_chapter(ctx context.Context, field graphql.CollectedField, obj *spotigraph.Domain_User) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "User",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.User().Chapter(rctx, obj)
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*spotigraph.Domain_Chapter)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOChapter2ᚖgoᚗzenitharᚗorgᚋspotigraphᚋpkgᚋprotocolᚋv1ᚋspotigraphᚐDomain_Chapter(ctx, field.Selections, res)
}

func (ec *executionContext) _User_guilds(ctx context.Context, field graphql.CollectedField, obj *spotigraph.Domain_User) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "User",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_User_guilds_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.User().Guilds(rctx, obj, args["paging"].(*PagingRequest))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*GuildPagingConnection)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOGuildPagingConnection2ᚖgoᚗzenitharᚗorgᚋspotigraphᚋcliᚋspotigraphᚋinternalᚋdispatchersᚋgraphqlᚋhandlersᚋgeneratedᚐGuildPagingConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _UserPagingConnection_items(ctx context.Context, field graphql.CollectedField, obj *UserPagingConnection) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "UserPagingConnection",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Items, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*spotigraph.Domain_User)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOUser2ᚕᚖgoᚗzenitharᚗorgᚋspotigraphᚋpkgᚋprotocolᚋv1ᚋspotigraphᚐDomain_User(ctx, field.Selections, res)
}

func (ec *executionContext) _UserPagingConnection_nextToken(ctx context.Context, field graphql.CollectedField, obj *UserPagingConnection) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "UserPagingConnection",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NextToken, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "__Directive",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "__Directive",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "__Directive",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locations, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalN__DirectiveLocation2ᚕstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "__Directive",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "__EnumValue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "__EnumValue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "__EnumValue",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "__EnumValue",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "__Field",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "__Field",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "__Field",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "__Field",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "__Field",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "__Field",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "__InputValue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "__InputValue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "__InputValue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "__InputValue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "__Schema",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Types(), nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "__Schema",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueryType(), nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "__Schema",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MutationType(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "__Schema",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionType(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "__Schema",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Directives(), nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Directive)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind(), nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalN__TypeKind2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_fields_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields(args["includeDeprecated"].(bool)), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Field)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interfaces(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PossibleTypes(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_enumValues_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnumValues(args["includeDeprecated"].(bool)), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.EnumValue)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputFields(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfType(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputChapterCreateInput(ctx context.Context, v interface{}) (spotigraph.ChapterCreateReq, error) {
	var it spotigraph.ChapterCreateReq
	asMap := v.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "name":
			var err error
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputChapterUpdateInput(ctx context.Context, v interface{}) (ChapterUpdateInput, error) {
	var it ChapterUpdateInput
	asMap := v.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "leader":
			var err error
			it.Leader, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputGuildCreateInput(ctx context.Context, v interface{}) (spotigraph.GuildCreateReq, error) {
	var it spotigraph.GuildCreateReq
	asMap := v.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "name":
			var err error
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputGuildUpdateInput(ctx context.Context, v interface{}) (GuildUpdateInput, error) {
	var it GuildUpdateInput
	asMap := v.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPagingRequest(ctx context.Context, v interface{}) (PagingRequest, error) {
	var it PagingRequest
	asMap := v.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "limit":
			var err error
			it.Limit, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "nextToken":
			var err error
			it.NextToken, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSquadCreateInput(ctx context.Context, v interface{}) (spotigraph.SquadCreateReq, error) {
	var it spotigraph.SquadCreateReq
	asMap := v.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "name":
			var err error
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSquadUpdateInput(ctx context.Context, v interface{}) (SquadUpdateInput, error) {
	var it SquadUpdateInput
	asMap := v.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "productOwnerID":
			var err error
			it.ProductOwnerID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTribeCreateInput(ctx context.Context, v interface{}) (spotigraph.TribeCreateReq, error) {
	var it spotigraph.TribeCreateReq
	asMap := v.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "name":
			var err error
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTribeUpdateInput(ctx context.Context, v interface{}) (TribeUpdateInput, error) {
	var it TribeUpdateInput
	asMap := v.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUserCreateInput(ctx context.Context, v interface{}) (spotigraph.UserCreateReq, error) {
	var it spotigraph.UserCreateReq
	asMap := v.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "principal":
			var err error
			it.Principal, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUserUpdateInput(ctx context.Context, v interface{}) (UserUpdateInput, error) {
	var it UserUpdateInput
	asMap := v.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var chapterImplementors = []string{"Chapter"}

func (ec *executionContext) _Chapter(ctx context.Context, sel ast.SelectionSet, obj *spotigraph.Domain_Chapter) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, chapterImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Chapter")
		case "id":
			out.Values[i] = ec._Chapter_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "urn":
			out.Values[i] = ec._Chapter_urn(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "name":
			out.Values[i] = ec._Chapter_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "leader":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Chapter_leader(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "members":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Chapter_members(ctx, field, obj)
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var chapterPagingConnectionImplementors = []string{"ChapterPagingConnection"}

func (ec *executionContext) _ChapterPagingConnection(ctx context.Context, sel ast.SelectionSet, obj *ChapterPagingConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, chapterPagingConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ChapterPagingConnection")
		case "items":
			out.Values[i] = ec._ChapterPagingConnection_items(ctx, field, obj)
		case "nextToken":
			out.Values[i] = ec._ChapterPagingConnection_nextToken(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var errorImplementors = []string{"Error"}

func (ec *executionContext) _Error(ctx context.Context, sel ast.SelectionSet, obj *spotigraph.Error) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, errorImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Error")
		case "code":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Error_code(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "message":
			out.Values[i] = ec._Error_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var guildImplementors = []string{"Guild"}

func (ec *executionContext) _Guild(ctx context.Context, sel ast.SelectionSet, obj *spotigraph.Domain_Guild) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, guildImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Guild")
		case "id":
			out.Values[i] = ec._Guild_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "urn":
			out.Values[i] = ec._Guild_urn(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "name":
			out.Values[i] = ec._Guild_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "members":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Guild_members(ctx, field, obj)
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var guildPagingConnectionImplementors = []string{"GuildPagingConnection"}

func (ec *executionContext) _GuildPagingConnection(ctx context.Context, sel ast.SelectionSet, obj *GuildPagingConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, guildPagingConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GuildPagingConnection")
		case "items":
			out.Values[i] = ec._GuildPagingConnection_items(ctx, field, obj)
		case "nextToken":
			out.Values[i] = ec._GuildPagingConnection_nextToken(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var mutationImplementors = []string{"Mutation"}

func (ec *executionContext) _Mutation(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, mutationImplementors)

	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Mutation",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Mutation")
		case "createUser":
			out.Values[i] = ec._Mutation_createUser(ctx, field)
		case "updateUser":
			out.Values[i] = ec._Mutation_updateUser(ctx, field)
		case "deleteUser":
			out.Values[i] = ec._Mutation_deleteUser(ctx, field)
		case "createSquad":
			out.Values[i] = ec._Mutation_createSquad(ctx, field)
		case "updateSquad":
			out.Values[i] = ec._Mutation_updateSquad(ctx, field)
		case "deleteSquad":
			out.Values[i] = ec._Mutation_deleteSquad(ctx, field)
		case "addSquadMembers":
			out.Values[i] = ec._Mutation_addSquadMembers(ctx, field)
		case "removeSquadMembers":
			out.Values[i] = ec._Mutation_removeSquadMembers(ctx, field)
		case "createTribe":
			out.Values[i] = ec._Mutation_createTribe(ctx, field)
		case "updateTribe":
			out.Values[i] = ec._Mutation_updateTribe(ctx, field)
		case "deleteTribe":
			out.Values[i] = ec._Mutation_deleteTribe(ctx, field)
		case "addTribeSquads":
			out.Values[i] = ec._Mutation_addTribeSquads(ctx, field)
		case "removeTribeSquads":
			out.Values[i] = ec._Mutation_removeTribeSquads(ctx, field)
		case "createChapter":
			out.Values[i] = ec._Mutation_createChapter(ctx, field)
		case "updateChapter":
			out.Values[i] = ec._Mutation_updateChapter(ctx, field)
		case "deleteChapter":
			out.Values[i] = ec._Mutation_deleteChapter(ctx, field)
		case "addChapterMembers":
			out.Values[i] = ec._Mutation_addChapterMembers(ctx, field)
		case "removeChapterMembers":
			out.Values[i] = ec._Mutation_removeChapterMembers(ctx, field)
		case "createGuild":
			out.Values[i] = ec._Mutation_createGuild(ctx, field)
		case "updateGuild":
			out.Values[i] = ec._Mutation_updateGuild(ctx, field)
		case "deleteGuild":
			out.Values[i] = ec._Mutation_deleteGuild(ctx, field)
		case "addGuildMembers":
			out.Values[i] = ec._Mutation_addGuildMembers(ctx, field)
		case "removeGuildMembers":
			out.Values[i] = ec._Mutation_removeGuildMembers(ctx, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var queryImplementors = []string{"Query"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, queryImplementors)

	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Query",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "me":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_me(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "searchForUsers":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_searchForUsers(ctx, field)
				return res
			})
		case "getUser":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getUser(ctx, field)
				return res
			})
		case "getUsers":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getUsers(ctx, field)
				return res
			})
		case "searchForSquads":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_searchForSquads(ctx, field)
				return res
			})
		case "getSquad":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getSquad(ctx, field)
				return res
			})
		case "getSquads":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getSquads(ctx, field)
				return res
			})
		case "searchForTribes":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_searchForTribes(ctx, field)
				return res
			})
		case "getTribe":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getTribe(ctx, field)
				return res
			})
		case "getTribes":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getTribes(ctx, field)
				return res
			})
		case "searchForChapters":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_searchForChapters(ctx, field)
				return res
			})
		case "getChapter":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getChapter(ctx, field)
				return res
			})
		case "getChapters":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getChapters(ctx, field)
				return res
			})
		case "searchForGuilds":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_searchForGuilds(ctx, field)
				return res
			})
		case "getGuild":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getGuild(ctx, field)
				return res
			})
		case "getGuilds":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getGuilds(ctx, field)
				return res
			})
		case "__type":
			out.Values[i] = ec._Query___type(ctx, field)
		case "__schema":
			out.Values[i] = ec._Query___schema(ctx, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var squadImplementors = []string{"Squad"}

func (ec *executionContext) _Squad(ctx context.Context, sel ast.SelectionSet, obj *spotigraph.Domain_Squad) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, squadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Squad")
		case "id":
			out.Values[i] = ec._Squad_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "urn":
			out.Values[i] = ec._Squad_urn(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "name":
			out.Values[i] = ec._Squad_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "productOwner":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Squad_productOwner(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "members":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Squad_members(ctx, field, obj)
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var squadPagingConnectionImplementors = []string{"SquadPagingConnection"}

func (ec *executionContext) _SquadPagingConnection(ctx context.Context, sel ast.SelectionSet, obj *SquadPagingConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, squadPagingConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SquadPagingConnection")
		case "items":
			out.Values[i] = ec._SquadPagingConnection_items(ctx, field, obj)
		case "nextToken":
			out.Values[i] = ec._SquadPagingConnection_nextToken(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var tribeImplementors = []string{"Tribe"}

func (ec *executionContext) _Tribe(ctx context.Context, sel ast.SelectionSet, obj *spotigraph.Domain_Tribe) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, tribeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Tribe")
		case "id":
			out.Values[i] = ec._Tribe_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "urn":
			out.Values[i] = ec._Tribe_urn(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "name":
			out.Values[i] = ec._Tribe_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "squads":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Tribe_squads(ctx, field, obj)
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var tribePagingConnectionImplementors = []string{"TribePagingConnection"}

func (ec *executionContext) _TribePagingConnection(ctx context.Context, sel ast.SelectionSet, obj *TribePagingConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, tribePagingConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TribePagingConnection")
		case "items":
			out.Values[i] = ec._TribePagingConnection_items(ctx, field, obj)
		case "nextToken":
			out.Values[i] = ec._TribePagingConnection_nextToken(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var userImplementors = []string{"User"}

func (ec *executionContext) _User(ctx context.Context, sel ast.SelectionSet, obj *spotigraph.Domain_User) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, userImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("User")
		case "id":
			out.Values[i] = ec._User_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "urn":
			out.Values[i] = ec._User_urn(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "principal":
			out.Values[i] = ec._User_principal(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "squads":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._User_squads(ctx, field, obj)
				return res
			})
		case "chapter":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._User_chapter(ctx, field, obj)
				return res
			})
		case "guilds":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._User_guilds(ctx, field, obj)
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var userPagingConnectionImplementors = []string{"UserPagingConnection"}

func (ec *executionContext) _UserPagingConnection(ctx context.Context, sel ast.SelectionSet, obj *UserPagingConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, userPagingConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UserPagingConnection")
		case "items":
			out.Values[i] = ec._UserPagingConnection_items(ctx, field, obj)
		case "nextToken":
			out.Values[i] = ec._UserPagingConnection_nextToken(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __DirectiveImplementors = []string{"__Directive"}

func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, __DirectiveImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":
			out.Values[i] = ec.___Directive_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___Directive_description(ctx, field, obj)
		case "locations":
			out.Values[i] = ec.___Directive_locations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "args":
			out.Values[i] = ec.___Directive_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __EnumValueImplementors = []string{"__EnumValue"}

func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, __EnumValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":
			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __FieldImplementors = []string{"__Field"}

func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, __FieldImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":
			out.Values[i] = ec.___Field_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___Field_description(ctx, field, obj)
		case "args":
			out.Values[i] = ec.___Field_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":
			out.Values[i] = ec.___Field_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isDeprecated":
			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __InputValueImplementors = []string{"__InputValue"}

func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, __InputValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":
			out.Values[i] = ec.___InputValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___InputValue_description(ctx, field, obj)
		case "type":
			out.Values[i] = ec.___InputValue_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "defaultValue":
			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __SchemaImplementors = []string{"__Schema"}

func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, __SchemaImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "types":
			out.Values[i] = ec.___Schema_types(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "queryType":
			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "mutationType":
			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)
		case "subscriptionType":
			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)
		case "directives":
			out.Values[i] = ec.___Schema_directives(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __TypeImplementors = []string{"__Type"}

func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, __TypeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":
			out.Values[i] = ec.___Type_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec.___Type_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Type_description(ctx, field, obj)
		case "fields":
			out.Values[i] = ec.___Type_fields(ctx, field, obj)
		case "interfaces":
			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)
		case "possibleTypes":
			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)
		case "enumValues":
			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)
		case "inputFields":
			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)
		case "ofType":
			out.Values[i] = ec.___Type_ofType(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	return graphql.UnmarshalBoolean(v)
}

func (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	if res == graphql.Null {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNID2string(ctx context.Context, v interface{}) (string, error) {
	return graphql.UnmarshalID(v)
}

func (ec *executionContext) marshalNID2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalID(v)
	if res == graphql.Null {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNInt2int(ctx context.Context, v interface{}) (int, error) {
	return graphql.UnmarshalInt(v)
}

func (ec *executionContext) marshalNInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	res := graphql.MarshalInt(v)
	if res == graphql.Null {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNString2string(ctx context.Context, v interface{}) (string, error) {
	return graphql.UnmarshalString(v)
}

func (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNUser2goᚗzenitharᚗorgᚋspotigraphᚋpkgᚋprotocolᚋv1ᚋspotigraphᚐDomain_User(ctx context.Context, sel ast.SelectionSet, v spotigraph.Domain_User) graphql.Marshaler {
	return ec._User(ctx, sel, &v)
}

func (ec *executionContext) marshalNUser2ᚖgoᚗzenitharᚗorgᚋspotigraphᚋpkgᚋprotocolᚋv1ᚋspotigraphᚐDomain_User(ctx context.Context, sel ast.SelectionSet, v *spotigraph.Domain_User) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._User(ctx, sel, v)
}

func (ec *executionContext) marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler {
	return ec.___Directive(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v interface{}) (string, error) {
	return graphql.UnmarshalString(v)
}

func (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstring(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		res[i], err = ec.unmarshalN__DirectiveLocation2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN__DirectiveLocation2ᚕstring(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__DirectiveLocation2string(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler {
	return ec.___EnumValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler {
	return ec.___Field(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler {
	return ec.___InputValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v interface{}) (string, error) {
	return graphql.UnmarshalString(v)
}

func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	return graphql.UnmarshalBoolean(v)
}

func (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	return graphql.MarshalBoolean(v)
}

func (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v interface{}) (*bool, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOBoolean2bool(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.marshalOBoolean2bool(ctx, sel, *v)
}

func (ec *executionContext) marshalOChapter2goᚗzenitharᚗorgᚋspotigraphᚋpkgᚋprotocolᚋv1ᚋspotigraphᚐDomain_Chapter(ctx context.Context, sel ast.SelectionSet, v spotigraph.Domain_Chapter) graphql.Marshaler {
	return ec._Chapter(ctx, sel, &v)
}

func (ec *executionContext) marshalOChapter2ᚕᚖgoᚗzenitharᚗorgᚋspotigraphᚋpkgᚋprotocolᚋv1ᚋspotigraphᚐDomain_Chapter(ctx context.Context, sel ast.SelectionSet, v []*spotigraph.Domain_Chapter) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOChapter2ᚖgoᚗzenitharᚗorgᚋspotigraphᚋpkgᚋprotocolᚋv1ᚋspotigraphᚐDomain_Chapter(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOChapter2ᚖgoᚗzenitharᚗorgᚋspotigraphᚋpkgᚋprotocolᚋv1ᚋspotigraphᚐDomain_Chapter(ctx context.Context, sel ast.SelectionSet, v *spotigraph.Domain_Chapter) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Chapter(ctx, sel, v)
}

func (ec *executionContext) unmarshalOChapterCreateInput2goᚗzenitharᚗorgᚋspotigraphᚋpkgᚋprotocolᚋv1ᚋspotigraphᚐChapterCreateReq(ctx context.Context, v interface{}) (spotigraph.ChapterCreateReq, error) {
	return ec.unmarshalInputChapterCreateInput(ctx, v)
}

func (ec *executionContext) unmarshalOChapterCreateInput2ᚖgoᚗzenitharᚗorgᚋspotigraphᚋpkgᚋprotocolᚋv1ᚋspotigraphᚐChapterCreateReq(ctx context.Context, v interface{}) (*spotigraph.ChapterCreateReq, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOChapterCreateInput2goᚗzenitharᚗorgᚋspotigraphᚋpkgᚋprotocolᚋv1ᚋspotigraphᚐChapterCreateReq(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOChapterPagingConnection2goᚗzenitharᚗorgᚋspotigraphᚋcliᚋspotigraphᚋinternalᚋdispatchersᚋgraphqlᚋhandlersᚋgeneratedᚐChapterPagingConnection(ctx context.Context, sel ast.SelectionSet, v ChapterPagingConnection) graphql.Marshaler {
	return ec._ChapterPagingConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalOChapterPagingConnection2ᚖgoᚗzenitharᚗorgᚋspotigraphᚋcliᚋspotigraphᚋinternalᚋdispatchersᚋgraphqlᚋhandlersᚋgeneratedᚐChapterPagingConnection(ctx context.Context, sel ast.SelectionSet, v *ChapterPagingConnection) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ChapterPagingConnection(ctx, sel, v)
}

func (ec *executionContext) unmarshalOChapterUpdateInput2goᚗzenitharᚗorgᚋspotigraphᚋcliᚋspotigraphᚋinternalᚋdispatchersᚋgraphqlᚋhandlersᚋgeneratedᚐChapterUpdateInput(ctx context.Context, v interface{}) (ChapterUpdateInput, error) {
	return ec.unmarshalInputChapterUpdateInput(ctx, v)
}

func (ec *executionContext) unmarshalOChapterUpdateInput2ᚖgoᚗzenitharᚗorgᚋspotigraphᚋcliᚋspotigraphᚋinternalᚋdispatchersᚋgraphqlᚋhandlersᚋgeneratedᚐChapterUpdateInput(ctx context.Context, v interface{}) (*ChapterUpdateInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOChapterUpdateInput2goᚗzenitharᚗorgᚋspotigraphᚋcliᚋspotigraphᚋinternalᚋdispatchersᚋgraphqlᚋhandlersᚋgeneratedᚐChapterUpdateInput(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOGuild2goᚗzenitharᚗorgᚋspotigraphᚋpkgᚋprotocolᚋv1ᚋspotigraphᚐDomain_Guild(ctx context.Context, sel ast.SelectionSet, v spotigraph.Domain_Guild) graphql.Marshaler {
	return ec._Guild(ctx, sel, &v)
}

func (ec *executionContext) marshalOGuild2ᚕᚖgoᚗzenitharᚗorgᚋspotigraphᚋpkgᚋprotocolᚋv1ᚋspotigraphᚐDomain_Guild(ctx context.Context, sel ast.SelectionSet, v []*spotigraph.Domain_Guild) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOGuild2ᚖgoᚗzenitharᚗorgᚋspotigraphᚋpkgᚋprotocolᚋv1ᚋspotigraphᚐDomain_Guild(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOGuild2ᚖgoᚗzenitharᚗorgᚋspotigraphᚋpkgᚋprotocolᚋv1ᚋspotigraphᚐDomain_Guild(ctx context.Context, sel ast.SelectionSet, v *spotigraph.Domain_Guild) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Guild(ctx, sel, v)
}

func (ec *executionContext) unmarshalOGuildCreateInput2goᚗzenitharᚗorgᚋspotigraphᚋpkgᚋprotocolᚋv1ᚋspotigraphᚐGuildCreateReq(ctx context.Context, v interface{}) (spotigraph.GuildCreateReq, error) {
	return ec.unmarshalInputGuildCreateInput(ctx, v)
}

func (ec *executionContext) unmarshalOGuildCreateInput2ᚖgoᚗzenitharᚗorgᚋspotigraphᚋpkgᚋprotocolᚋv1ᚋspotigraphᚐGuildCreateReq(ctx context.Context, v interface{}) (*spotigraph.GuildCreateReq, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOGuildCreateInput2goᚗzenitharᚗorgᚋspotigraphᚋpkgᚋprotocolᚋv1ᚋspotigraphᚐGuildCreateReq(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOGuildPagingConnection2goᚗzenitharᚗorgᚋspotigraphᚋcliᚋspotigraphᚋinternalᚋdispatchersᚋgraphqlᚋhandlersᚋgeneratedᚐGuildPagingConnection(ctx context.Context, sel ast.SelectionSet, v GuildPagingConnection) graphql.Marshaler {
	return ec._GuildPagingConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalOGuildPagingConnection2ᚖgoᚗzenitharᚗorgᚋspotigraphᚋcliᚋspotigraphᚋinternalᚋdispatchersᚋgraphqlᚋhandlersᚋgeneratedᚐGuildPagingConnection(ctx context.Context, sel ast.SelectionSet, v *GuildPagingConnection) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._GuildPagingConnection(ctx, sel, v)
}

func (ec *executionContext) unmarshalOGuildUpdateInput2goᚗzenitharᚗorgᚋspotigraphᚋcliᚋspotigraphᚋinternalᚋdispatchersᚋgraphqlᚋhandlersᚋgeneratedᚐGuildUpdateInput(ctx context.Context, v interface{}) (GuildUpdateInput, error) {
	return ec.unmarshalInputGuildUpdateInput(ctx, v)
}

func (ec *executionContext) unmarshalOGuildUpdateInput2ᚖgoᚗzenitharᚗorgᚋspotigraphᚋcliᚋspotigraphᚋinternalᚋdispatchersᚋgraphqlᚋhandlersᚋgeneratedᚐGuildUpdateInput(ctx context.Context, v interface{}) (*GuildUpdateInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOGuildUpdateInput2goᚗzenitharᚗorgᚋspotigraphᚋcliᚋspotigraphᚋinternalᚋdispatchersᚋgraphqlᚋhandlersᚋgeneratedᚐGuildUpdateInput(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalOID2string(ctx context.Context, v interface{}) (string, error) {
	return graphql.UnmarshalID(v)
}

func (ec *executionContext) marshalOID2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	return graphql.MarshalID(v)
}

func (ec *executionContext) unmarshalOID2ᚕstring(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		res[i], err = ec.unmarshalNID2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOID2ᚕstring(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNID2string(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOID2ᚕᚖstring(ctx context.Context, v interface{}) ([]*string, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*string, len(vSlice))
	for i := range vSlice {
		res[i], err = ec.unmarshalOID2ᚖstring(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOID2ᚕᚖstring(ctx context.Context, sel ast.SelectionSet, v []*string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalOID2ᚖstring(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOID2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOID2string(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOID2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.marshalOID2string(ctx, sel, *v)
}

func (ec *executionContext) unmarshalOInt2int(ctx context.Context, v interface{}) (int, error) {
	return graphql.UnmarshalInt(v)
}

func (ec *executionContext) marshalOInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	return graphql.MarshalInt(v)
}

func (ec *executionContext) unmarshalOInt2ᚖint(ctx context.Context, v interface{}) (*int, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOInt2int(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOInt2ᚖint(ctx context.Context, sel ast.SelectionSet, v *int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.marshalOInt2int(ctx, sel, *v)
}

func (ec *executionContext) unmarshalOPagingRequest2goᚗzenitharᚗorgᚋspotigraphᚋcliᚋspotigraphᚋinternalᚋdispatchersᚋgraphqlᚋhandlersᚋgeneratedᚐPagingRequest(ctx context.Context, v interface{}) (PagingRequest, error) {
	return ec.unmarshalInputPagingRequest(ctx, v)
}

func (ec *executionContext) unmarshalOPagingRequest2ᚖgoᚗzenitharᚗorgᚋspotigraphᚋcliᚋspotigraphᚋinternalᚋdispatchersᚋgraphqlᚋhandlersᚋgeneratedᚐPagingRequest(ctx context.Context, v interface{}) (*PagingRequest, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOPagingRequest2goᚗzenitharᚗorgᚋspotigraphᚋcliᚋspotigraphᚋinternalᚋdispatchersᚋgraphqlᚋhandlersᚋgeneratedᚐPagingRequest(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOSquad2goᚗzenitharᚗorgᚋspotigraphᚋpkgᚋprotocolᚋv1ᚋspotigraphᚐDomain_Squad(ctx context.Context, sel ast.SelectionSet, v spotigraph.Domain_Squad) graphql.Marshaler {
	return ec._Squad(ctx, sel, &v)
}

func (ec *executionContext) marshalOSquad2ᚕᚖgoᚗzenitharᚗorgᚋspotigraphᚋpkgᚋprotocolᚋv1ᚋspotigraphᚐDomain_Squad(ctx context.Context, sel ast.SelectionSet, v []*spotigraph.Domain_Squad) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOSquad2ᚖgoᚗzenitharᚗorgᚋspotigraphᚋpkgᚋprotocolᚋv1ᚋspotigraphᚐDomain_Squad(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOSquad2ᚖgoᚗzenitharᚗorgᚋspotigraphᚋpkgᚋprotocolᚋv1ᚋspotigraphᚐDomain_Squad(ctx context.Context, sel ast.SelectionSet, v *spotigraph.Domain_Squad) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Squad(ctx, sel, v)
}

func (ec *executionContext) unmarshalOSquadCreateInput2goᚗzenitharᚗorgᚋspotigraphᚋpkgᚋprotocolᚋv1ᚋspotigraphᚐSquadCreateReq(ctx context.Context, v interface{}) (spotigraph.SquadCreateReq, error) {
	return ec.unmarshalInputSquadCreateInput(ctx, v)
}

func (ec *executionContext) unmarshalOSquadCreateInput2ᚖgoᚗzenitharᚗorgᚋspotigraphᚋpkgᚋprotocolᚋv1ᚋspotigraphᚐSquadCreateReq(ctx context.Context, v interface{}) (*spotigraph.SquadCreateReq, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOSquadCreateInput2goᚗzenitharᚗorgᚋspotigraphᚋpkgᚋprotocolᚋv1ᚋspotigraphᚐSquadCreateReq(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOSquadPagingConnection2goᚗzenitharᚗorgᚋspotigraphᚋcliᚋspotigraphᚋinternalᚋdispatchersᚋgraphqlᚋhandlersᚋgeneratedᚐSquadPagingConnection(ctx context.Context, sel ast.SelectionSet, v SquadPagingConnection) graphql.Marshaler {
	return ec._SquadPagingConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalOSquadPagingConnection2ᚖgoᚗzenitharᚗorgᚋspotigraphᚋcliᚋspotigraphᚋinternalᚋdispatchersᚋgraphqlᚋhandlersᚋgeneratedᚐSquadPagingConnection(ctx context.Context, sel ast.SelectionSet, v *SquadPagingConnection) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SquadPagingConnection(ctx, sel, v)
}

func (ec *executionContext) unmarshalOSquadUpdateInput2goᚗzenitharᚗorgᚋspotigraphᚋcliᚋspotigraphᚋinternalᚋdispatchersᚋgraphqlᚋhandlersᚋgeneratedᚐSquadUpdateInput(ctx context.Context, v interface{}) (SquadUpdateInput, error) {
	return ec.unmarshalInputSquadUpdateInput(ctx, v)
}

func (ec *executionContext) unmarshalOSquadUpdateInput2ᚖgoᚗzenitharᚗorgᚋspotigraphᚋcliᚋspotigraphᚋinternalᚋdispatchersᚋgraphqlᚋhandlersᚋgeneratedᚐSquadUpdateInput(ctx context.Context, v interface{}) (*SquadUpdateInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOSquadUpdateInput2goᚗzenitharᚗorgᚋspotigraphᚋcliᚋspotigraphᚋinternalᚋdispatchersᚋgraphqlᚋhandlersᚋgeneratedᚐSquadUpdateInput(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalOString2string(ctx context.Context, v interface{}) (string, error) {
	return graphql.UnmarshalString(v)
}

func (ec *executionContext) marshalOString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	return graphql.MarshalString(v)
}

func (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOString2string(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.marshalOString2string(ctx, sel, *v)
}

func (ec *executionContext) marshalOTribe2goᚗzenitharᚗorgᚋspotigraphᚋpkgᚋprotocolᚋv1ᚋspotigraphᚐDomain_Tribe(ctx context.Context, sel ast.SelectionSet, v spotigraph.Domain_Tribe) graphql.Marshaler {
	return ec._Tribe(ctx, sel, &v)
}

func (ec *executionContext) marshalOTribe2ᚕᚖgoᚗzenitharᚗorgᚋspotigraphᚋpkgᚋprotocolᚋv1ᚋspotigraphᚐDomain_Tribe(ctx context.Context, sel ast.SelectionSet, v []*spotigraph.Domain_Tribe) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOTribe2ᚖgoᚗzenitharᚗorgᚋspotigraphᚋpkgᚋprotocolᚋv1ᚋspotigraphᚐDomain_Tribe(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOTribe2ᚖgoᚗzenitharᚗorgᚋspotigraphᚋpkgᚋprotocolᚋv1ᚋspotigraphᚐDomain_Tribe(ctx context.Context, sel ast.SelectionSet, v *spotigraph.Domain_Tribe) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Tribe(ctx, sel, v)
}

func (ec *executionContext) unmarshalOTribeCreateInput2goᚗzenitharᚗorgᚋspotigraphᚋpkgᚋprotocolᚋv1ᚋspotigraphᚐTribeCreateReq(ctx context.Context, v interface{}) (spotigraph.TribeCreateReq, error) {
	return ec.unmarshalInputTribeCreateInput(ctx, v)
}

func (ec *executionContext) unmarshalOTribeCreateInput2ᚖgoᚗzenitharᚗorgᚋspotigraphᚋpkgᚋprotocolᚋv1ᚋspotigraphᚐTribeCreateReq(ctx context.Context, v interface{}) (*spotigraph.TribeCreateReq, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOTribeCreateInput2goᚗzenitharᚗorgᚋspotigraphᚋpkgᚋprotocolᚋv1ᚋspotigraphᚐTribeCreateReq(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOTribePagingConnection2goᚗzenitharᚗorgᚋspotigraphᚋcliᚋspotigraphᚋinternalᚋdispatchersᚋgraphqlᚋhandlersᚋgeneratedᚐTribePagingConnection(ctx context.Context, sel ast.SelectionSet, v TribePagingConnection) graphql.Marshaler {
	return ec._TribePagingConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalOTribePagingConnection2ᚖgoᚗzenitharᚗorgᚋspotigraphᚋcliᚋspotigraphᚋinternalᚋdispatchersᚋgraphqlᚋhandlersᚋgeneratedᚐTribePagingConnection(ctx context.Context, sel ast.SelectionSet, v *TribePagingConnection) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._TribePagingConnection(ctx, sel, v)
}

func (ec *executionContext) unmarshalOTribeUpdateInput2goᚗzenitharᚗorgᚋspotigraphᚋcliᚋspotigraphᚋinternalᚋdispatchersᚋgraphqlᚋhandlersᚋgeneratedᚐTribeUpdateInput(ctx context.Context, v interface{}) (TribeUpdateInput, error) {
	return ec.unmarshalInputTribeUpdateInput(ctx, v)
}

func (ec *executionContext) unmarshalOTribeUpdateInput2ᚖgoᚗzenitharᚗorgᚋspotigraphᚋcliᚋspotigraphᚋinternalᚋdispatchersᚋgraphqlᚋhandlersᚋgeneratedᚐTribeUpdateInput(ctx context.Context, v interface{}) (*TribeUpdateInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOTribeUpdateInput2goᚗzenitharᚗorgᚋspotigraphᚋcliᚋspotigraphᚋinternalᚋdispatchersᚋgraphqlᚋhandlersᚋgeneratedᚐTribeUpdateInput(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOUser2goᚗzenitharᚗorgᚋspotigraphᚋpkgᚋprotocolᚋv1ᚋspotigraphᚐDomain_User(ctx context.Context, sel ast.SelectionSet, v spotigraph.Domain_User) graphql.Marshaler {
	return ec._User(ctx, sel, &v)
}

func (ec *executionContext) marshalOUser2ᚕᚖgoᚗzenitharᚗorgᚋspotigraphᚋpkgᚋprotocolᚋv1ᚋspotigraphᚐDomain_User(ctx context.Context, sel ast.SelectionSet, v []*spotigraph.Domain_User) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOUser2ᚖgoᚗzenitharᚗorgᚋspotigraphᚋpkgᚋprotocolᚋv1ᚋspotigraphᚐDomain_User(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOUser2ᚖgoᚗzenitharᚗorgᚋspotigraphᚋpkgᚋprotocolᚋv1ᚋspotigraphᚐDomain_User(ctx context.Context, sel ast.SelectionSet, v *spotigraph.Domain_User) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._User(ctx, sel, v)
}

func (ec *executionContext) unmarshalOUserCreateInput2goᚗzenitharᚗorgᚋspotigraphᚋpkgᚋprotocolᚋv1ᚋspotigraphᚐUserCreateReq(ctx context.Context, v interface{}) (spotigraph.UserCreateReq, error) {
	return ec.unmarshalInputUserCreateInput(ctx, v)
}

func (ec *executionContext) unmarshalOUserCreateInput2ᚖgoᚗzenitharᚗorgᚋspotigraphᚋpkgᚋprotocolᚋv1ᚋspotigraphᚐUserCreateReq(ctx context.Context, v interface{}) (*spotigraph.UserCreateReq, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOUserCreateInput2goᚗzenitharᚗorgᚋspotigraphᚋpkgᚋprotocolᚋv1ᚋspotigraphᚐUserCreateReq(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOUserPagingConnection2goᚗzenitharᚗorgᚋspotigraphᚋcliᚋspotigraphᚋinternalᚋdispatchersᚋgraphqlᚋhandlersᚋgeneratedᚐUserPagingConnection(ctx context.Context, sel ast.SelectionSet, v UserPagingConnection) graphql.Marshaler {
	return ec._UserPagingConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalOUserPagingConnection2ᚖgoᚗzenitharᚗorgᚋspotigraphᚋcliᚋspotigraphᚋinternalᚋdispatchersᚋgraphqlᚋhandlersᚋgeneratedᚐUserPagingConnection(ctx context.Context, sel ast.SelectionSet, v *UserPagingConnection) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._UserPagingConnection(ctx, sel, v)
}

func (ec *executionContext) unmarshalOUserUpdateInput2goᚗzenitharᚗorgᚋspotigraphᚋcliᚋspotigraphᚋinternalᚋdispatchersᚋgraphqlᚋhandlersᚋgeneratedᚐUserUpdateInput(ctx context.Context, v interface{}) (UserUpdateInput, error) {
	return ec.unmarshalInputUserUpdateInput(ctx, v)
}

func (ec *executionContext) unmarshalOUserUpdateInput2ᚖgoᚗzenitharᚗorgᚋspotigraphᚋcliᚋspotigraphᚋinternalᚋdispatchersᚋgraphqlᚋhandlersᚋgeneratedᚐUserUpdateInput(ctx context.Context, v interface{}) (*UserUpdateInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOUserUpdateInput2goᚗzenitharᚗorgᚋspotigraphᚋcliᚋspotigraphᚋinternalᚋdispatchersᚋgraphqlᚋhandlersᚋgeneratedᚐUserUpdateInput(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Schema2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v introspection.Schema) graphql.Marshaler {
	return ec.___Schema(ctx, sel, &v)
}

func (ec *executionContext) marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, sel, v)
}

func (ec *executionContext) marshalO__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
