# Chapter describe group of user working together
type Chapter {
  # Internal identifier
  id:   ID!
  # Node identifier
  urn: String!
  # Chapter name
  name: String!

  # Chapter leader of this chapter
  leader: User!
  # User collection member of this chapter
  members(paging: PagingRequest): UserPagingConnection
}

# --------------------------------------------------------

# Query extension
extend type Query {
  # List all chapters
  searchForChapters(paging: PagingRequest): ChapterPagingConnection
  # Retrieve a chapter by id
  getChapter(id: ID!): Chapter
  # Retrieve multiple chapters by id
  getChapters(ids: [ID!]): [Chapter]
}

# --------------------------------------------------------

# PagingConnection for chapter pagination
type ChapterPagingConnection {
  items: [Chapter]
  nextToken: String
}

# Input object for chapter creation
input ChapterCreateInput {
  # Chapter name
  name: String!
}

# Input object for chapter update
input ChapterUpdateInput {
  # User identifier
  id: ID!
  # Name
  name: String
  # Chapter leader
  leader: ID
}

# Mutation extension
extend type Mutation {
  # Create a new chapter
  createChapter(input: ChapterCreateInput): Chapter
  # Update the chapter informations
  updateChapter(input: ChapterUpdateInput): Chapter
  # Delete a chapter
  deleteChapter(id: ID): Chapter
  # Assign users to chapter
  addChapterMembers(id: ID!, users: [ID]): Chapter
  # Remove users from chapter
  removeChapterMembers(id: ID!, users: [ID]): Chapter
}
