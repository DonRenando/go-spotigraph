# Squad describe group of user working together
type Squad {
  # Internal identifier
  id:   ID!
  # Node identifier
  urn: String!
  # Squad name
  name: String!

  # Product owner of this squad
  productOwner: User!
  # User collection member of this squad
  members(paging: PagingRequest): UserPagingConnection
}

# --------------------------------------------------------

# Query extension
extend type Query {
  # List all squads
  searchForSquads(paging: PagingRequest): SquadPagingConnection
  # Retrieve a squad by id
  getSquad(id: ID!): Squad
  # Retrieve multiple squads by id
  getSquads(ids: [ID!]): [Squad]
}

# --------------------------------------------------------

# PagingConnection for squad pagination
type SquadPagingConnection {
  items: [Squad]
  nextToken: String
}

# Input object for squad creation
input SquadCreateInput {
  # Squad name
  name: String!
}

# Input object for squad update
input SquadUpdateInput {
  # User identifier
  id: ID!
  # Name
  name: String
  # Product Owner
  productOwnerID: ID
}

# Mutation extension
extend type Mutation {
  # Create a new squad
  createSquad(input: SquadCreateInput): Squad
  # Update the squad informations
  updateSquad(input: SquadUpdateInput): Squad
  # Delete a squad
  deleteSquad(id: ID): Squad
  # Assign users to squad
  addSquadMembers(id: ID!, users: [ID]): Squad
  # Remove users from squad
  removeSquadMembers(id: ID!, users: [ID]): Squad
}
