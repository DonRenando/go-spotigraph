# User describe identity known by the service
type User {
  # Internal identifier
  id:   ID!
  # Node identifier
  urn: String!
  # Principal hash
  principal: String! # required

  # User squads
  squads(paging: PagingRequest): SquadPagingConnection
  # User chapter
  chapter: Chapter
  # User guilds
  guilds(paging: PagingRequest): GuildPagingConnection
}

# --------------------------------------------------------

# Query extension
type Query {
  # Authenticated user
  me: User!
  # Search for users
  searchForUsers(paging: PagingRequest): UserPagingConnection
  # Retrieve an user by id
  getUser(id: ID!): User
  # Retrieve multiple users by id
  getUsers(ids: [ID!]): [User]
}

# --------------------------------------------------------

# PagingConnection for user pagination
type UserPagingConnection {
  items: [User]
  nextToken: String
}

# Input object for user creation
input UserCreateInput {
  # User identity principal
  principal: String!
}

# Input object for user update
input UserUpdateInput {
  # User identifier
  id: ID!

  # TODO: Add updatable attributes
}

# Mutation extension
type Mutation {
  # Create a new user identity
  createUser(input: UserCreateInput): User
  # Update the user identity informations
  updateUser(input: UserUpdateInput): User
  # Delete an user identity
  deleteUser(id: ID): User
}
