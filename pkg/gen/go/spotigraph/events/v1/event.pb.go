// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: spotigraph/events/v1/event.proto

package eventsv1

import (
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// EventType enumerates all event type values.
type EventType int32

const (
	// Default value when no enumeration is specified.
	EventType_EVENT_TYPE_INVALID EventType = 0
	// Explicitly Unknown object value.
	EventType_EVENT_TYPE_UNKNOWN                EventType = 1
	EventType_EVENT_TYPE_CHAPTER_CREATED        EventType = 2
	EventType_EVENT_TYPE_CHAPTER_DELETED        EventType = 3
	EventType_EVENT_TYPE_CHAPTER_LABEL_UPDATED  EventType = 4
	EventType_EVENT_TYPE_CHAPTER_LEADER_UPDATED EventType = 5
)

var EventType_name = map[int32]string{
	0: "EVENT_TYPE_INVALID",
	1: "EVENT_TYPE_UNKNOWN",
	2: "EVENT_TYPE_CHAPTER_CREATED",
	3: "EVENT_TYPE_CHAPTER_DELETED",
	4: "EVENT_TYPE_CHAPTER_LABEL_UPDATED",
	5: "EVENT_TYPE_CHAPTER_LEADER_UPDATED",
}

var EventType_value = map[string]int32{
	"EVENT_TYPE_INVALID":                0,
	"EVENT_TYPE_UNKNOWN":                1,
	"EVENT_TYPE_CHAPTER_CREATED":        2,
	"EVENT_TYPE_CHAPTER_DELETED":        3,
	"EVENT_TYPE_CHAPTER_LABEL_UPDATED":  4,
	"EVENT_TYPE_CHAPTER_LEADER_UPDATED": 5,
}

func (x EventType) String() string {
	return proto.EnumName(EventType_name, int32(x))
}

func (EventType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ae32168c2ebb17ec, []int{0}
}

// Event describes event contract.
type Event struct {
	EventType     EventType  `protobuf:"varint,1,opt,name=event_type,json=eventType,proto3,enum=spotigraph.events.v1.EventType" json:"event_type,omitempty"`
	EventId       string     `protobuf:"bytes,2,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	AggregateType string     `protobuf:"bytes,3,opt,name=aggregate_type,json=aggregateType,proto3" json:"aggregate_type,omitempty"`
	AggregateId   string     `protobuf:"bytes,4,opt,name=aggregate_id,json=aggregateId,proto3" json:"aggregate_id,omitempty"`
	Meta          *types.Any `protobuf:"bytes,5,opt,name=meta,proto3" json:"meta,omitempty"`
	// Types that are valid to be assigned to Payload:
	//	*Event_ChapterCreated
	//	*Event_ChapterDeleted
	//	*Event_ChapterLabelUpdated
	//	*Event_ChapterLeaderUpdated
	Payload              isEvent_Payload `protobuf_oneof:"payload"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *Event) Reset()         { *m = Event{} }
func (m *Event) String() string { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()    {}
func (*Event) Descriptor() ([]byte, []int) {
	return fileDescriptor_ae32168c2ebb17ec, []int{0}
}

func (m *Event) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *Event) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Event.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *Event) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Event.Merge(m, src)
}

func (m *Event) XXX_Size() int {
	return m.Size()
}

func (m *Event) XXX_DiscardUnknown() {
	xxx_messageInfo_Event.DiscardUnknown(m)
}

var xxx_messageInfo_Event proto.InternalMessageInfo

type isEvent_Payload interface {
	isEvent_Payload()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Event_ChapterCreated struct {
	ChapterCreated *ChapterCreated `protobuf:"bytes,10,opt,name=chapter_created,json=chapterCreated,proto3,oneof"`
}

type Event_ChapterDeleted struct {
	ChapterDeleted *ChapterDeleted `protobuf:"bytes,11,opt,name=chapter_deleted,json=chapterDeleted,proto3,oneof"`
}

type Event_ChapterLabelUpdated struct {
	ChapterLabelUpdated *ChapterLabelUpdated `protobuf:"bytes,12,opt,name=chapter_label_updated,json=chapterLabelUpdated,proto3,oneof"`
}

type Event_ChapterLeaderUpdated struct {
	ChapterLeaderUpdated *ChapterLeaderUpdated `protobuf:"bytes,13,opt,name=chapter_leader_updated,json=chapterLeaderUpdated,proto3,oneof"`
}

func (*Event_ChapterCreated) isEvent_Payload()       {}
func (*Event_ChapterDeleted) isEvent_Payload()       {}
func (*Event_ChapterLabelUpdated) isEvent_Payload()  {}
func (*Event_ChapterLeaderUpdated) isEvent_Payload() {}

func (m *Event) GetPayload() isEvent_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *Event) GetEventType() EventType {
	if m != nil {
		return m.EventType
	}
	return EventType_EVENT_TYPE_INVALID
}

func (m *Event) GetEventId() string {
	if m != nil {
		return m.EventId
	}
	return ""
}

func (m *Event) GetAggregateType() string {
	if m != nil {
		return m.AggregateType
	}
	return ""
}

func (m *Event) GetAggregateId() string {
	if m != nil {
		return m.AggregateId
	}
	return ""
}

func (m *Event) GetMeta() *types.Any {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *Event) GetChapterCreated() *ChapterCreated {
	if x, ok := m.GetPayload().(*Event_ChapterCreated); ok {
		return x.ChapterCreated
	}
	return nil
}

func (m *Event) GetChapterDeleted() *ChapterDeleted {
	if x, ok := m.GetPayload().(*Event_ChapterDeleted); ok {
		return x.ChapterDeleted
	}
	return nil
}

func (m *Event) GetChapterLabelUpdated() *ChapterLabelUpdated {
	if x, ok := m.GetPayload().(*Event_ChapterLabelUpdated); ok {
		return x.ChapterLabelUpdated
	}
	return nil
}

func (m *Event) GetChapterLeaderUpdated() *ChapterLeaderUpdated {
	if x, ok := m.GetPayload().(*Event_ChapterLeaderUpdated); ok {
		return x.ChapterLeaderUpdated
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Event) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Event_ChapterCreated)(nil),
		(*Event_ChapterDeleted)(nil),
		(*Event_ChapterLabelUpdated)(nil),
		(*Event_ChapterLeaderUpdated)(nil),
	}
}

// ChapterCreated is raised on chapter entity creation.
type ChapterCreated struct {
	Urn                  string   `protobuf:"bytes,1,opt,name=urn,proto3" json:"urn,omitempty"`
	Label                string   `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`
	LeaderId             string   `protobuf:"bytes,3,opt,name=leader_id,json=leaderId,proto3" json:"leader_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChapterCreated) Reset()         { *m = ChapterCreated{} }
func (m *ChapterCreated) String() string { return proto.CompactTextString(m) }
func (*ChapterCreated) ProtoMessage()    {}
func (*ChapterCreated) Descriptor() ([]byte, []int) {
	return fileDescriptor_ae32168c2ebb17ec, []int{1}
}

func (m *ChapterCreated) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *ChapterCreated) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChapterCreated.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *ChapterCreated) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChapterCreated.Merge(m, src)
}

func (m *ChapterCreated) XXX_Size() int {
	return m.Size()
}

func (m *ChapterCreated) XXX_DiscardUnknown() {
	xxx_messageInfo_ChapterCreated.DiscardUnknown(m)
}

var xxx_messageInfo_ChapterCreated proto.InternalMessageInfo

func (m *ChapterCreated) GetUrn() string {
	if m != nil {
		return m.Urn
	}
	return ""
}

func (m *ChapterCreated) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *ChapterCreated) GetLeaderId() string {
	if m != nil {
		return m.LeaderId
	}
	return ""
}

// ChapterDeleted is raised on chapter entity deletion.
type ChapterDeleted struct {
	Urn                  string   `protobuf:"bytes,1,opt,name=urn,proto3" json:"urn,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChapterDeleted) Reset()         { *m = ChapterDeleted{} }
func (m *ChapterDeleted) String() string { return proto.CompactTextString(m) }
func (*ChapterDeleted) ProtoMessage()    {}
func (*ChapterDeleted) Descriptor() ([]byte, []int) {
	return fileDescriptor_ae32168c2ebb17ec, []int{2}
}

func (m *ChapterDeleted) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *ChapterDeleted) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChapterDeleted.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *ChapterDeleted) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChapterDeleted.Merge(m, src)
}

func (m *ChapterDeleted) XXX_Size() int {
	return m.Size()
}

func (m *ChapterDeleted) XXX_DiscardUnknown() {
	xxx_messageInfo_ChapterDeleted.DiscardUnknown(m)
}

var xxx_messageInfo_ChapterDeleted proto.InternalMessageInfo

func (m *ChapterDeleted) GetUrn() string {
	if m != nil {
		return m.Urn
	}
	return ""
}

// ChapterLabelUpdated is raised on chapter entity label updates.
type ChapterLabelUpdated struct {
	Urn                  string   `protobuf:"bytes,1,opt,name=urn,proto3" json:"urn,omitempty"`
	Old                  string   `protobuf:"bytes,2,opt,name=old,proto3" json:"old,omitempty"`
	New                  string   `protobuf:"bytes,3,opt,name=new,proto3" json:"new,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChapterLabelUpdated) Reset()         { *m = ChapterLabelUpdated{} }
func (m *ChapterLabelUpdated) String() string { return proto.CompactTextString(m) }
func (*ChapterLabelUpdated) ProtoMessage()    {}
func (*ChapterLabelUpdated) Descriptor() ([]byte, []int) {
	return fileDescriptor_ae32168c2ebb17ec, []int{3}
}

func (m *ChapterLabelUpdated) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *ChapterLabelUpdated) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChapterLabelUpdated.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *ChapterLabelUpdated) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChapterLabelUpdated.Merge(m, src)
}

func (m *ChapterLabelUpdated) XXX_Size() int {
	return m.Size()
}

func (m *ChapterLabelUpdated) XXX_DiscardUnknown() {
	xxx_messageInfo_ChapterLabelUpdated.DiscardUnknown(m)
}

var xxx_messageInfo_ChapterLabelUpdated proto.InternalMessageInfo

func (m *ChapterLabelUpdated) GetUrn() string {
	if m != nil {
		return m.Urn
	}
	return ""
}

func (m *ChapterLabelUpdated) GetOld() string {
	if m != nil {
		return m.Old
	}
	return ""
}

func (m *ChapterLabelUpdated) GetNew() string {
	if m != nil {
		return m.New
	}
	return ""
}

// ChapterLeaderUpdated is raised on chapter entity leader updates.
type ChapterLeaderUpdated struct {
	Urn                  string   `protobuf:"bytes,1,opt,name=urn,proto3" json:"urn,omitempty"`
	Old                  string   `protobuf:"bytes,2,opt,name=old,proto3" json:"old,omitempty"`
	New                  string   `protobuf:"bytes,3,opt,name=new,proto3" json:"new,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChapterLeaderUpdated) Reset()         { *m = ChapterLeaderUpdated{} }
func (m *ChapterLeaderUpdated) String() string { return proto.CompactTextString(m) }
func (*ChapterLeaderUpdated) ProtoMessage()    {}
func (*ChapterLeaderUpdated) Descriptor() ([]byte, []int) {
	return fileDescriptor_ae32168c2ebb17ec, []int{4}
}

func (m *ChapterLeaderUpdated) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *ChapterLeaderUpdated) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChapterLeaderUpdated.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *ChapterLeaderUpdated) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChapterLeaderUpdated.Merge(m, src)
}

func (m *ChapterLeaderUpdated) XXX_Size() int {
	return m.Size()
}

func (m *ChapterLeaderUpdated) XXX_DiscardUnknown() {
	xxx_messageInfo_ChapterLeaderUpdated.DiscardUnknown(m)
}

var xxx_messageInfo_ChapterLeaderUpdated proto.InternalMessageInfo

func (m *ChapterLeaderUpdated) GetUrn() string {
	if m != nil {
		return m.Urn
	}
	return ""
}

func (m *ChapterLeaderUpdated) GetOld() string {
	if m != nil {
		return m.Old
	}
	return ""
}

func (m *ChapterLeaderUpdated) GetNew() string {
	if m != nil {
		return m.New
	}
	return ""
}

func init() {
	proto.RegisterEnum("spotigraph.events.v1.EventType", EventType_name, EventType_value)
	proto.RegisterType((*Event)(nil), "spotigraph.events.v1.Event")
	proto.RegisterType((*ChapterCreated)(nil), "spotigraph.events.v1.ChapterCreated")
	proto.RegisterType((*ChapterDeleted)(nil), "spotigraph.events.v1.ChapterDeleted")
	proto.RegisterType((*ChapterLabelUpdated)(nil), "spotigraph.events.v1.ChapterLabelUpdated")
	proto.RegisterType((*ChapterLeaderUpdated)(nil), "spotigraph.events.v1.ChapterLeaderUpdated")
}

func init() { proto.RegisterFile("spotigraph/events/v1/event.proto", fileDescriptor_ae32168c2ebb17ec) }

var fileDescriptor_ae32168c2ebb17ec = []byte{
	// 589 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x54, 0xcb, 0x6e, 0xda, 0x4c,
	0x14, 0xc6, 0x5c, 0xfe, 0xc4, 0x87, 0x84, 0x1f, 0x4d, 0xdc, 0x88, 0xa4, 0x12, 0x05, 0x2b, 0x91,
	0x68, 0x16, 0x46, 0xa4, 0xfb, 0x4a, 0x06, 0x8f, 0x04, 0x8a, 0x45, 0x90, 0x03, 0xf4, 0xa2, 0x48,
	0xd6, 0x80, 0xa7, 0x06, 0xc9, 0xb5, 0x2d, 0x63, 0xa8, 0x68, 0xdf, 0xa6, 0xcb, 0x3e, 0x09, 0xea,
	0xaa, 0x8f, 0x50, 0xf1, 0x24, 0x95, 0x67, 0xc0, 0x90, 0xc6, 0x8d, 0xaa, 0xee, 0x8e, 0xbf, 0xf9,
	0x2e, 0x73, 0x8e, 0xce, 0x18, 0x2a, 0x33, 0xdf, 0x0b, 0xa7, 0x76, 0x40, 0xfc, 0x49, 0x9d, 0x2e,
	0xa8, 0x1b, 0xce, 0xea, 0x8b, 0x06, 0xaf, 0x14, 0x3f, 0xf0, 0x42, 0x0f, 0x49, 0x3b, 0x86, 0xc2,
	0x19, 0xca, 0xa2, 0x71, 0x7e, 0x66, 0x7b, 0x9e, 0xed, 0xd0, 0x3a, 0xe3, 0x8c, 0xe6, 0x1f, 0xea,
	0xc4, 0x5d, 0x72, 0x81, 0xbc, 0xca, 0x42, 0x0e, 0x47, 0x44, 0xf4, 0x1a, 0x80, 0x29, 0xcc, 0x70,
	0xe9, 0xd3, 0x92, 0x50, 0x11, 0x6a, 0x85, 0xeb, 0x17, 0x4a, 0x92, 0x9f, 0xc2, 0x04, 0xfd, 0xa5,
	0x4f, 0x0d, 0x91, 0x6e, 0x4b, 0x74, 0x06, 0x87, 0x5c, 0x3f, 0xb5, 0x4a, 0xe9, 0x8a, 0x50, 0x13,
	0x8d, 0x03, 0xf6, 0xdd, 0xb1, 0xd0, 0x25, 0x14, 0x88, 0x6d, 0x07, 0xd4, 0x26, 0x21, 0xe5, 0xf6,
	0x19, 0x46, 0x38, 0x8e, 0x51, 0xe6, 0x50, 0x85, 0xa3, 0x1d, 0x6d, 0x6a, 0x95, 0xb2, 0x8c, 0x94,
	0x8f, 0xb1, 0x8e, 0x85, 0x6a, 0x90, 0xfd, 0x48, 0x43, 0x52, 0xca, 0x55, 0x84, 0x5a, 0xfe, 0x5a,
	0x52, 0x78, 0x63, 0xca, 0xb6, 0x31, 0x45, 0x75, 0x97, 0x06, 0x63, 0xa0, 0x5b, 0xf8, 0x7f, 0x3c,
	0x21, 0x7e, 0x48, 0x03, 0x73, 0x1c, 0x50, 0x12, 0x52, 0xab, 0x04, 0x4c, 0x74, 0x91, 0xdc, 0x53,
	0x8b, 0x93, 0x5b, 0x9c, 0xdb, 0x4e, 0x19, 0x85, 0xf1, 0x03, 0x64, 0xdf, 0xd0, 0xa2, 0x0e, 0x8d,
	0x0c, 0xf3, 0x7f, 0x61, 0xa8, 0x71, 0xee, 0x9e, 0xe1, 0x06, 0x41, 0x26, 0x3c, 0xdb, 0x1a, 0x3a,
	0x64, 0x44, 0x1d, 0x73, 0xee, 0x5b, 0xec, 0x9e, 0x47, 0xcc, 0xf6, 0xe5, 0x93, 0xb6, 0x7a, 0xa4,
	0x18, 0x70, 0x41, 0x3b, 0x65, 0x9c, 0x8c, 0x1f, 0xc3, 0x68, 0x04, 0xa7, 0x71, 0x00, 0x25, 0x16,
	0x0d, 0xe2, 0x84, 0x63, 0x96, 0x70, 0xf5, 0x74, 0x02, 0x93, 0xec, 0x22, 0xa4, 0x71, 0x02, 0xde,
	0x14, 0xe1, 0xc0, 0x27, 0x4b, 0xc7, 0x23, 0x96, 0x3c, 0x80, 0xc2, 0xc3, 0x21, 0xa2, 0x22, 0x64,
	0xe6, 0x81, 0xcb, 0x76, 0x49, 0x34, 0xa2, 0x12, 0x49, 0x90, 0x63, 0xbd, 0x6e, 0x36, 0x84, 0x7f,
	0xa0, 0xe7, 0x20, 0x6e, 0x2e, 0x38, 0xb5, 0x36, 0xab, 0x71, 0xc8, 0x81, 0x8e, 0x25, 0xcb, 0xb1,
	0xed, 0x76, 0x70, 0x8f, 0x6c, 0xe5, 0x1b, 0x38, 0x49, 0x98, 0x4b, 0x42, 0x7e, 0x11, 0x32, 0x9e,
	0xb3, 0xdd, 0xcf, 0xa8, 0x8c, 0x10, 0x97, 0x7e, 0xda, 0xa4, 0x46, 0xa5, 0xac, 0x83, 0x94, 0x34,
	0x82, 0x7f, 0x73, 0xbb, 0x5a, 0x09, 0x20, 0xc6, 0xef, 0x05, 0x9d, 0x02, 0xc2, 0x43, 0xdc, 0xed,
	0x9b, 0xfd, 0x77, 0x3d, 0x6c, 0x76, 0xba, 0x43, 0x55, 0xef, 0x68, 0xc5, 0xd4, 0x6f, 0xf8, 0xa0,
	0x7b, 0xd3, 0xbd, 0x7d, 0xd3, 0x2d, 0x0a, 0xa8, 0x0c, 0xe7, 0x7b, 0x78, 0xab, 0xad, 0xf6, 0xfa,
	0xd8, 0x30, 0x5b, 0x06, 0x56, 0xfb, 0x58, 0x2b, 0xa6, 0xff, 0x70, 0xae, 0x61, 0x1d, 0x47, 0xe7,
	0x19, 0x74, 0x01, 0x95, 0x84, 0x73, 0x5d, 0x6d, 0x62, 0xdd, 0x1c, 0xf4, 0x34, 0xe6, 0x92, 0x45,
	0x97, 0x50, 0x4d, 0x62, 0x61, 0x55, 0xc3, 0x46, 0x4c, 0xcb, 0x35, 0xbf, 0xac, 0xd6, 0x65, 0xe1,
	0xc7, 0xba, 0x2c, 0xfc, 0x5c, 0x97, 0x05, 0xa8, 0x7a, 0x81, 0xad, 0x7c, 0xa6, 0xee, 0x34, 0x9c,
	0x90, 0x20, 0x71, 0x93, 0x9a, 0xc0, 0x1a, 0xef, 0x45, 0x8f, 0xb3, 0x27, 0xbc, 0xe7, 0xbf, 0x87,
	0xd9, 0xa2, 0xf1, 0x35, 0x9d, 0xb9, 0xc3, 0x6f, 0xbf, 0xa5, 0xa5, 0xbb, 0x9d, 0x08, 0x73, 0xd1,
	0xb0, 0xf1, 0x7d, 0x1f, 0xbe, 0xe7, 0xf0, 0xfd, 0xb0, 0x31, 0xfa, 0x8f, 0xbd, 0xf1, 0x57, 0xbf,
	0x02, 0x00, 0x00, 0xff, 0xff, 0xfb, 0xed, 0x96, 0x46, 0x04, 0x05, 0x00, 0x00,
}

func (m *Event) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Event) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Event) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Payload != nil {
		{
			size := m.Payload.Size()
			i -= size
			if _, err := m.Payload.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Meta != nil {
		{
			size, err := m.Meta.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.AggregateId) > 0 {
		i -= len(m.AggregateId)
		copy(dAtA[i:], m.AggregateId)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.AggregateId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.AggregateType) > 0 {
		i -= len(m.AggregateType)
		copy(dAtA[i:], m.AggregateType)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.AggregateType)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.EventId) > 0 {
		i -= len(m.EventId)
		copy(dAtA[i:], m.EventId)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.EventId)))
		i--
		dAtA[i] = 0x12
	}
	if m.EventType != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.EventType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Event_ChapterCreated) MarshalTo(dAtA []byte) (int, error) {
	return m.MarshalToSizedBuffer(dAtA[:m.Size()])
}

func (m *Event_ChapterCreated) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ChapterCreated != nil {
		{
			size, err := m.ChapterCreated.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}

func (m *Event_ChapterDeleted) MarshalTo(dAtA []byte) (int, error) {
	return m.MarshalToSizedBuffer(dAtA[:m.Size()])
}

func (m *Event_ChapterDeleted) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ChapterDeleted != nil {
		{
			size, err := m.ChapterDeleted.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	return len(dAtA) - i, nil
}

func (m *Event_ChapterLabelUpdated) MarshalTo(dAtA []byte) (int, error) {
	return m.MarshalToSizedBuffer(dAtA[:m.Size()])
}

func (m *Event_ChapterLabelUpdated) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ChapterLabelUpdated != nil {
		{
			size, err := m.ChapterLabelUpdated.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	return len(dAtA) - i, nil
}

func (m *Event_ChapterLeaderUpdated) MarshalTo(dAtA []byte) (int, error) {
	return m.MarshalToSizedBuffer(dAtA[:m.Size()])
}

func (m *Event_ChapterLeaderUpdated) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ChapterLeaderUpdated != nil {
		{
			size, err := m.ChapterLeaderUpdated.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	return len(dAtA) - i, nil
}

func (m *ChapterCreated) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChapterCreated) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChapterCreated) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.LeaderId) > 0 {
		i -= len(m.LeaderId)
		copy(dAtA[i:], m.LeaderId)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.LeaderId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Label) > 0 {
		i -= len(m.Label)
		copy(dAtA[i:], m.Label)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Label)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Urn) > 0 {
		i -= len(m.Urn)
		copy(dAtA[i:], m.Urn)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Urn)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ChapterDeleted) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChapterDeleted) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChapterDeleted) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Urn) > 0 {
		i -= len(m.Urn)
		copy(dAtA[i:], m.Urn)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Urn)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ChapterLabelUpdated) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChapterLabelUpdated) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChapterLabelUpdated) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.New) > 0 {
		i -= len(m.New)
		copy(dAtA[i:], m.New)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.New)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Old) > 0 {
		i -= len(m.Old)
		copy(dAtA[i:], m.Old)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Old)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Urn) > 0 {
		i -= len(m.Urn)
		copy(dAtA[i:], m.Urn)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Urn)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ChapterLeaderUpdated) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChapterLeaderUpdated) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChapterLeaderUpdated) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.New) > 0 {
		i -= len(m.New)
		copy(dAtA[i:], m.New)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.New)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Old) > 0 {
		i -= len(m.Old)
		copy(dAtA[i:], m.Old)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Old)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Urn) > 0 {
		i -= len(m.Urn)
		copy(dAtA[i:], m.Urn)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Urn)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintEvent(dAtA []byte, offset int, v uint64) int {
	offset -= sovEvent(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

func (m *Event) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EventType != 0 {
		n += 1 + sovEvent(uint64(m.EventType))
	}
	l = len(m.EventId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.AggregateType)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.AggregateId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.Meta != nil {
		l = m.Meta.Size()
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.Payload != nil {
		n += m.Payload.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Event_ChapterCreated) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChapterCreated != nil {
		l = m.ChapterCreated.Size()
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *Event_ChapterDeleted) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChapterDeleted != nil {
		l = m.ChapterDeleted.Size()
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *Event_ChapterLabelUpdated) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChapterLabelUpdated != nil {
		l = m.ChapterLabelUpdated.Size()
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *Event_ChapterLeaderUpdated) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChapterLeaderUpdated != nil {
		l = m.ChapterLeaderUpdated.Size()
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *ChapterCreated) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Urn)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.Label)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.LeaderId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ChapterDeleted) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Urn)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ChapterLabelUpdated) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Urn)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.Old)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.New)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ChapterLeaderUpdated) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Urn)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.Old)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.New)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovEvent(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}

func sozEvent(x uint64) (n int) {
	return sovEvent(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}

func (m *Event) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Event: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Event: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventType", wireType)
			}
			m.EventType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventType |= EventType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EventId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AggregateType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AggregateType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AggregateId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AggregateId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Meta == nil {
				m.Meta = &types.Any{}
			}
			if err := m.Meta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChapterCreated", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ChapterCreated{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &Event_ChapterCreated{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChapterDeleted", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ChapterDeleted{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &Event_ChapterDeleted{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChapterLabelUpdated", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ChapterLabelUpdated{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &Event_ChapterLabelUpdated{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChapterLeaderUpdated", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ChapterLeaderUpdated{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &Event_ChapterLeaderUpdated{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func (m *ChapterCreated) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChapterCreated: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChapterCreated: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Urn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Urn = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Label", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Label = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeaderId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LeaderId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func (m *ChapterDeleted) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChapterDeleted: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChapterDeleted: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Urn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Urn = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func (m *ChapterLabelUpdated) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChapterLabelUpdated: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChapterLabelUpdated: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Urn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Urn = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Old", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Old = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field New", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.New = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func (m *ChapterLeaderUpdated) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChapterLeaderUpdated: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChapterLeaderUpdated: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Urn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Urn = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Old", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Old = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field New", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.New = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func skipEvent(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvent
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthEvent
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowEvent
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipEvent(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthEvent
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthEvent = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvent   = fmt.Errorf("proto: integer overflow")
)
