// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pkg/grpc/v1/spotigraph/pb/spotigraph.proto

/*
	Package pb is a generated protocol buffer package.

	It is generated from these files:
		pkg/grpc/v1/spotigraph/pb/spotigraph.proto

	It has these top-level messages:
*/
package pb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import spotigraph "go.zenithar.org/spotigraph/pkg/protocol/v1/spotigraph"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for UserService service

type UserServiceClient interface {
	Create(ctx context.Context, in *spotigraph.UserCreateReq, opts ...grpc.CallOption) (*spotigraph.SingleUserRes, error)
	Get(ctx context.Context, in *spotigraph.UserGetReq, opts ...grpc.CallOption) (*spotigraph.SingleUserRes, error)
	Update(ctx context.Context, in *spotigraph.UserUpdateReq, opts ...grpc.CallOption) (*spotigraph.SingleUserRes, error)
	Delete(ctx context.Context, in *spotigraph.UserGetReq, opts ...grpc.CallOption) (*spotigraph.EmptyRes, error)
}

type userServiceClient struct {
	cc *grpc.ClientConn
}

func NewUserServiceClient(cc *grpc.ClientConn) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) Create(ctx context.Context, in *spotigraph.UserCreateReq, opts ...grpc.CallOption) (*spotigraph.SingleUserRes, error) {
	out := new(spotigraph.SingleUserRes)
	err := grpc.Invoke(ctx, "/pb.UserService/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) Get(ctx context.Context, in *spotigraph.UserGetReq, opts ...grpc.CallOption) (*spotigraph.SingleUserRes, error) {
	out := new(spotigraph.SingleUserRes)
	err := grpc.Invoke(ctx, "/pb.UserService/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) Update(ctx context.Context, in *spotigraph.UserUpdateReq, opts ...grpc.CallOption) (*spotigraph.SingleUserRes, error) {
	out := new(spotigraph.SingleUserRes)
	err := grpc.Invoke(ctx, "/pb.UserService/Update", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) Delete(ctx context.Context, in *spotigraph.UserGetReq, opts ...grpc.CallOption) (*spotigraph.EmptyRes, error) {
	out := new(spotigraph.EmptyRes)
	err := grpc.Invoke(ctx, "/pb.UserService/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UserService service

type UserServiceServer interface {
	Create(context.Context, *spotigraph.UserCreateReq) (*spotigraph.SingleUserRes, error)
	Get(context.Context, *spotigraph.UserGetReq) (*spotigraph.SingleUserRes, error)
	Update(context.Context, *spotigraph.UserUpdateReq) (*spotigraph.SingleUserRes, error)
	Delete(context.Context, *spotigraph.UserGetReq) (*spotigraph.EmptyRes, error)
}

func RegisterUserServiceServer(s *grpc.Server, srv UserServiceServer) {
	s.RegisterService(&_UserService_serviceDesc, srv)
}

func _UserService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(spotigraph.UserCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UserService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Create(ctx, req.(*spotigraph.UserCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(spotigraph.UserGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UserService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Get(ctx, req.(*spotigraph.UserGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(spotigraph.UserUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UserService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Update(ctx, req.(*spotigraph.UserUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(spotigraph.UserGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UserService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Delete(ctx, req.(*spotigraph.UserGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _UserService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _UserService_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _UserService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _UserService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/grpc/v1/spotigraph/pb/spotigraph.proto",
}

// Client API for SquadService service

type SquadServiceClient interface {
	Create(ctx context.Context, in *spotigraph.SquadCreateReq, opts ...grpc.CallOption) (*spotigraph.SingleSquadRes, error)
	Get(ctx context.Context, in *spotigraph.SquadGetReq, opts ...grpc.CallOption) (*spotigraph.SingleSquadRes, error)
	Update(ctx context.Context, in *spotigraph.SquadUpdateReq, opts ...grpc.CallOption) (*spotigraph.SingleSquadRes, error)
	Delete(ctx context.Context, in *spotigraph.SquadGetReq, opts ...grpc.CallOption) (*spotigraph.EmptyRes, error)
}

type squadServiceClient struct {
	cc *grpc.ClientConn
}

func NewSquadServiceClient(cc *grpc.ClientConn) SquadServiceClient {
	return &squadServiceClient{cc}
}

func (c *squadServiceClient) Create(ctx context.Context, in *spotigraph.SquadCreateReq, opts ...grpc.CallOption) (*spotigraph.SingleSquadRes, error) {
	out := new(spotigraph.SingleSquadRes)
	err := grpc.Invoke(ctx, "/pb.SquadService/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *squadServiceClient) Get(ctx context.Context, in *spotigraph.SquadGetReq, opts ...grpc.CallOption) (*spotigraph.SingleSquadRes, error) {
	out := new(spotigraph.SingleSquadRes)
	err := grpc.Invoke(ctx, "/pb.SquadService/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *squadServiceClient) Update(ctx context.Context, in *spotigraph.SquadUpdateReq, opts ...grpc.CallOption) (*spotigraph.SingleSquadRes, error) {
	out := new(spotigraph.SingleSquadRes)
	err := grpc.Invoke(ctx, "/pb.SquadService/Update", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *squadServiceClient) Delete(ctx context.Context, in *spotigraph.SquadGetReq, opts ...grpc.CallOption) (*spotigraph.EmptyRes, error) {
	out := new(spotigraph.EmptyRes)
	err := grpc.Invoke(ctx, "/pb.SquadService/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SquadService service

type SquadServiceServer interface {
	Create(context.Context, *spotigraph.SquadCreateReq) (*spotigraph.SingleSquadRes, error)
	Get(context.Context, *spotigraph.SquadGetReq) (*spotigraph.SingleSquadRes, error)
	Update(context.Context, *spotigraph.SquadUpdateReq) (*spotigraph.SingleSquadRes, error)
	Delete(context.Context, *spotigraph.SquadGetReq) (*spotigraph.EmptyRes, error)
}

func RegisterSquadServiceServer(s *grpc.Server, srv SquadServiceServer) {
	s.RegisterService(&_SquadService_serviceDesc, srv)
}

func _SquadService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(spotigraph.SquadCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SquadServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.SquadService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SquadServiceServer).Create(ctx, req.(*spotigraph.SquadCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SquadService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(spotigraph.SquadGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SquadServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.SquadService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SquadServiceServer).Get(ctx, req.(*spotigraph.SquadGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SquadService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(spotigraph.SquadUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SquadServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.SquadService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SquadServiceServer).Update(ctx, req.(*spotigraph.SquadUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SquadService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(spotigraph.SquadGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SquadServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.SquadService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SquadServiceServer).Delete(ctx, req.(*spotigraph.SquadGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _SquadService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.SquadService",
	HandlerType: (*SquadServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _SquadService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _SquadService_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _SquadService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _SquadService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/grpc/v1/spotigraph/pb/spotigraph.proto",
}

// Client API for ChapterService service

type ChapterServiceClient interface {
	Create(ctx context.Context, in *spotigraph.ChapterCreateReq, opts ...grpc.CallOption) (*spotigraph.SingleChapterRes, error)
	Get(ctx context.Context, in *spotigraph.ChapterGetReq, opts ...grpc.CallOption) (*spotigraph.SingleChapterRes, error)
	Update(ctx context.Context, in *spotigraph.ChapterUpdateReq, opts ...grpc.CallOption) (*spotigraph.SingleChapterRes, error)
	Delete(ctx context.Context, in *spotigraph.ChapterGetReq, opts ...grpc.CallOption) (*spotigraph.EmptyRes, error)
}

type chapterServiceClient struct {
	cc *grpc.ClientConn
}

func NewChapterServiceClient(cc *grpc.ClientConn) ChapterServiceClient {
	return &chapterServiceClient{cc}
}

func (c *chapterServiceClient) Create(ctx context.Context, in *spotigraph.ChapterCreateReq, opts ...grpc.CallOption) (*spotigraph.SingleChapterRes, error) {
	out := new(spotigraph.SingleChapterRes)
	err := grpc.Invoke(ctx, "/pb.ChapterService/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chapterServiceClient) Get(ctx context.Context, in *spotigraph.ChapterGetReq, opts ...grpc.CallOption) (*spotigraph.SingleChapterRes, error) {
	out := new(spotigraph.SingleChapterRes)
	err := grpc.Invoke(ctx, "/pb.ChapterService/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chapterServiceClient) Update(ctx context.Context, in *spotigraph.ChapterUpdateReq, opts ...grpc.CallOption) (*spotigraph.SingleChapterRes, error) {
	out := new(spotigraph.SingleChapterRes)
	err := grpc.Invoke(ctx, "/pb.ChapterService/Update", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chapterServiceClient) Delete(ctx context.Context, in *spotigraph.ChapterGetReq, opts ...grpc.CallOption) (*spotigraph.EmptyRes, error) {
	out := new(spotigraph.EmptyRes)
	err := grpc.Invoke(ctx, "/pb.ChapterService/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ChapterService service

type ChapterServiceServer interface {
	Create(context.Context, *spotigraph.ChapterCreateReq) (*spotigraph.SingleChapterRes, error)
	Get(context.Context, *spotigraph.ChapterGetReq) (*spotigraph.SingleChapterRes, error)
	Update(context.Context, *spotigraph.ChapterUpdateReq) (*spotigraph.SingleChapterRes, error)
	Delete(context.Context, *spotigraph.ChapterGetReq) (*spotigraph.EmptyRes, error)
}

func RegisterChapterServiceServer(s *grpc.Server, srv ChapterServiceServer) {
	s.RegisterService(&_ChapterService_serviceDesc, srv)
}

func _ChapterService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(spotigraph.ChapterCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChapterServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ChapterService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChapterServiceServer).Create(ctx, req.(*spotigraph.ChapterCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChapterService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(spotigraph.ChapterGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChapterServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ChapterService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChapterServiceServer).Get(ctx, req.(*spotigraph.ChapterGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChapterService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(spotigraph.ChapterUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChapterServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ChapterService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChapterServiceServer).Update(ctx, req.(*spotigraph.ChapterUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChapterService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(spotigraph.ChapterGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChapterServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ChapterService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChapterServiceServer).Delete(ctx, req.(*spotigraph.ChapterGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _ChapterService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.ChapterService",
	HandlerType: (*ChapterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _ChapterService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _ChapterService_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ChapterService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ChapterService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/grpc/v1/spotigraph/pb/spotigraph.proto",
}

// Client API for GuildService service

type GuildServiceClient interface {
	Create(ctx context.Context, in *spotigraph.GuildCreateReq, opts ...grpc.CallOption) (*spotigraph.SingleGuildRes, error)
	Get(ctx context.Context, in *spotigraph.GuildGetReq, opts ...grpc.CallOption) (*spotigraph.SingleGuildRes, error)
	Update(ctx context.Context, in *spotigraph.GuildUpdateReq, opts ...grpc.CallOption) (*spotigraph.SingleGuildRes, error)
	Delete(ctx context.Context, in *spotigraph.GuildGetReq, opts ...grpc.CallOption) (*spotigraph.EmptyRes, error)
}

type guildServiceClient struct {
	cc *grpc.ClientConn
}

func NewGuildServiceClient(cc *grpc.ClientConn) GuildServiceClient {
	return &guildServiceClient{cc}
}

func (c *guildServiceClient) Create(ctx context.Context, in *spotigraph.GuildCreateReq, opts ...grpc.CallOption) (*spotigraph.SingleGuildRes, error) {
	out := new(spotigraph.SingleGuildRes)
	err := grpc.Invoke(ctx, "/pb.GuildService/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guildServiceClient) Get(ctx context.Context, in *spotigraph.GuildGetReq, opts ...grpc.CallOption) (*spotigraph.SingleGuildRes, error) {
	out := new(spotigraph.SingleGuildRes)
	err := grpc.Invoke(ctx, "/pb.GuildService/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guildServiceClient) Update(ctx context.Context, in *spotigraph.GuildUpdateReq, opts ...grpc.CallOption) (*spotigraph.SingleGuildRes, error) {
	out := new(spotigraph.SingleGuildRes)
	err := grpc.Invoke(ctx, "/pb.GuildService/Update", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guildServiceClient) Delete(ctx context.Context, in *spotigraph.GuildGetReq, opts ...grpc.CallOption) (*spotigraph.EmptyRes, error) {
	out := new(spotigraph.EmptyRes)
	err := grpc.Invoke(ctx, "/pb.GuildService/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for GuildService service

type GuildServiceServer interface {
	Create(context.Context, *spotigraph.GuildCreateReq) (*spotigraph.SingleGuildRes, error)
	Get(context.Context, *spotigraph.GuildGetReq) (*spotigraph.SingleGuildRes, error)
	Update(context.Context, *spotigraph.GuildUpdateReq) (*spotigraph.SingleGuildRes, error)
	Delete(context.Context, *spotigraph.GuildGetReq) (*spotigraph.EmptyRes, error)
}

func RegisterGuildServiceServer(s *grpc.Server, srv GuildServiceServer) {
	s.RegisterService(&_GuildService_serviceDesc, srv)
}

func _GuildService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(spotigraph.GuildCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuildServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GuildService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuildServiceServer).Create(ctx, req.(*spotigraph.GuildCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuildService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(spotigraph.GuildGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuildServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GuildService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuildServiceServer).Get(ctx, req.(*spotigraph.GuildGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuildService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(spotigraph.GuildUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuildServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GuildService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuildServiceServer).Update(ctx, req.(*spotigraph.GuildUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuildService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(spotigraph.GuildGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuildServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GuildService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuildServiceServer).Delete(ctx, req.(*spotigraph.GuildGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _GuildService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.GuildService",
	HandlerType: (*GuildServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _GuildService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _GuildService_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _GuildService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _GuildService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/grpc/v1/spotigraph/pb/spotigraph.proto",
}

// Client API for TribeService service

type TribeServiceClient interface {
	Create(ctx context.Context, in *spotigraph.TribeCreateReq, opts ...grpc.CallOption) (*spotigraph.SingleTribeRes, error)
	Get(ctx context.Context, in *spotigraph.TribeGetReq, opts ...grpc.CallOption) (*spotigraph.SingleTribeRes, error)
	Update(ctx context.Context, in *spotigraph.TribeUpdateReq, opts ...grpc.CallOption) (*spotigraph.SingleTribeRes, error)
	Delete(ctx context.Context, in *spotigraph.TribeGetReq, opts ...grpc.CallOption) (*spotigraph.EmptyRes, error)
}

type tribeServiceClient struct {
	cc *grpc.ClientConn
}

func NewTribeServiceClient(cc *grpc.ClientConn) TribeServiceClient {
	return &tribeServiceClient{cc}
}

func (c *tribeServiceClient) Create(ctx context.Context, in *spotigraph.TribeCreateReq, opts ...grpc.CallOption) (*spotigraph.SingleTribeRes, error) {
	out := new(spotigraph.SingleTribeRes)
	err := grpc.Invoke(ctx, "/pb.TribeService/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tribeServiceClient) Get(ctx context.Context, in *spotigraph.TribeGetReq, opts ...grpc.CallOption) (*spotigraph.SingleTribeRes, error) {
	out := new(spotigraph.SingleTribeRes)
	err := grpc.Invoke(ctx, "/pb.TribeService/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tribeServiceClient) Update(ctx context.Context, in *spotigraph.TribeUpdateReq, opts ...grpc.CallOption) (*spotigraph.SingleTribeRes, error) {
	out := new(spotigraph.SingleTribeRes)
	err := grpc.Invoke(ctx, "/pb.TribeService/Update", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tribeServiceClient) Delete(ctx context.Context, in *spotigraph.TribeGetReq, opts ...grpc.CallOption) (*spotigraph.EmptyRes, error) {
	out := new(spotigraph.EmptyRes)
	err := grpc.Invoke(ctx, "/pb.TribeService/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TribeService service

type TribeServiceServer interface {
	Create(context.Context, *spotigraph.TribeCreateReq) (*spotigraph.SingleTribeRes, error)
	Get(context.Context, *spotigraph.TribeGetReq) (*spotigraph.SingleTribeRes, error)
	Update(context.Context, *spotigraph.TribeUpdateReq) (*spotigraph.SingleTribeRes, error)
	Delete(context.Context, *spotigraph.TribeGetReq) (*spotigraph.EmptyRes, error)
}

func RegisterTribeServiceServer(s *grpc.Server, srv TribeServiceServer) {
	s.RegisterService(&_TribeService_serviceDesc, srv)
}

func _TribeService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(spotigraph.TribeCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TribeServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.TribeService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TribeServiceServer).Create(ctx, req.(*spotigraph.TribeCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TribeService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(spotigraph.TribeGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TribeServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.TribeService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TribeServiceServer).Get(ctx, req.(*spotigraph.TribeGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TribeService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(spotigraph.TribeUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TribeServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.TribeService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TribeServiceServer).Update(ctx, req.(*spotigraph.TribeUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TribeService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(spotigraph.TribeGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TribeServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.TribeService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TribeServiceServer).Delete(ctx, req.(*spotigraph.TribeGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _TribeService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.TribeService",
	HandlerType: (*TribeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _TribeService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _TribeService_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _TribeService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _TribeService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/grpc/v1/spotigraph/pb/spotigraph.proto",
}

func init() {
	proto.RegisterFile("pkg/grpc/v1/spotigraph/pb/spotigraph.proto", fileDescriptorSpotigraph)
}

var fileDescriptorSpotigraph = []byte{
	// 367 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x94, 0xdd, 0x4e, 0x83, 0x40,
	0x10, 0x85, 0x63, 0x4d, 0xb8, 0x58, 0x8d, 0x17, 0xc4, 0x68, 0x4a, 0xfa, 0x04, 0x9a, 0x94, 0x58,
	0x13, 0xff, 0x2e, 0x9a, 0x26, 0xad, 0xe1, 0x1e, 0xec, 0x03, 0x00, 0x9d, 0x50, 0x22, 0xca, 0x76,
	0xd9, 0x36, 0xf1, 0x09, 0x7c, 0x04, 0x1f, 0x57, 0xc3, 0x80, 0xcb, 0x16, 0x98, 0xe5, 0x92, 0x9d,
	0x73, 0x66, 0x4e, 0xbe, 0x9e, 0x94, 0xdd, 0xf0, 0xf7, 0xc4, 0x4d, 0x04, 0x8f, 0xdd, 0xc3, 0x9d,
	0x5b, 0xf0, 0x5c, 0xa6, 0x89, 0x08, 0xf9, 0xd6, 0xe5, 0x91, 0xf6, 0x35, 0xe5, 0x22, 0x97, 0xb9,
	0x3d, 0xe2, 0x91, 0x73, 0x5b, 0xea, 0xf1, 0x33, 0xce, 0xb3, 0x96, 0xa7, 0x6d, 0x98, 0xfd, 0x9e,
	0xb0, 0xb3, 0x75, 0x01, 0x22, 0x00, 0x71, 0x48, 0x63, 0xb0, 0xe7, 0xcc, 0x5a, 0x0a, 0x08, 0x25,
	0xd8, 0xe3, 0xa9, 0x26, 0x2e, 0x25, 0xd5, 0xbb, 0x0f, 0x3b, 0xe7, 0x68, 0x14, 0xa4, 0x9f, 0x49,
	0x06, 0xa5, 0xc0, 0x87, 0xc2, 0x7e, 0x62, 0xa7, 0x1e, 0x48, 0xfb, 0xaa, 0x6d, 0xf6, 0x40, 0x0e,
	0x38, 0xe7, 0xcc, 0x5a, 0xf3, 0x4d, 0xef, 0xe5, 0xea, 0x7d, 0xc0, 0xff, 0xc0, 0xac, 0x15, 0x64,
	0x20, 0x81, 0x3c, 0x7e, 0xa9, 0xbf, 0xbf, 0x7e, 0x70, 0xf9, 0xe5, 0x43, 0x31, 0xfb, 0x1e, 0xb1,
	0xf3, 0x60, 0xb7, 0x0f, 0x37, 0xff, 0x08, 0x16, 0x0a, 0x81, 0x73, 0x74, 0xad, 0xd4, 0x34, 0x0c,
	0x9c, 0x6e, 0x12, 0x54, 0x94, 0x51, 0x5e, 0x2a, 0x08, 0xd7, 0x1d, 0x7b, 0x1d, 0xc4, 0xe4, 0x5d,
	0x28, 0x0c, 0xdd, 0xeb, 0x0d, 0x07, 0xd3, 0x86, 0x47, 0x05, 0x82, 0x0c, 0xd0, 0x4f, 0xe2, 0x67,
	0xc4, 0x2e, 0x96, 0xdb, 0x90, 0xcb, 0xa6, 0x0e, 0x2b, 0xc5, 0x62, 0xa2, 0x5b, 0x6a, 0x55, 0x43,
	0x63, 0xd2, 0xcd, 0x53, 0x6b, 0xaa, 0x9f, 0x16, 0x79, 0x8c, 0x7b, 0x56, 0xd4, 0x81, 0xcc, 0xfe,
	0x95, 0x62, 0xd2, 0x97, 0xa2, 0xa1, 0x62, 0xde, 0xf2, 0xac, 0xb8, 0x18, 0x82, 0xd0, 0x1d, 0xf1,
	0xf6, 0x69, 0x36, 0xd4, 0x11, 0xd4, 0x18, 0x3b, 0x82, 0x0a, 0xaa, 0x23, 0x38, 0xa4, 0x3b, 0xa2,
	0xbc, 0x44, 0x47, 0x70, 0x6e, 0xec, 0x88, 0xda, 0x40, 0x74, 0x44, 0x0f, 0x40, 0x93, 0x78, 0x13,
	0x69, 0x04, 0x03, 0x24, 0x50, 0x63, 0x24, 0x81, 0x0a, 0x8a, 0x04, 0x0e, 0x69, 0x12, 0xca, 0x4b,
	0x90, 0xc0, 0xb9, 0x91, 0x84, 0xda, 0x40, 0x90, 0xd0, 0x03, 0xf4, 0x92, 0x88, 0x2c, 0xfc, 0x03,
	0xbd, 0xff, 0x0b, 0x00, 0x00, 0xff, 0xff, 0x40, 0x40, 0x94, 0xee, 0x9f, 0x05, 0x00, 0x00,
}
