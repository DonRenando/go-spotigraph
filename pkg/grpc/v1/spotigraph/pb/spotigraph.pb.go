// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pkg/grpc/v1/spotigraph/pb/spotigraph.proto

/*
	Package pb is a generated protocol buffer package.

	It is generated from these files:
		pkg/grpc/v1/spotigraph/pb/spotigraph.proto

	It has these top-level messages:
*/
package pb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import spotigraph_v1 "go.zenithar.org/spotigraph/pkg/protocol/v1/spotigraph"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for User service

type UserClient interface {
	Create(ctx context.Context, in *spotigraph_v1.UserCreateReq, opts ...grpc.CallOption) (*spotigraph_v1.SingleUserRes, error)
	Get(ctx context.Context, in *spotigraph_v1.UserGetReq, opts ...grpc.CallOption) (*spotigraph_v1.SingleUserRes, error)
	Update(ctx context.Context, in *spotigraph_v1.UserUpdateReq, opts ...grpc.CallOption) (*spotigraph_v1.SingleUserRes, error)
	Delete(ctx context.Context, in *spotigraph_v1.UserGetReq, opts ...grpc.CallOption) (*spotigraph_v1.EmptyRes, error)
}

type userClient struct {
	cc *grpc.ClientConn
}

func NewUserClient(cc *grpc.ClientConn) UserClient {
	return &userClient{cc}
}

func (c *userClient) Create(ctx context.Context, in *spotigraph_v1.UserCreateReq, opts ...grpc.CallOption) (*spotigraph_v1.SingleUserRes, error) {
	out := new(spotigraph_v1.SingleUserRes)
	err := grpc.Invoke(ctx, "/grpc.spotigraph.v1.User/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) Get(ctx context.Context, in *spotigraph_v1.UserGetReq, opts ...grpc.CallOption) (*spotigraph_v1.SingleUserRes, error) {
	out := new(spotigraph_v1.SingleUserRes)
	err := grpc.Invoke(ctx, "/grpc.spotigraph.v1.User/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) Update(ctx context.Context, in *spotigraph_v1.UserUpdateReq, opts ...grpc.CallOption) (*spotigraph_v1.SingleUserRes, error) {
	out := new(spotigraph_v1.SingleUserRes)
	err := grpc.Invoke(ctx, "/grpc.spotigraph.v1.User/Update", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) Delete(ctx context.Context, in *spotigraph_v1.UserGetReq, opts ...grpc.CallOption) (*spotigraph_v1.EmptyRes, error) {
	out := new(spotigraph_v1.EmptyRes)
	err := grpc.Invoke(ctx, "/grpc.spotigraph.v1.User/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for User service

type UserServer interface {
	Create(context.Context, *spotigraph_v1.UserCreateReq) (*spotigraph_v1.SingleUserRes, error)
	Get(context.Context, *spotigraph_v1.UserGetReq) (*spotigraph_v1.SingleUserRes, error)
	Update(context.Context, *spotigraph_v1.UserUpdateReq) (*spotigraph_v1.SingleUserRes, error)
	Delete(context.Context, *spotigraph_v1.UserGetReq) (*spotigraph_v1.EmptyRes, error)
}

func RegisterUserServer(s *grpc.Server, srv UserServer) {
	s.RegisterService(&_User_serviceDesc, srv)
}

func _User_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(spotigraph_v1.UserCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.spotigraph.v1.User/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).Create(ctx, req.(*spotigraph_v1.UserCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(spotigraph_v1.UserGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.spotigraph.v1.User/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).Get(ctx, req.(*spotigraph_v1.UserGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(spotigraph_v1.UserUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.spotigraph.v1.User/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).Update(ctx, req.(*spotigraph_v1.UserUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(spotigraph_v1.UserGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.spotigraph.v1.User/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).Delete(ctx, req.(*spotigraph_v1.UserGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _User_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.spotigraph.v1.User",
	HandlerType: (*UserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _User_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _User_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _User_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _User_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/grpc/v1/spotigraph/pb/spotigraph.proto",
}

// Client API for Squad service

type SquadClient interface {
	Create(ctx context.Context, in *spotigraph_v1.SquadCreateReq, opts ...grpc.CallOption) (*spotigraph_v1.SingleSquadRes, error)
	Get(ctx context.Context, in *spotigraph_v1.SquadGetReq, opts ...grpc.CallOption) (*spotigraph_v1.SingleSquadRes, error)
	Update(ctx context.Context, in *spotigraph_v1.SquadUpdateReq, opts ...grpc.CallOption) (*spotigraph_v1.SingleSquadRes, error)
	Delete(ctx context.Context, in *spotigraph_v1.SquadGetReq, opts ...grpc.CallOption) (*spotigraph_v1.EmptyRes, error)
}

type squadClient struct {
	cc *grpc.ClientConn
}

func NewSquadClient(cc *grpc.ClientConn) SquadClient {
	return &squadClient{cc}
}

func (c *squadClient) Create(ctx context.Context, in *spotigraph_v1.SquadCreateReq, opts ...grpc.CallOption) (*spotigraph_v1.SingleSquadRes, error) {
	out := new(spotigraph_v1.SingleSquadRes)
	err := grpc.Invoke(ctx, "/grpc.spotigraph.v1.Squad/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *squadClient) Get(ctx context.Context, in *spotigraph_v1.SquadGetReq, opts ...grpc.CallOption) (*spotigraph_v1.SingleSquadRes, error) {
	out := new(spotigraph_v1.SingleSquadRes)
	err := grpc.Invoke(ctx, "/grpc.spotigraph.v1.Squad/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *squadClient) Update(ctx context.Context, in *spotigraph_v1.SquadUpdateReq, opts ...grpc.CallOption) (*spotigraph_v1.SingleSquadRes, error) {
	out := new(spotigraph_v1.SingleSquadRes)
	err := grpc.Invoke(ctx, "/grpc.spotigraph.v1.Squad/Update", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *squadClient) Delete(ctx context.Context, in *spotigraph_v1.SquadGetReq, opts ...grpc.CallOption) (*spotigraph_v1.EmptyRes, error) {
	out := new(spotigraph_v1.EmptyRes)
	err := grpc.Invoke(ctx, "/grpc.spotigraph.v1.Squad/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Squad service

type SquadServer interface {
	Create(context.Context, *spotigraph_v1.SquadCreateReq) (*spotigraph_v1.SingleSquadRes, error)
	Get(context.Context, *spotigraph_v1.SquadGetReq) (*spotigraph_v1.SingleSquadRes, error)
	Update(context.Context, *spotigraph_v1.SquadUpdateReq) (*spotigraph_v1.SingleSquadRes, error)
	Delete(context.Context, *spotigraph_v1.SquadGetReq) (*spotigraph_v1.EmptyRes, error)
}

func RegisterSquadServer(s *grpc.Server, srv SquadServer) {
	s.RegisterService(&_Squad_serviceDesc, srv)
}

func _Squad_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(spotigraph_v1.SquadCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SquadServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.spotigraph.v1.Squad/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SquadServer).Create(ctx, req.(*spotigraph_v1.SquadCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Squad_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(spotigraph_v1.SquadGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SquadServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.spotigraph.v1.Squad/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SquadServer).Get(ctx, req.(*spotigraph_v1.SquadGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Squad_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(spotigraph_v1.SquadUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SquadServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.spotigraph.v1.Squad/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SquadServer).Update(ctx, req.(*spotigraph_v1.SquadUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Squad_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(spotigraph_v1.SquadGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SquadServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.spotigraph.v1.Squad/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SquadServer).Delete(ctx, req.(*spotigraph_v1.SquadGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Squad_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.spotigraph.v1.Squad",
	HandlerType: (*SquadServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Squad_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Squad_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Squad_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Squad_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/grpc/v1/spotigraph/pb/spotigraph.proto",
}

// Client API for Chapter service

type ChapterClient interface {
	Create(ctx context.Context, in *spotigraph_v1.ChapterCreateReq, opts ...grpc.CallOption) (*spotigraph_v1.SingleChapterRes, error)
	Get(ctx context.Context, in *spotigraph_v1.ChapterGetReq, opts ...grpc.CallOption) (*spotigraph_v1.SingleChapterRes, error)
	Update(ctx context.Context, in *spotigraph_v1.ChapterUpdateReq, opts ...grpc.CallOption) (*spotigraph_v1.SingleChapterRes, error)
	Delete(ctx context.Context, in *spotigraph_v1.ChapterGetReq, opts ...grpc.CallOption) (*spotigraph_v1.EmptyRes, error)
}

type chapterClient struct {
	cc *grpc.ClientConn
}

func NewChapterClient(cc *grpc.ClientConn) ChapterClient {
	return &chapterClient{cc}
}

func (c *chapterClient) Create(ctx context.Context, in *spotigraph_v1.ChapterCreateReq, opts ...grpc.CallOption) (*spotigraph_v1.SingleChapterRes, error) {
	out := new(spotigraph_v1.SingleChapterRes)
	err := grpc.Invoke(ctx, "/grpc.spotigraph.v1.Chapter/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chapterClient) Get(ctx context.Context, in *spotigraph_v1.ChapterGetReq, opts ...grpc.CallOption) (*spotigraph_v1.SingleChapterRes, error) {
	out := new(spotigraph_v1.SingleChapterRes)
	err := grpc.Invoke(ctx, "/grpc.spotigraph.v1.Chapter/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chapterClient) Update(ctx context.Context, in *spotigraph_v1.ChapterUpdateReq, opts ...grpc.CallOption) (*spotigraph_v1.SingleChapterRes, error) {
	out := new(spotigraph_v1.SingleChapterRes)
	err := grpc.Invoke(ctx, "/grpc.spotigraph.v1.Chapter/Update", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chapterClient) Delete(ctx context.Context, in *spotigraph_v1.ChapterGetReq, opts ...grpc.CallOption) (*spotigraph_v1.EmptyRes, error) {
	out := new(spotigraph_v1.EmptyRes)
	err := grpc.Invoke(ctx, "/grpc.spotigraph.v1.Chapter/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Chapter service

type ChapterServer interface {
	Create(context.Context, *spotigraph_v1.ChapterCreateReq) (*spotigraph_v1.SingleChapterRes, error)
	Get(context.Context, *spotigraph_v1.ChapterGetReq) (*spotigraph_v1.SingleChapterRes, error)
	Update(context.Context, *spotigraph_v1.ChapterUpdateReq) (*spotigraph_v1.SingleChapterRes, error)
	Delete(context.Context, *spotigraph_v1.ChapterGetReq) (*spotigraph_v1.EmptyRes, error)
}

func RegisterChapterServer(s *grpc.Server, srv ChapterServer) {
	s.RegisterService(&_Chapter_serviceDesc, srv)
}

func _Chapter_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(spotigraph_v1.ChapterCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChapterServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.spotigraph.v1.Chapter/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChapterServer).Create(ctx, req.(*spotigraph_v1.ChapterCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chapter_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(spotigraph_v1.ChapterGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChapterServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.spotigraph.v1.Chapter/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChapterServer).Get(ctx, req.(*spotigraph_v1.ChapterGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chapter_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(spotigraph_v1.ChapterUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChapterServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.spotigraph.v1.Chapter/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChapterServer).Update(ctx, req.(*spotigraph_v1.ChapterUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chapter_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(spotigraph_v1.ChapterGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChapterServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.spotigraph.v1.Chapter/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChapterServer).Delete(ctx, req.(*spotigraph_v1.ChapterGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Chapter_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.spotigraph.v1.Chapter",
	HandlerType: (*ChapterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Chapter_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Chapter_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Chapter_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Chapter_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/grpc/v1/spotigraph/pb/spotigraph.proto",
}

// Client API for Guild service

type GuildClient interface {
	Create(ctx context.Context, in *spotigraph_v1.GuildCreateReq, opts ...grpc.CallOption) (*spotigraph_v1.SingleGuildRes, error)
	Get(ctx context.Context, in *spotigraph_v1.GuildGetReq, opts ...grpc.CallOption) (*spotigraph_v1.SingleGuildRes, error)
	Update(ctx context.Context, in *spotigraph_v1.GuildUpdateReq, opts ...grpc.CallOption) (*spotigraph_v1.SingleGuildRes, error)
	Delete(ctx context.Context, in *spotigraph_v1.GuildGetReq, opts ...grpc.CallOption) (*spotigraph_v1.EmptyRes, error)
}

type guildClient struct {
	cc *grpc.ClientConn
}

func NewGuildClient(cc *grpc.ClientConn) GuildClient {
	return &guildClient{cc}
}

func (c *guildClient) Create(ctx context.Context, in *spotigraph_v1.GuildCreateReq, opts ...grpc.CallOption) (*spotigraph_v1.SingleGuildRes, error) {
	out := new(spotigraph_v1.SingleGuildRes)
	err := grpc.Invoke(ctx, "/grpc.spotigraph.v1.Guild/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guildClient) Get(ctx context.Context, in *spotigraph_v1.GuildGetReq, opts ...grpc.CallOption) (*spotigraph_v1.SingleGuildRes, error) {
	out := new(spotigraph_v1.SingleGuildRes)
	err := grpc.Invoke(ctx, "/grpc.spotigraph.v1.Guild/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guildClient) Update(ctx context.Context, in *spotigraph_v1.GuildUpdateReq, opts ...grpc.CallOption) (*spotigraph_v1.SingleGuildRes, error) {
	out := new(spotigraph_v1.SingleGuildRes)
	err := grpc.Invoke(ctx, "/grpc.spotigraph.v1.Guild/Update", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guildClient) Delete(ctx context.Context, in *spotigraph_v1.GuildGetReq, opts ...grpc.CallOption) (*spotigraph_v1.EmptyRes, error) {
	out := new(spotigraph_v1.EmptyRes)
	err := grpc.Invoke(ctx, "/grpc.spotigraph.v1.Guild/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Guild service

type GuildServer interface {
	Create(context.Context, *spotigraph_v1.GuildCreateReq) (*spotigraph_v1.SingleGuildRes, error)
	Get(context.Context, *spotigraph_v1.GuildGetReq) (*spotigraph_v1.SingleGuildRes, error)
	Update(context.Context, *spotigraph_v1.GuildUpdateReq) (*spotigraph_v1.SingleGuildRes, error)
	Delete(context.Context, *spotigraph_v1.GuildGetReq) (*spotigraph_v1.EmptyRes, error)
}

func RegisterGuildServer(s *grpc.Server, srv GuildServer) {
	s.RegisterService(&_Guild_serviceDesc, srv)
}

func _Guild_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(spotigraph_v1.GuildCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuildServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.spotigraph.v1.Guild/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuildServer).Create(ctx, req.(*spotigraph_v1.GuildCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Guild_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(spotigraph_v1.GuildGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuildServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.spotigraph.v1.Guild/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuildServer).Get(ctx, req.(*spotigraph_v1.GuildGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Guild_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(spotigraph_v1.GuildUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuildServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.spotigraph.v1.Guild/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuildServer).Update(ctx, req.(*spotigraph_v1.GuildUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Guild_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(spotigraph_v1.GuildGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuildServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.spotigraph.v1.Guild/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuildServer).Delete(ctx, req.(*spotigraph_v1.GuildGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Guild_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.spotigraph.v1.Guild",
	HandlerType: (*GuildServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Guild_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Guild_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Guild_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Guild_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/grpc/v1/spotigraph/pb/spotigraph.proto",
}

// Client API for Tribe service

type TribeClient interface {
	Create(ctx context.Context, in *spotigraph_v1.TribeCreateReq, opts ...grpc.CallOption) (*spotigraph_v1.SingleTribeRes, error)
	Get(ctx context.Context, in *spotigraph_v1.TribeGetReq, opts ...grpc.CallOption) (*spotigraph_v1.SingleTribeRes, error)
	Update(ctx context.Context, in *spotigraph_v1.TribeUpdateReq, opts ...grpc.CallOption) (*spotigraph_v1.SingleTribeRes, error)
	Delete(ctx context.Context, in *spotigraph_v1.TribeGetReq, opts ...grpc.CallOption) (*spotigraph_v1.EmptyRes, error)
}

type tribeClient struct {
	cc *grpc.ClientConn
}

func NewTribeClient(cc *grpc.ClientConn) TribeClient {
	return &tribeClient{cc}
}

func (c *tribeClient) Create(ctx context.Context, in *spotigraph_v1.TribeCreateReq, opts ...grpc.CallOption) (*spotigraph_v1.SingleTribeRes, error) {
	out := new(spotigraph_v1.SingleTribeRes)
	err := grpc.Invoke(ctx, "/grpc.spotigraph.v1.Tribe/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tribeClient) Get(ctx context.Context, in *spotigraph_v1.TribeGetReq, opts ...grpc.CallOption) (*spotigraph_v1.SingleTribeRes, error) {
	out := new(spotigraph_v1.SingleTribeRes)
	err := grpc.Invoke(ctx, "/grpc.spotigraph.v1.Tribe/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tribeClient) Update(ctx context.Context, in *spotigraph_v1.TribeUpdateReq, opts ...grpc.CallOption) (*spotigraph_v1.SingleTribeRes, error) {
	out := new(spotigraph_v1.SingleTribeRes)
	err := grpc.Invoke(ctx, "/grpc.spotigraph.v1.Tribe/Update", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tribeClient) Delete(ctx context.Context, in *spotigraph_v1.TribeGetReq, opts ...grpc.CallOption) (*spotigraph_v1.EmptyRes, error) {
	out := new(spotigraph_v1.EmptyRes)
	err := grpc.Invoke(ctx, "/grpc.spotigraph.v1.Tribe/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Tribe service

type TribeServer interface {
	Create(context.Context, *spotigraph_v1.TribeCreateReq) (*spotigraph_v1.SingleTribeRes, error)
	Get(context.Context, *spotigraph_v1.TribeGetReq) (*spotigraph_v1.SingleTribeRes, error)
	Update(context.Context, *spotigraph_v1.TribeUpdateReq) (*spotigraph_v1.SingleTribeRes, error)
	Delete(context.Context, *spotigraph_v1.TribeGetReq) (*spotigraph_v1.EmptyRes, error)
}

func RegisterTribeServer(s *grpc.Server, srv TribeServer) {
	s.RegisterService(&_Tribe_serviceDesc, srv)
}

func _Tribe_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(spotigraph_v1.TribeCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TribeServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.spotigraph.v1.Tribe/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TribeServer).Create(ctx, req.(*spotigraph_v1.TribeCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tribe_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(spotigraph_v1.TribeGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TribeServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.spotigraph.v1.Tribe/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TribeServer).Get(ctx, req.(*spotigraph_v1.TribeGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tribe_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(spotigraph_v1.TribeUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TribeServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.spotigraph.v1.Tribe/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TribeServer).Update(ctx, req.(*spotigraph_v1.TribeUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tribe_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(spotigraph_v1.TribeGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TribeServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.spotigraph.v1.Tribe/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TribeServer).Delete(ctx, req.(*spotigraph_v1.TribeGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Tribe_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.spotigraph.v1.Tribe",
	HandlerType: (*TribeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Tribe_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Tribe_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Tribe_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Tribe_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/grpc/v1/spotigraph/pb/spotigraph.proto",
}

func init() {
	proto.RegisterFile("pkg/grpc/v1/spotigraph/pb/spotigraph.proto", fileDescriptorSpotigraph)
}

var fileDescriptorSpotigraph = []byte{
	// 371 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x94, 0xcd, 0x4e, 0xf2, 0x40,
	0x18, 0x85, 0x13, 0xbe, 0xcf, 0x9a, 0xcc, 0x72, 0x36, 0x06, 0x84, 0xb0, 0xd7, 0x84, 0x06, 0xdc,
	0xfa, 0x17, 0x41, 0x9a, 0xb0, 0x2c, 0xb2, 0x71, 0xd7, 0xc2, 0x9b, 0xd2, 0x58, 0xed, 0x30, 0x1d,
	0x48, 0xbc, 0x0b, 0x97, 0x5e, 0x82, 0x97, 0x69, 0xe6, 0x6d, 0x33, 0xad, 0x93, 0xf9, 0x59, 0xb6,
	0xe7, 0xcc, 0xe9, 0xc9, 0xd3, 0x93, 0x21, 0x57, 0xec, 0x2d, 0x0b, 0x33, 0xce, 0xb6, 0xe1, 0x69,
	0x1a, 0x56, 0xac, 0x14, 0x79, 0xc6, 0x13, 0xb6, 0x0f, 0x59, 0xda, 0x79, 0x9a, 0x30, 0x5e, 0x8a,
	0x92, 0x52, 0xe9, 0x9b, 0x74, 0x5e, 0x9f, 0xa6, 0x83, 0x6b, 0x79, 0x1e, 0xe5, 0x6d, 0x59, 0x68,
	0x19, 0x7a, 0xc0, 0xec, 0xab, 0x47, 0xfe, 0x6f, 0x2a, 0xe0, 0x74, 0x41, 0x82, 0x39, 0x87, 0x44,
	0x00, 0x1d, 0xfe, 0xcd, 0x9b, 0x48, 0xb9, 0x96, 0x62, 0x38, 0x0c, 0x74, 0x75, 0x9d, 0x7f, 0x64,
	0x05, 0x48, 0x4f, 0x0c, 0x15, 0xbd, 0x27, 0xff, 0x22, 0x10, 0xb4, 0x6f, 0x88, 0x88, 0x40, 0xf8,
	0xcf, 0x2f, 0x48, 0xb0, 0x61, 0x3b, 0x5b, 0x8b, 0x5a, 0xf2, 0xa7, 0xdc, 0x92, 0x60, 0x01, 0x05,
	0x08, 0x70, 0x15, 0xb9, 0xd0, 0xa4, 0xe7, 0x77, 0x26, 0x3e, 0x63, 0xa8, 0x66, 0xdf, 0x3d, 0x72,
	0xb6, 0x3e, 0x1c, 0x93, 0x1d, 0x5d, 0x2a, 0x26, 0x23, 0xfd, 0x7b, 0x52, 0x6f, 0xa1, 0x8c, 0x8c,
	0x75, 0xd0, 0x24, 0xfb, 0x3c, 0xd6, 0x54, 0x06, 0xa6, 0x90, 0xa6, 0x8d, 0x27, 0x61, 0xa9, 0xb8,
	0x18, 0x9b, 0xb4, 0x60, 0x3c, 0x39, 0x77, 0x8a, 0x8c, 0xab, 0x8c, 0x15, 0xcd, 0x4f, 0x8f, 0x9c,
	0xcf, 0xf7, 0x09, 0x13, 0xc0, 0xe9, 0x4a, 0xc1, 0x19, 0x6b, 0xf6, 0xc6, 0xd1, 0xe2, 0x19, 0x1b,
	0x4b, 0x35, 0xb6, 0xfa, 0xb7, 0x23, 0xa0, 0xa1, 0x39, 0xa8, 0x69, 0xe5, 0x4d, 0x59, 0x29, 0x48,
	0x96, 0x46, 0x2d, 0x26, 0x6f, 0xd6, 0x83, 0x02, 0xe5, 0x2e, 0xe5, 0x5c, 0x51, 0x74, 0xcc, 0x0b,
	0xd7, 0x8a, 0x50, 0xf7, 0xad, 0x08, 0x4d, 0x8e, 0x15, 0xa1, 0xee, 0x5c, 0x91, 0x4a, 0xb0, 0xaf,
	0x08, 0x2d, 0xbe, 0x15, 0xa9, 0x1c, 0xfb, 0x8a, 0xba, 0x65, 0x9c, 0x68, 0x5e, 0x78, 0x9e, 0x82,
	0x03, 0x0d, 0xea, 0x3e, 0x34, 0x68, 0x72, 0xa0, 0x41, 0xdd, 0x89, 0x46, 0x25, 0xd8, 0xd1, 0xa0,
	0xc5, 0x87, 0x46, 0xe5, 0xd8, 0xd1, 0x74, 0xcb, 0xd8, 0xd0, 0x3c, 0x5d, 0xbe, 0xf6, 0xad, 0xb7,
	0x7f, 0x1a, 0xe0, 0x95, 0x7d, 0xf3, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x12, 0xf8, 0x7e, 0x78, 0x21,
	0x06, 0x00, 0x00,
}
