// MIT License
//
// Copyright (c) 2019 Thibault NORMAND
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

syntax = "proto3";

package grpc.spotigraph.v1;

option go_package = "pkg/grpc/v1/spotigraph/pb;pb";
option java_multiple_files = true;
option java_outer_classname = "MsgProto";
option java_package = "org.zenithar.spotigraph.protocol";

import "pkg/protocol/v1/spotigraph/spotigraph.proto";

// User API for user identiti management
service User {

  // Create an user identity in the system
  rpc Create(.spotigraph.v1.UserCreateReq) returns (.spotigraph.v1.SingleUserRes);

  rpc Get(.spotigraph.v1.UserGetReq) returns (.spotigraph.v1.SingleUserRes);
  rpc Update(.spotigraph.v1.UserUpdateReq) returns (.spotigraph.v1.SingleUserRes);
  rpc Delete(.spotigraph.v1.UserGetReq) returns (.spotigraph.v1.EmptyRes);
  rpc Search(.spotigraph.v1.UserSearchReq) returns (.spotigraph.v1.PaginatedUserRes);
}

service Squad {
  rpc Create(.spotigraph.v1.SquadCreateReq) returns (.spotigraph.v1.SingleSquadRes);
  rpc Get(.spotigraph.v1.SquadGetReq) returns (.spotigraph.v1.SingleSquadRes);
  rpc Update(.spotigraph.v1.SquadUpdateReq) returns (.spotigraph.v1.SingleSquadRes);
  rpc Delete(.spotigraph.v1.SquadGetReq) returns (.spotigraph.v1.EmptyRes);
  rpc Search(.spotigraph.v1.SquadSearchReq) returns (.spotigraph.v1.PaginatedSquadRes);
  rpc AddMembers(.spotigraph.v1.SquadMemberReq) returns (.spotigraph.v1.EmptyRes);
  rpc RemoveMembers(.spotigraph.v1.SquadMemberReq) returns (.spotigraph.v1.EmptyRes);
}

service Chapter {
  rpc Create(.spotigraph.v1.ChapterCreateReq) returns (.spotigraph.v1.SingleChapterRes);
  rpc Get(.spotigraph.v1.ChapterGetReq) returns (.spotigraph.v1.SingleChapterRes);
  rpc Update(.spotigraph.v1.ChapterUpdateReq) returns (.spotigraph.v1.SingleChapterRes);
  rpc Delete(.spotigraph.v1.ChapterGetReq) returns (.spotigraph.v1.EmptyRes);
  rpc Search(.spotigraph.v1.ChapterSearchReq) returns (.spotigraph.v1.PaginatedChapterRes);
}

service Guild {
  rpc Create(.spotigraph.v1.GuildCreateReq) returns (.spotigraph.v1.SingleGuildRes);
  rpc Get(.spotigraph.v1.GuildGetReq) returns (.spotigraph.v1.SingleGuildRes);
  rpc Update(.spotigraph.v1.GuildUpdateReq) returns (.spotigraph.v1.SingleGuildRes);
  rpc Delete(.spotigraph.v1.GuildGetReq) returns (.spotigraph.v1.EmptyRes);
  rpc Search(.spotigraph.v1.GuildSearchReq) returns (.spotigraph.v1.PaginatedGuildRes);
}

service Tribe {
  rpc Create(.spotigraph.v1.TribeCreateReq) returns (.spotigraph.v1.SingleTribeRes);
  rpc Get(.spotigraph.v1.TribeGetReq) returns (.spotigraph.v1.SingleTribeRes);
  rpc Update(.spotigraph.v1.TribeUpdateReq) returns (.spotigraph.v1.SingleTribeRes);
  rpc Delete(.spotigraph.v1.TribeGetReq) returns (.spotigraph.v1.EmptyRes);
  rpc Search(.spotigraph.v1.TribeSearchReq) returns (.spotigraph.v1.PaginatedTribeRes);
}

service Graph {
  rpc Expand(.spotigraph.v1.NodeInfoReq) returns (.spotigraph.v1.GraphRes);
}
