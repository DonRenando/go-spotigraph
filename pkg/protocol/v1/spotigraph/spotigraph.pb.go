// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pkg/protocol/v1/spotigraph/spotigraph.proto

/*
	Package spotigraph is a generated protocol buffer package.

	It is generated from these files:
		pkg/protocol/v1/spotigraph/spotigraph.proto

	It has these top-level messages:
		Error
		EmptyRes
		Domain
		Graph
		UserCreateReq
		UserGetReq
		UserUpdateReq
		SingleUserRes
		PaginatedUserRes
		UserSearchReq
		SquadCreateReq
		SquadGetReq
		SquadUpdateReq
		SingleSquadRes
		PaginatedSquadRes
		SquadSearchReq
		ChapterCreateReq
		ChapterGetReq
		ChapterUpdateReq
		SingleChapterRes
		PaginatedChapterRes
		ChapterSearchReq
		GuildCreateReq
		GuildGetReq
		GuildUpdateReq
		SingleGuildRes
		PaginatedGuildRes
		GuildSearchReq
		TribeCreateReq
		TribeGetReq
		TribeUpdateReq
		SingleTribeRes
		PaginatedTribeRes
		TribeSearchReq
		NodeInfoReq
		GraphRes
*/
package spotigraph

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "github.com/lyft/protoc-gen-validate/validate"
import google_protobuf3 "github.com/gogo/protobuf/types"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Type of Node supported
type Graph_Node_Type int32

const (
	Graph_Node_UNDEFINED Graph_Node_Type = 0
	Graph_Node_USER      Graph_Node_Type = 1
	Graph_Node_CHAPTER   Graph_Node_Type = 2
	Graph_Node_GUILD     Graph_Node_Type = 3
	Graph_Node_SQUAD     Graph_Node_Type = 4
	Graph_Node_TRIBE     Graph_Node_Type = 5
)

var Graph_Node_Type_name = map[int32]string{
	0: "UNDEFINED",
	1: "USER",
	2: "CHAPTER",
	3: "GUILD",
	4: "SQUAD",
	5: "TRIBE",
}
var Graph_Node_Type_value = map[string]int32{
	"UNDEFINED": 0,
	"USER":      1,
	"CHAPTER":   2,
	"GUILD":     3,
	"SQUAD":     4,
	"TRIBE":     5,
}

func (x Graph_Node_Type) String() string {
	return proto.EnumName(Graph_Node_Type_name, int32(x))
}
func (Graph_Node_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorSpotigraph, []int{3, 0, 0}
}

type Error struct {
	Code    uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *Error) Reset()                    { *m = Error{} }
func (m *Error) String() string            { return proto.CompactTextString(m) }
func (*Error) ProtoMessage()               {}
func (*Error) Descriptor() ([]byte, []int) { return fileDescriptorSpotigraph, []int{0} }

func (m *Error) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *Error) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type EmptyRes struct {
	Error *Error `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
}

func (m *EmptyRes) Reset()                    { *m = EmptyRes{} }
func (m *EmptyRes) String() string            { return proto.CompactTextString(m) }
func (*EmptyRes) ProtoMessage()               {}
func (*EmptyRes) Descriptor() ([]byte, []int) { return fileDescriptorSpotigraph, []int{1} }

func (m *EmptyRes) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

type Domain struct {
}

func (m *Domain) Reset()                    { *m = Domain{} }
func (m *Domain) String() string            { return proto.CompactTextString(m) }
func (*Domain) ProtoMessage()               {}
func (*Domain) Descriptor() ([]byte, []int) { return fileDescriptorSpotigraph, []int{2} }

type Domain_User struct {
	Id        string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Principal string `protobuf:"bytes,2,opt,name=principal,proto3" json:"principal,omitempty"`
	Urn       string `protobuf:"bytes,3,opt,name=urn,proto3" json:"urn,omitempty"`
}

func (m *Domain_User) Reset()                    { *m = Domain_User{} }
func (m *Domain_User) String() string            { return proto.CompactTextString(m) }
func (*Domain_User) ProtoMessage()               {}
func (*Domain_User) Descriptor() ([]byte, []int) { return fileDescriptorSpotigraph, []int{2, 0} }

func (m *Domain_User) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Domain_User) GetPrincipal() string {
	if m != nil {
		return m.Principal
	}
	return ""
}

func (m *Domain_User) GetUrn() string {
	if m != nil {
		return m.Urn
	}
	return ""
}

type Domain_Squad struct {
	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Urn  string `protobuf:"bytes,3,opt,name=urn,proto3" json:"urn,omitempty"`
}

func (m *Domain_Squad) Reset()                    { *m = Domain_Squad{} }
func (m *Domain_Squad) String() string            { return proto.CompactTextString(m) }
func (*Domain_Squad) ProtoMessage()               {}
func (*Domain_Squad) Descriptor() ([]byte, []int) { return fileDescriptorSpotigraph, []int{2, 1} }

func (m *Domain_Squad) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Domain_Squad) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Domain_Squad) GetUrn() string {
	if m != nil {
		return m.Urn
	}
	return ""
}

type Domain_Chapter struct {
	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Urn  string `protobuf:"bytes,3,opt,name=urn,proto3" json:"urn,omitempty"`
}

func (m *Domain_Chapter) Reset()                    { *m = Domain_Chapter{} }
func (m *Domain_Chapter) String() string            { return proto.CompactTextString(m) }
func (*Domain_Chapter) ProtoMessage()               {}
func (*Domain_Chapter) Descriptor() ([]byte, []int) { return fileDescriptorSpotigraph, []int{2, 2} }

func (m *Domain_Chapter) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Domain_Chapter) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Domain_Chapter) GetUrn() string {
	if m != nil {
		return m.Urn
	}
	return ""
}

type Domain_Guild struct {
	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Urn  string `protobuf:"bytes,3,opt,name=urn,proto3" json:"urn,omitempty"`
}

func (m *Domain_Guild) Reset()                    { *m = Domain_Guild{} }
func (m *Domain_Guild) String() string            { return proto.CompactTextString(m) }
func (*Domain_Guild) ProtoMessage()               {}
func (*Domain_Guild) Descriptor() ([]byte, []int) { return fileDescriptorSpotigraph, []int{2, 3} }

func (m *Domain_Guild) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Domain_Guild) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Domain_Guild) GetUrn() string {
	if m != nil {
		return m.Urn
	}
	return ""
}

type Domain_Tribe struct {
	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Urn  string `protobuf:"bytes,3,opt,name=urn,proto3" json:"urn,omitempty"`
}

func (m *Domain_Tribe) Reset()                    { *m = Domain_Tribe{} }
func (m *Domain_Tribe) String() string            { return proto.CompactTextString(m) }
func (*Domain_Tribe) ProtoMessage()               {}
func (*Domain_Tribe) Descriptor() ([]byte, []int) { return fileDescriptorSpotigraph, []int{2, 4} }

func (m *Domain_Tribe) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Domain_Tribe) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Domain_Tribe) GetUrn() string {
	if m != nil {
		return m.Urn
	}
	return ""
}

type Graph struct {
	// Nodes of the graph
	Nodes []*Graph_Node `protobuf:"bytes,1,rep,name=nodes" json:"nodes,omitempty"`
	// Edges of the graph
	Edges []*Graph_Edge `protobuf:"bytes,2,rep,name=edges" json:"edges,omitempty"`
	// Additional properties
	Properties map[string]string `protobuf:"bytes,3,rep,name=properties" json:"properties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *Graph) Reset()                    { *m = Graph{} }
func (m *Graph) String() string            { return proto.CompactTextString(m) }
func (*Graph) ProtoMessage()               {}
func (*Graph) Descriptor() ([]byte, []int) { return fileDescriptorSpotigraph, []int{3} }

func (m *Graph) GetNodes() []*Graph_Node {
	if m != nil {
		return m.Nodes
	}
	return nil
}

func (m *Graph) GetEdges() []*Graph_Edge {
	if m != nil {
		return m.Edges
	}
	return nil
}

func (m *Graph) GetProperties() map[string]string {
	if m != nil {
		return m.Properties
	}
	return nil
}

type Graph_Node struct {
	// URN exported from the entity
	Urn string `protobuf:"bytes,1,opt,name=urn,proto3" json:"urn,omitempty"`
	// Type of the node
	Type Graph_Node_Type `protobuf:"varint,2,opt,name=type,proto3,enum=spotigraph.v1.Graph_Node_Type" json:"type,omitempty"`
	// Hold entity according previous type
	//
	// Types that are valid to be assigned to Entity:
	//	*Graph_Node_User
	//	*Graph_Node_Chapter
	//	*Graph_Node_Guild
	//	*Graph_Node_Squad
	//	*Graph_Node_Tribe
	Entity isGraph_Node_Entity `protobuf_oneof:"entity"`
	// Additional properties
	Properties map[string]string `protobuf:"bytes,8,rep,name=properties" json:"properties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *Graph_Node) Reset()                    { *m = Graph_Node{} }
func (m *Graph_Node) String() string            { return proto.CompactTextString(m) }
func (*Graph_Node) ProtoMessage()               {}
func (*Graph_Node) Descriptor() ([]byte, []int) { return fileDescriptorSpotigraph, []int{3, 0} }

type isGraph_Node_Entity interface {
	isGraph_Node_Entity()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type Graph_Node_User struct {
	User *Domain_User `protobuf:"bytes,3,opt,name=user,oneof"`
}
type Graph_Node_Chapter struct {
	Chapter *Domain_Chapter `protobuf:"bytes,4,opt,name=chapter,oneof"`
}
type Graph_Node_Guild struct {
	Guild *Domain_Guild `protobuf:"bytes,5,opt,name=guild,oneof"`
}
type Graph_Node_Squad struct {
	Squad *Domain_Squad `protobuf:"bytes,6,opt,name=squad,oneof"`
}
type Graph_Node_Tribe struct {
	Tribe *Domain_Tribe `protobuf:"bytes,7,opt,name=tribe,oneof"`
}

func (*Graph_Node_User) isGraph_Node_Entity()    {}
func (*Graph_Node_Chapter) isGraph_Node_Entity() {}
func (*Graph_Node_Guild) isGraph_Node_Entity()   {}
func (*Graph_Node_Squad) isGraph_Node_Entity()   {}
func (*Graph_Node_Tribe) isGraph_Node_Entity()   {}

func (m *Graph_Node) GetEntity() isGraph_Node_Entity {
	if m != nil {
		return m.Entity
	}
	return nil
}

func (m *Graph_Node) GetUrn() string {
	if m != nil {
		return m.Urn
	}
	return ""
}

func (m *Graph_Node) GetType() Graph_Node_Type {
	if m != nil {
		return m.Type
	}
	return Graph_Node_UNDEFINED
}

func (m *Graph_Node) GetUser() *Domain_User {
	if x, ok := m.GetEntity().(*Graph_Node_User); ok {
		return x.User
	}
	return nil
}

func (m *Graph_Node) GetChapter() *Domain_Chapter {
	if x, ok := m.GetEntity().(*Graph_Node_Chapter); ok {
		return x.Chapter
	}
	return nil
}

func (m *Graph_Node) GetGuild() *Domain_Guild {
	if x, ok := m.GetEntity().(*Graph_Node_Guild); ok {
		return x.Guild
	}
	return nil
}

func (m *Graph_Node) GetSquad() *Domain_Squad {
	if x, ok := m.GetEntity().(*Graph_Node_Squad); ok {
		return x.Squad
	}
	return nil
}

func (m *Graph_Node) GetTribe() *Domain_Tribe {
	if x, ok := m.GetEntity().(*Graph_Node_Tribe); ok {
		return x.Tribe
	}
	return nil
}

func (m *Graph_Node) GetProperties() map[string]string {
	if m != nil {
		return m.Properties
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Graph_Node) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Graph_Node_OneofMarshaler, _Graph_Node_OneofUnmarshaler, _Graph_Node_OneofSizer, []interface{}{
		(*Graph_Node_User)(nil),
		(*Graph_Node_Chapter)(nil),
		(*Graph_Node_Guild)(nil),
		(*Graph_Node_Squad)(nil),
		(*Graph_Node_Tribe)(nil),
	}
}

func _Graph_Node_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Graph_Node)
	// entity
	switch x := m.Entity.(type) {
	case *Graph_Node_User:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.User); err != nil {
			return err
		}
	case *Graph_Node_Chapter:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Chapter); err != nil {
			return err
		}
	case *Graph_Node_Guild:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Guild); err != nil {
			return err
		}
	case *Graph_Node_Squad:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Squad); err != nil {
			return err
		}
	case *Graph_Node_Tribe:
		_ = b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Tribe); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Graph_Node.Entity has unexpected type %T", x)
	}
	return nil
}

func _Graph_Node_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Graph_Node)
	switch tag {
	case 3: // entity.user
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Domain_User)
		err := b.DecodeMessage(msg)
		m.Entity = &Graph_Node_User{msg}
		return true, err
	case 4: // entity.chapter
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Domain_Chapter)
		err := b.DecodeMessage(msg)
		m.Entity = &Graph_Node_Chapter{msg}
		return true, err
	case 5: // entity.guild
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Domain_Guild)
		err := b.DecodeMessage(msg)
		m.Entity = &Graph_Node_Guild{msg}
		return true, err
	case 6: // entity.squad
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Domain_Squad)
		err := b.DecodeMessage(msg)
		m.Entity = &Graph_Node_Squad{msg}
		return true, err
	case 7: // entity.tribe
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Domain_Tribe)
		err := b.DecodeMessage(msg)
		m.Entity = &Graph_Node_Tribe{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Graph_Node_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Graph_Node)
	// entity
	switch x := m.Entity.(type) {
	case *Graph_Node_User:
		s := proto.Size(x.User)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Graph_Node_Chapter:
		s := proto.Size(x.Chapter)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Graph_Node_Guild:
		s := proto.Size(x.Guild)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Graph_Node_Squad:
		s := proto.Size(x.Squad)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Graph_Node_Tribe:
		s := proto.Size(x.Tribe)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type Graph_Edge struct {
	// Source URN
	Source string `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	// Destination URN
	Destination string `protobuf:"bytes,2,opt,name=destination,proto3" json:"destination,omitempty"`
	// Additional properties
	Properties map[string]string `protobuf:"bytes,3,rep,name=properties" json:"properties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *Graph_Edge) Reset()                    { *m = Graph_Edge{} }
func (m *Graph_Edge) String() string            { return proto.CompactTextString(m) }
func (*Graph_Edge) ProtoMessage()               {}
func (*Graph_Edge) Descriptor() ([]byte, []int) { return fileDescriptorSpotigraph, []int{3, 1} }

func (m *Graph_Edge) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *Graph_Edge) GetDestination() string {
	if m != nil {
		return m.Destination
	}
	return ""
}

func (m *Graph_Edge) GetProperties() map[string]string {
	if m != nil {
		return m.Properties
	}
	return nil
}

type UserCreateReq struct {
	Principal string `protobuf:"bytes,1,opt,name=principal,proto3" json:"principal,omitempty"`
}

func (m *UserCreateReq) Reset()                    { *m = UserCreateReq{} }
func (m *UserCreateReq) String() string            { return proto.CompactTextString(m) }
func (*UserCreateReq) ProtoMessage()               {}
func (*UserCreateReq) Descriptor() ([]byte, []int) { return fileDescriptorSpotigraph, []int{4} }

func (m *UserCreateReq) GetPrincipal() string {
	if m != nil {
		return m.Principal
	}
	return ""
}

type UserGetReq struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *UserGetReq) Reset()                    { *m = UserGetReq{} }
func (m *UserGetReq) String() string            { return proto.CompactTextString(m) }
func (*UserGetReq) ProtoMessage()               {}
func (*UserGetReq) Descriptor() ([]byte, []int) { return fileDescriptorSpotigraph, []int{5} }

func (m *UserGetReq) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type UserUpdateReq struct {
	Id        string                        `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Principal *google_protobuf3.StringValue `protobuf:"bytes,2,opt,name=principal" json:"principal,omitempty"`
}

func (m *UserUpdateReq) Reset()                    { *m = UserUpdateReq{} }
func (m *UserUpdateReq) String() string            { return proto.CompactTextString(m) }
func (*UserUpdateReq) ProtoMessage()               {}
func (*UserUpdateReq) Descriptor() ([]byte, []int) { return fileDescriptorSpotigraph, []int{6} }

func (m *UserUpdateReq) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *UserUpdateReq) GetPrincipal() *google_protobuf3.StringValue {
	if m != nil {
		return m.Principal
	}
	return nil
}

type SingleUserRes struct {
	Error  *Error       `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	Entity *Domain_User `protobuf:"bytes,2,opt,name=entity" json:"entity,omitempty"`
}

func (m *SingleUserRes) Reset()                    { *m = SingleUserRes{} }
func (m *SingleUserRes) String() string            { return proto.CompactTextString(m) }
func (*SingleUserRes) ProtoMessage()               {}
func (*SingleUserRes) Descriptor() ([]byte, []int) { return fileDescriptorSpotigraph, []int{7} }

func (m *SingleUserRes) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *SingleUserRes) GetEntity() *Domain_User {
	if m != nil {
		return m.Entity
	}
	return nil
}

type PaginatedUserRes struct {
	Error       *Error         `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	Total       uint32         `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	PerPage     uint32         `protobuf:"varint,3,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
	Count       uint32         `protobuf:"varint,4,opt,name=count,proto3" json:"count,omitempty"`
	CurrentPage uint32         `protobuf:"varint,5,opt,name=current_page,json=currentPage,proto3" json:"current_page,omitempty"`
	Members     []*Domain_User `protobuf:"bytes,6,rep,name=members" json:"members,omitempty"`
}

func (m *PaginatedUserRes) Reset()                    { *m = PaginatedUserRes{} }
func (m *PaginatedUserRes) String() string            { return proto.CompactTextString(m) }
func (*PaginatedUserRes) ProtoMessage()               {}
func (*PaginatedUserRes) Descriptor() ([]byte, []int) { return fileDescriptorSpotigraph, []int{8} }

func (m *PaginatedUserRes) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *PaginatedUserRes) GetTotal() uint32 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *PaginatedUserRes) GetPerPage() uint32 {
	if m != nil {
		return m.PerPage
	}
	return 0
}

func (m *PaginatedUserRes) GetCount() uint32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *PaginatedUserRes) GetCurrentPage() uint32 {
	if m != nil {
		return m.CurrentPage
	}
	return 0
}

func (m *PaginatedUserRes) GetMembers() []*Domain_User {
	if m != nil {
		return m.Members
	}
	return nil
}

type UserSearchReq struct {
	Page      uint32                        `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	PerPage   uint32                        `protobuf:"varint,2,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
	Sorts     []string                      `protobuf:"bytes,3,rep,name=sorts" json:"sorts,omitempty"`
	UserId    *google_protobuf3.StringValue `protobuf:"bytes,4,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	Principal *google_protobuf3.StringValue `protobuf:"bytes,5,opt,name=principal" json:"principal,omitempty"`
}

func (m *UserSearchReq) Reset()                    { *m = UserSearchReq{} }
func (m *UserSearchReq) String() string            { return proto.CompactTextString(m) }
func (*UserSearchReq) ProtoMessage()               {}
func (*UserSearchReq) Descriptor() ([]byte, []int) { return fileDescriptorSpotigraph, []int{9} }

func (m *UserSearchReq) GetPage() uint32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *UserSearchReq) GetPerPage() uint32 {
	if m != nil {
		return m.PerPage
	}
	return 0
}

func (m *UserSearchReq) GetSorts() []string {
	if m != nil {
		return m.Sorts
	}
	return nil
}

func (m *UserSearchReq) GetUserId() *google_protobuf3.StringValue {
	if m != nil {
		return m.UserId
	}
	return nil
}

func (m *UserSearchReq) GetPrincipal() *google_protobuf3.StringValue {
	if m != nil {
		return m.Principal
	}
	return nil
}

type SquadCreateReq struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *SquadCreateReq) Reset()                    { *m = SquadCreateReq{} }
func (m *SquadCreateReq) String() string            { return proto.CompactTextString(m) }
func (*SquadCreateReq) ProtoMessage()               {}
func (*SquadCreateReq) Descriptor() ([]byte, []int) { return fileDescriptorSpotigraph, []int{10} }

func (m *SquadCreateReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type SquadGetReq struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *SquadGetReq) Reset()                    { *m = SquadGetReq{} }
func (m *SquadGetReq) String() string            { return proto.CompactTextString(m) }
func (*SquadGetReq) ProtoMessage()               {}
func (*SquadGetReq) Descriptor() ([]byte, []int) { return fileDescriptorSpotigraph, []int{11} }

func (m *SquadGetReq) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type SquadUpdateReq struct {
	Id   string                        `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name *google_protobuf3.StringValue `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (m *SquadUpdateReq) Reset()                    { *m = SquadUpdateReq{} }
func (m *SquadUpdateReq) String() string            { return proto.CompactTextString(m) }
func (*SquadUpdateReq) ProtoMessage()               {}
func (*SquadUpdateReq) Descriptor() ([]byte, []int) { return fileDescriptorSpotigraph, []int{12} }

func (m *SquadUpdateReq) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *SquadUpdateReq) GetName() *google_protobuf3.StringValue {
	if m != nil {
		return m.Name
	}
	return nil
}

type SingleSquadRes struct {
	Error  *Error        `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	Entity *Domain_Squad `protobuf:"bytes,2,opt,name=entity" json:"entity,omitempty"`
}

func (m *SingleSquadRes) Reset()                    { *m = SingleSquadRes{} }
func (m *SingleSquadRes) String() string            { return proto.CompactTextString(m) }
func (*SingleSquadRes) ProtoMessage()               {}
func (*SingleSquadRes) Descriptor() ([]byte, []int) { return fileDescriptorSpotigraph, []int{13} }

func (m *SingleSquadRes) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *SingleSquadRes) GetEntity() *Domain_Squad {
	if m != nil {
		return m.Entity
	}
	return nil
}

type PaginatedSquadRes struct {
	Error       *Error          `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	Total       uint32          `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	PerPage     uint32          `protobuf:"varint,3,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
	Count       uint32          `protobuf:"varint,4,opt,name=count,proto3" json:"count,omitempty"`
	CurrentPage uint32          `protobuf:"varint,5,opt,name=current_page,json=currentPage,proto3" json:"current_page,omitempty"`
	Members     []*Domain_Squad `protobuf:"bytes,6,rep,name=members" json:"members,omitempty"`
}

func (m *PaginatedSquadRes) Reset()                    { *m = PaginatedSquadRes{} }
func (m *PaginatedSquadRes) String() string            { return proto.CompactTextString(m) }
func (*PaginatedSquadRes) ProtoMessage()               {}
func (*PaginatedSquadRes) Descriptor() ([]byte, []int) { return fileDescriptorSpotigraph, []int{14} }

func (m *PaginatedSquadRes) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *PaginatedSquadRes) GetTotal() uint32 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *PaginatedSquadRes) GetPerPage() uint32 {
	if m != nil {
		return m.PerPage
	}
	return 0
}

func (m *PaginatedSquadRes) GetCount() uint32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *PaginatedSquadRes) GetCurrentPage() uint32 {
	if m != nil {
		return m.CurrentPage
	}
	return 0
}

func (m *PaginatedSquadRes) GetMembers() []*Domain_Squad {
	if m != nil {
		return m.Members
	}
	return nil
}

type SquadSearchReq struct {
	Page    uint32                        `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	PerPage uint32                        `protobuf:"varint,2,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
	Sorts   []string                      `protobuf:"bytes,3,rep,name=sorts" json:"sorts,omitempty"`
	SquadId *google_protobuf3.StringValue `protobuf:"bytes,4,opt,name=squad_id,json=squadId" json:"squad_id,omitempty"`
	Name    *google_protobuf3.StringValue `protobuf:"bytes,5,opt,name=name" json:"name,omitempty"`
	Slug    *google_protobuf3.StringValue `protobuf:"bytes,6,opt,name=slug" json:"slug,omitempty"`
}

func (m *SquadSearchReq) Reset()                    { *m = SquadSearchReq{} }
func (m *SquadSearchReq) String() string            { return proto.CompactTextString(m) }
func (*SquadSearchReq) ProtoMessage()               {}
func (*SquadSearchReq) Descriptor() ([]byte, []int) { return fileDescriptorSpotigraph, []int{15} }

func (m *SquadSearchReq) GetPage() uint32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *SquadSearchReq) GetPerPage() uint32 {
	if m != nil {
		return m.PerPage
	}
	return 0
}

func (m *SquadSearchReq) GetSorts() []string {
	if m != nil {
		return m.Sorts
	}
	return nil
}

func (m *SquadSearchReq) GetSquadId() *google_protobuf3.StringValue {
	if m != nil {
		return m.SquadId
	}
	return nil
}

func (m *SquadSearchReq) GetName() *google_protobuf3.StringValue {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *SquadSearchReq) GetSlug() *google_protobuf3.StringValue {
	if m != nil {
		return m.Slug
	}
	return nil
}

type ChapterCreateReq struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *ChapterCreateReq) Reset()                    { *m = ChapterCreateReq{} }
func (m *ChapterCreateReq) String() string            { return proto.CompactTextString(m) }
func (*ChapterCreateReq) ProtoMessage()               {}
func (*ChapterCreateReq) Descriptor() ([]byte, []int) { return fileDescriptorSpotigraph, []int{16} }

func (m *ChapterCreateReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type ChapterGetReq struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *ChapterGetReq) Reset()                    { *m = ChapterGetReq{} }
func (m *ChapterGetReq) String() string            { return proto.CompactTextString(m) }
func (*ChapterGetReq) ProtoMessage()               {}
func (*ChapterGetReq) Descriptor() ([]byte, []int) { return fileDescriptorSpotigraph, []int{17} }

func (m *ChapterGetReq) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type ChapterUpdateReq struct {
	Id   string                        `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name *google_protobuf3.StringValue `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (m *ChapterUpdateReq) Reset()                    { *m = ChapterUpdateReq{} }
func (m *ChapterUpdateReq) String() string            { return proto.CompactTextString(m) }
func (*ChapterUpdateReq) ProtoMessage()               {}
func (*ChapterUpdateReq) Descriptor() ([]byte, []int) { return fileDescriptorSpotigraph, []int{18} }

func (m *ChapterUpdateReq) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ChapterUpdateReq) GetName() *google_protobuf3.StringValue {
	if m != nil {
		return m.Name
	}
	return nil
}

type SingleChapterRes struct {
	Error  *Error          `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	Entity *Domain_Chapter `protobuf:"bytes,2,opt,name=entity" json:"entity,omitempty"`
}

func (m *SingleChapterRes) Reset()                    { *m = SingleChapterRes{} }
func (m *SingleChapterRes) String() string            { return proto.CompactTextString(m) }
func (*SingleChapterRes) ProtoMessage()               {}
func (*SingleChapterRes) Descriptor() ([]byte, []int) { return fileDescriptorSpotigraph, []int{19} }

func (m *SingleChapterRes) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *SingleChapterRes) GetEntity() *Domain_Chapter {
	if m != nil {
		return m.Entity
	}
	return nil
}

type PaginatedChapterRes struct {
	Error       *Error            `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	Total       uint32            `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	PerPage     uint32            `protobuf:"varint,3,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
	Count       uint32            `protobuf:"varint,4,opt,name=count,proto3" json:"count,omitempty"`
	CurrentPage uint32            `protobuf:"varint,5,opt,name=current_page,json=currentPage,proto3" json:"current_page,omitempty"`
	Members     []*Domain_Chapter `protobuf:"bytes,6,rep,name=members" json:"members,omitempty"`
}

func (m *PaginatedChapterRes) Reset()                    { *m = PaginatedChapterRes{} }
func (m *PaginatedChapterRes) String() string            { return proto.CompactTextString(m) }
func (*PaginatedChapterRes) ProtoMessage()               {}
func (*PaginatedChapterRes) Descriptor() ([]byte, []int) { return fileDescriptorSpotigraph, []int{20} }

func (m *PaginatedChapterRes) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *PaginatedChapterRes) GetTotal() uint32 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *PaginatedChapterRes) GetPerPage() uint32 {
	if m != nil {
		return m.PerPage
	}
	return 0
}

func (m *PaginatedChapterRes) GetCount() uint32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *PaginatedChapterRes) GetCurrentPage() uint32 {
	if m != nil {
		return m.CurrentPage
	}
	return 0
}

func (m *PaginatedChapterRes) GetMembers() []*Domain_Chapter {
	if m != nil {
		return m.Members
	}
	return nil
}

type ChapterSearchReq struct {
	Page      uint32                        `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	PerPage   uint32                        `protobuf:"varint,2,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
	Sorts     []string                      `protobuf:"bytes,3,rep,name=sorts" json:"sorts,omitempty"`
	ChapterId *google_protobuf3.StringValue `protobuf:"bytes,4,opt,name=chapter_id,json=chapterId" json:"chapter_id,omitempty"`
	Name      *google_protobuf3.StringValue `protobuf:"bytes,5,opt,name=name" json:"name,omitempty"`
	Slug      *google_protobuf3.StringValue `protobuf:"bytes,6,opt,name=slug" json:"slug,omitempty"`
}

func (m *ChapterSearchReq) Reset()                    { *m = ChapterSearchReq{} }
func (m *ChapterSearchReq) String() string            { return proto.CompactTextString(m) }
func (*ChapterSearchReq) ProtoMessage()               {}
func (*ChapterSearchReq) Descriptor() ([]byte, []int) { return fileDescriptorSpotigraph, []int{21} }

func (m *ChapterSearchReq) GetPage() uint32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *ChapterSearchReq) GetPerPage() uint32 {
	if m != nil {
		return m.PerPage
	}
	return 0
}

func (m *ChapterSearchReq) GetSorts() []string {
	if m != nil {
		return m.Sorts
	}
	return nil
}

func (m *ChapterSearchReq) GetChapterId() *google_protobuf3.StringValue {
	if m != nil {
		return m.ChapterId
	}
	return nil
}

func (m *ChapterSearchReq) GetName() *google_protobuf3.StringValue {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *ChapterSearchReq) GetSlug() *google_protobuf3.StringValue {
	if m != nil {
		return m.Slug
	}
	return nil
}

type GuildCreateReq struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *GuildCreateReq) Reset()                    { *m = GuildCreateReq{} }
func (m *GuildCreateReq) String() string            { return proto.CompactTextString(m) }
func (*GuildCreateReq) ProtoMessage()               {}
func (*GuildCreateReq) Descriptor() ([]byte, []int) { return fileDescriptorSpotigraph, []int{22} }

func (m *GuildCreateReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type GuildGetReq struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *GuildGetReq) Reset()                    { *m = GuildGetReq{} }
func (m *GuildGetReq) String() string            { return proto.CompactTextString(m) }
func (*GuildGetReq) ProtoMessage()               {}
func (*GuildGetReq) Descriptor() ([]byte, []int) { return fileDescriptorSpotigraph, []int{23} }

func (m *GuildGetReq) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type GuildUpdateReq struct {
	Id   string                        `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name *google_protobuf3.StringValue `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (m *GuildUpdateReq) Reset()                    { *m = GuildUpdateReq{} }
func (m *GuildUpdateReq) String() string            { return proto.CompactTextString(m) }
func (*GuildUpdateReq) ProtoMessage()               {}
func (*GuildUpdateReq) Descriptor() ([]byte, []int) { return fileDescriptorSpotigraph, []int{24} }

func (m *GuildUpdateReq) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *GuildUpdateReq) GetName() *google_protobuf3.StringValue {
	if m != nil {
		return m.Name
	}
	return nil
}

type SingleGuildRes struct {
	Error  *Error        `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	Entity *Domain_Guild `protobuf:"bytes,2,opt,name=entity" json:"entity,omitempty"`
}

func (m *SingleGuildRes) Reset()                    { *m = SingleGuildRes{} }
func (m *SingleGuildRes) String() string            { return proto.CompactTextString(m) }
func (*SingleGuildRes) ProtoMessage()               {}
func (*SingleGuildRes) Descriptor() ([]byte, []int) { return fileDescriptorSpotigraph, []int{25} }

func (m *SingleGuildRes) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *SingleGuildRes) GetEntity() *Domain_Guild {
	if m != nil {
		return m.Entity
	}
	return nil
}

type PaginatedGuildRes struct {
	Error       *Error          `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	Total       uint32          `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	PerPage     uint32          `protobuf:"varint,3,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
	Count       uint32          `protobuf:"varint,4,opt,name=count,proto3" json:"count,omitempty"`
	CurrentPage uint32          `protobuf:"varint,5,opt,name=current_page,json=currentPage,proto3" json:"current_page,omitempty"`
	Members     []*Domain_Guild `protobuf:"bytes,6,rep,name=members" json:"members,omitempty"`
}

func (m *PaginatedGuildRes) Reset()                    { *m = PaginatedGuildRes{} }
func (m *PaginatedGuildRes) String() string            { return proto.CompactTextString(m) }
func (*PaginatedGuildRes) ProtoMessage()               {}
func (*PaginatedGuildRes) Descriptor() ([]byte, []int) { return fileDescriptorSpotigraph, []int{26} }

func (m *PaginatedGuildRes) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *PaginatedGuildRes) GetTotal() uint32 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *PaginatedGuildRes) GetPerPage() uint32 {
	if m != nil {
		return m.PerPage
	}
	return 0
}

func (m *PaginatedGuildRes) GetCount() uint32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *PaginatedGuildRes) GetCurrentPage() uint32 {
	if m != nil {
		return m.CurrentPage
	}
	return 0
}

func (m *PaginatedGuildRes) GetMembers() []*Domain_Guild {
	if m != nil {
		return m.Members
	}
	return nil
}

type GuildSearchReq struct {
	Page    uint32                        `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	PerPage uint32                        `protobuf:"varint,2,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
	Sorts   []string                      `protobuf:"bytes,3,rep,name=sorts" json:"sorts,omitempty"`
	GuildId *google_protobuf3.StringValue `protobuf:"bytes,4,opt,name=guild_id,json=guildId" json:"guild_id,omitempty"`
	Name    *google_protobuf3.StringValue `protobuf:"bytes,5,opt,name=name" json:"name,omitempty"`
	Slug    *google_protobuf3.StringValue `protobuf:"bytes,6,opt,name=slug" json:"slug,omitempty"`
}

func (m *GuildSearchReq) Reset()                    { *m = GuildSearchReq{} }
func (m *GuildSearchReq) String() string            { return proto.CompactTextString(m) }
func (*GuildSearchReq) ProtoMessage()               {}
func (*GuildSearchReq) Descriptor() ([]byte, []int) { return fileDescriptorSpotigraph, []int{27} }

func (m *GuildSearchReq) GetPage() uint32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *GuildSearchReq) GetPerPage() uint32 {
	if m != nil {
		return m.PerPage
	}
	return 0
}

func (m *GuildSearchReq) GetSorts() []string {
	if m != nil {
		return m.Sorts
	}
	return nil
}

func (m *GuildSearchReq) GetGuildId() *google_protobuf3.StringValue {
	if m != nil {
		return m.GuildId
	}
	return nil
}

func (m *GuildSearchReq) GetName() *google_protobuf3.StringValue {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *GuildSearchReq) GetSlug() *google_protobuf3.StringValue {
	if m != nil {
		return m.Slug
	}
	return nil
}

type TribeCreateReq struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *TribeCreateReq) Reset()                    { *m = TribeCreateReq{} }
func (m *TribeCreateReq) String() string            { return proto.CompactTextString(m) }
func (*TribeCreateReq) ProtoMessage()               {}
func (*TribeCreateReq) Descriptor() ([]byte, []int) { return fileDescriptorSpotigraph, []int{28} }

func (m *TribeCreateReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type TribeGetReq struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *TribeGetReq) Reset()                    { *m = TribeGetReq{} }
func (m *TribeGetReq) String() string            { return proto.CompactTextString(m) }
func (*TribeGetReq) ProtoMessage()               {}
func (*TribeGetReq) Descriptor() ([]byte, []int) { return fileDescriptorSpotigraph, []int{29} }

func (m *TribeGetReq) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type TribeUpdateReq struct {
	Id   string                        `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name *google_protobuf3.StringValue `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (m *TribeUpdateReq) Reset()                    { *m = TribeUpdateReq{} }
func (m *TribeUpdateReq) String() string            { return proto.CompactTextString(m) }
func (*TribeUpdateReq) ProtoMessage()               {}
func (*TribeUpdateReq) Descriptor() ([]byte, []int) { return fileDescriptorSpotigraph, []int{30} }

func (m *TribeUpdateReq) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *TribeUpdateReq) GetName() *google_protobuf3.StringValue {
	if m != nil {
		return m.Name
	}
	return nil
}

type SingleTribeRes struct {
	Error  *Error        `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	Entity *Domain_Tribe `protobuf:"bytes,2,opt,name=entity" json:"entity,omitempty"`
}

func (m *SingleTribeRes) Reset()                    { *m = SingleTribeRes{} }
func (m *SingleTribeRes) String() string            { return proto.CompactTextString(m) }
func (*SingleTribeRes) ProtoMessage()               {}
func (*SingleTribeRes) Descriptor() ([]byte, []int) { return fileDescriptorSpotigraph, []int{31} }

func (m *SingleTribeRes) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *SingleTribeRes) GetEntity() *Domain_Tribe {
	if m != nil {
		return m.Entity
	}
	return nil
}

type PaginatedTribeRes struct {
	Error       *Error          `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	Total       uint32          `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	PerPage     uint32          `protobuf:"varint,3,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
	Count       uint32          `protobuf:"varint,4,opt,name=count,proto3" json:"count,omitempty"`
	CurrentPage uint32          `protobuf:"varint,5,opt,name=current_page,json=currentPage,proto3" json:"current_page,omitempty"`
	Members     []*Domain_Tribe `protobuf:"bytes,6,rep,name=members" json:"members,omitempty"`
}

func (m *PaginatedTribeRes) Reset()                    { *m = PaginatedTribeRes{} }
func (m *PaginatedTribeRes) String() string            { return proto.CompactTextString(m) }
func (*PaginatedTribeRes) ProtoMessage()               {}
func (*PaginatedTribeRes) Descriptor() ([]byte, []int) { return fileDescriptorSpotigraph, []int{32} }

func (m *PaginatedTribeRes) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *PaginatedTribeRes) GetTotal() uint32 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *PaginatedTribeRes) GetPerPage() uint32 {
	if m != nil {
		return m.PerPage
	}
	return 0
}

func (m *PaginatedTribeRes) GetCount() uint32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *PaginatedTribeRes) GetCurrentPage() uint32 {
	if m != nil {
		return m.CurrentPage
	}
	return 0
}

func (m *PaginatedTribeRes) GetMembers() []*Domain_Tribe {
	if m != nil {
		return m.Members
	}
	return nil
}

type TribeSearchReq struct {
	Page    uint32                        `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	PerPage uint32                        `protobuf:"varint,2,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
	Sorts   []string                      `protobuf:"bytes,3,rep,name=sorts" json:"sorts,omitempty"`
	TribeId *google_protobuf3.StringValue `protobuf:"bytes,4,opt,name=tribe_id,json=tribeId" json:"tribe_id,omitempty"`
	Name    *google_protobuf3.StringValue `protobuf:"bytes,5,opt,name=name" json:"name,omitempty"`
	Slug    *google_protobuf3.StringValue `protobuf:"bytes,6,opt,name=slug" json:"slug,omitempty"`
}

func (m *TribeSearchReq) Reset()                    { *m = TribeSearchReq{} }
func (m *TribeSearchReq) String() string            { return proto.CompactTextString(m) }
func (*TribeSearchReq) ProtoMessage()               {}
func (*TribeSearchReq) Descriptor() ([]byte, []int) { return fileDescriptorSpotigraph, []int{33} }

func (m *TribeSearchReq) GetPage() uint32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *TribeSearchReq) GetPerPage() uint32 {
	if m != nil {
		return m.PerPage
	}
	return 0
}

func (m *TribeSearchReq) GetSorts() []string {
	if m != nil {
		return m.Sorts
	}
	return nil
}

func (m *TribeSearchReq) GetTribeId() *google_protobuf3.StringValue {
	if m != nil {
		return m.TribeId
	}
	return nil
}

func (m *TribeSearchReq) GetName() *google_protobuf3.StringValue {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *TribeSearchReq) GetSlug() *google_protobuf3.StringValue {
	if m != nil {
		return m.Slug
	}
	return nil
}

type NodeInfoReq struct {
	Urn string `protobuf:"bytes,1,opt,name=urn,proto3" json:"urn,omitempty"`
}

func (m *NodeInfoReq) Reset()                    { *m = NodeInfoReq{} }
func (m *NodeInfoReq) String() string            { return proto.CompactTextString(m) }
func (*NodeInfoReq) ProtoMessage()               {}
func (*NodeInfoReq) Descriptor() ([]byte, []int) { return fileDescriptorSpotigraph, []int{34} }

func (m *NodeInfoReq) GetUrn() string {
	if m != nil {
		return m.Urn
	}
	return ""
}

type GraphRes struct {
	Error *Error `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	Graph *Graph `protobuf:"bytes,2,opt,name=graph" json:"graph,omitempty"`
}

func (m *GraphRes) Reset()                    { *m = GraphRes{} }
func (m *GraphRes) String() string            { return proto.CompactTextString(m) }
func (*GraphRes) ProtoMessage()               {}
func (*GraphRes) Descriptor() ([]byte, []int) { return fileDescriptorSpotigraph, []int{35} }

func (m *GraphRes) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *GraphRes) GetGraph() *Graph {
	if m != nil {
		return m.Graph
	}
	return nil
}

func init() {
	proto.RegisterType((*Error)(nil), "spotigraph.v1.Error")
	proto.RegisterType((*EmptyRes)(nil), "spotigraph.v1.EmptyRes")
	proto.RegisterType((*Domain)(nil), "spotigraph.v1.Domain")
	proto.RegisterType((*Domain_User)(nil), "spotigraph.v1.Domain.User")
	proto.RegisterType((*Domain_Squad)(nil), "spotigraph.v1.Domain.Squad")
	proto.RegisterType((*Domain_Chapter)(nil), "spotigraph.v1.Domain.Chapter")
	proto.RegisterType((*Domain_Guild)(nil), "spotigraph.v1.Domain.Guild")
	proto.RegisterType((*Domain_Tribe)(nil), "spotigraph.v1.Domain.Tribe")
	proto.RegisterType((*Graph)(nil), "spotigraph.v1.Graph")
	proto.RegisterType((*Graph_Node)(nil), "spotigraph.v1.Graph.Node")
	proto.RegisterType((*Graph_Edge)(nil), "spotigraph.v1.Graph.Edge")
	proto.RegisterType((*UserCreateReq)(nil), "spotigraph.v1.UserCreateReq")
	proto.RegisterType((*UserGetReq)(nil), "spotigraph.v1.UserGetReq")
	proto.RegisterType((*UserUpdateReq)(nil), "spotigraph.v1.UserUpdateReq")
	proto.RegisterType((*SingleUserRes)(nil), "spotigraph.v1.SingleUserRes")
	proto.RegisterType((*PaginatedUserRes)(nil), "spotigraph.v1.PaginatedUserRes")
	proto.RegisterType((*UserSearchReq)(nil), "spotigraph.v1.UserSearchReq")
	proto.RegisterType((*SquadCreateReq)(nil), "spotigraph.v1.SquadCreateReq")
	proto.RegisterType((*SquadGetReq)(nil), "spotigraph.v1.SquadGetReq")
	proto.RegisterType((*SquadUpdateReq)(nil), "spotigraph.v1.SquadUpdateReq")
	proto.RegisterType((*SingleSquadRes)(nil), "spotigraph.v1.SingleSquadRes")
	proto.RegisterType((*PaginatedSquadRes)(nil), "spotigraph.v1.PaginatedSquadRes")
	proto.RegisterType((*SquadSearchReq)(nil), "spotigraph.v1.SquadSearchReq")
	proto.RegisterType((*ChapterCreateReq)(nil), "spotigraph.v1.ChapterCreateReq")
	proto.RegisterType((*ChapterGetReq)(nil), "spotigraph.v1.ChapterGetReq")
	proto.RegisterType((*ChapterUpdateReq)(nil), "spotigraph.v1.ChapterUpdateReq")
	proto.RegisterType((*SingleChapterRes)(nil), "spotigraph.v1.SingleChapterRes")
	proto.RegisterType((*PaginatedChapterRes)(nil), "spotigraph.v1.PaginatedChapterRes")
	proto.RegisterType((*ChapterSearchReq)(nil), "spotigraph.v1.ChapterSearchReq")
	proto.RegisterType((*GuildCreateReq)(nil), "spotigraph.v1.GuildCreateReq")
	proto.RegisterType((*GuildGetReq)(nil), "spotigraph.v1.GuildGetReq")
	proto.RegisterType((*GuildUpdateReq)(nil), "spotigraph.v1.GuildUpdateReq")
	proto.RegisterType((*SingleGuildRes)(nil), "spotigraph.v1.SingleGuildRes")
	proto.RegisterType((*PaginatedGuildRes)(nil), "spotigraph.v1.PaginatedGuildRes")
	proto.RegisterType((*GuildSearchReq)(nil), "spotigraph.v1.GuildSearchReq")
	proto.RegisterType((*TribeCreateReq)(nil), "spotigraph.v1.TribeCreateReq")
	proto.RegisterType((*TribeGetReq)(nil), "spotigraph.v1.TribeGetReq")
	proto.RegisterType((*TribeUpdateReq)(nil), "spotigraph.v1.TribeUpdateReq")
	proto.RegisterType((*SingleTribeRes)(nil), "spotigraph.v1.SingleTribeRes")
	proto.RegisterType((*PaginatedTribeRes)(nil), "spotigraph.v1.PaginatedTribeRes")
	proto.RegisterType((*TribeSearchReq)(nil), "spotigraph.v1.TribeSearchReq")
	proto.RegisterType((*NodeInfoReq)(nil), "spotigraph.v1.NodeInfoReq")
	proto.RegisterType((*GraphRes)(nil), "spotigraph.v1.GraphRes")
	proto.RegisterEnum("spotigraph.v1.Graph_Node_Type", Graph_Node_Type_name, Graph_Node_Type_value)
}
func (this *Error) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Error)
	if !ok {
		that2, ok := that.(Error)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.Message != that1.Message {
		return false
	}
	return true
}
func (this *EmptyRes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EmptyRes)
	if !ok {
		that2, ok := that.(EmptyRes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Error.Equal(that1.Error) {
		return false
	}
	return true
}
func (this *Domain) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Domain)
	if !ok {
		that2, ok := that.(Domain)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *Domain_User) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Domain_User)
	if !ok {
		that2, ok := that.(Domain_User)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Principal != that1.Principal {
		return false
	}
	if this.Urn != that1.Urn {
		return false
	}
	return true
}
func (this *Domain_Squad) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Domain_Squad)
	if !ok {
		that2, ok := that.(Domain_Squad)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Urn != that1.Urn {
		return false
	}
	return true
}
func (this *Domain_Chapter) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Domain_Chapter)
	if !ok {
		that2, ok := that.(Domain_Chapter)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Urn != that1.Urn {
		return false
	}
	return true
}
func (this *Domain_Guild) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Domain_Guild)
	if !ok {
		that2, ok := that.(Domain_Guild)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Urn != that1.Urn {
		return false
	}
	return true
}
func (this *Domain_Tribe) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Domain_Tribe)
	if !ok {
		that2, ok := that.(Domain_Tribe)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Urn != that1.Urn {
		return false
	}
	return true
}
func (this *Graph) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Graph)
	if !ok {
		that2, ok := that.(Graph)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Nodes) != len(that1.Nodes) {
		return false
	}
	for i := range this.Nodes {
		if !this.Nodes[i].Equal(that1.Nodes[i]) {
			return false
		}
	}
	if len(this.Edges) != len(that1.Edges) {
		return false
	}
	for i := range this.Edges {
		if !this.Edges[i].Equal(that1.Edges[i]) {
			return false
		}
	}
	if len(this.Properties) != len(that1.Properties) {
		return false
	}
	for i := range this.Properties {
		if this.Properties[i] != that1.Properties[i] {
			return false
		}
	}
	return true
}
func (this *Graph_Node) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Graph_Node)
	if !ok {
		that2, ok := that.(Graph_Node)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Urn != that1.Urn {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if that1.Entity == nil {
		if this.Entity != nil {
			return false
		}
	} else if this.Entity == nil {
		return false
	} else if !this.Entity.Equal(that1.Entity) {
		return false
	}
	if len(this.Properties) != len(that1.Properties) {
		return false
	}
	for i := range this.Properties {
		if this.Properties[i] != that1.Properties[i] {
			return false
		}
	}
	return true
}
func (this *Graph_Node_User) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Graph_Node_User)
	if !ok {
		that2, ok := that.(Graph_Node_User)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.User.Equal(that1.User) {
		return false
	}
	return true
}
func (this *Graph_Node_Chapter) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Graph_Node_Chapter)
	if !ok {
		that2, ok := that.(Graph_Node_Chapter)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Chapter.Equal(that1.Chapter) {
		return false
	}
	return true
}
func (this *Graph_Node_Guild) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Graph_Node_Guild)
	if !ok {
		that2, ok := that.(Graph_Node_Guild)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Guild.Equal(that1.Guild) {
		return false
	}
	return true
}
func (this *Graph_Node_Squad) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Graph_Node_Squad)
	if !ok {
		that2, ok := that.(Graph_Node_Squad)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Squad.Equal(that1.Squad) {
		return false
	}
	return true
}
func (this *Graph_Node_Tribe) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Graph_Node_Tribe)
	if !ok {
		that2, ok := that.(Graph_Node_Tribe)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Tribe.Equal(that1.Tribe) {
		return false
	}
	return true
}
func (this *Graph_Edge) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Graph_Edge)
	if !ok {
		that2, ok := that.(Graph_Edge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Source != that1.Source {
		return false
	}
	if this.Destination != that1.Destination {
		return false
	}
	if len(this.Properties) != len(that1.Properties) {
		return false
	}
	for i := range this.Properties {
		if this.Properties[i] != that1.Properties[i] {
			return false
		}
	}
	return true
}
func (this *UserCreateReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UserCreateReq)
	if !ok {
		that2, ok := that.(UserCreateReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Principal != that1.Principal {
		return false
	}
	return true
}
func (this *UserGetReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UserGetReq)
	if !ok {
		that2, ok := that.(UserGetReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	return true
}
func (this *UserUpdateReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UserUpdateReq)
	if !ok {
		that2, ok := that.(UserUpdateReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if !this.Principal.Equal(that1.Principal) {
		return false
	}
	return true
}
func (this *SingleUserRes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SingleUserRes)
	if !ok {
		that2, ok := that.(SingleUserRes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Error.Equal(that1.Error) {
		return false
	}
	if !this.Entity.Equal(that1.Entity) {
		return false
	}
	return true
}
func (this *PaginatedUserRes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PaginatedUserRes)
	if !ok {
		that2, ok := that.(PaginatedUserRes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Error.Equal(that1.Error) {
		return false
	}
	if this.Total != that1.Total {
		return false
	}
	if this.PerPage != that1.PerPage {
		return false
	}
	if this.Count != that1.Count {
		return false
	}
	if this.CurrentPage != that1.CurrentPage {
		return false
	}
	if len(this.Members) != len(that1.Members) {
		return false
	}
	for i := range this.Members {
		if !this.Members[i].Equal(that1.Members[i]) {
			return false
		}
	}
	return true
}
func (this *UserSearchReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UserSearchReq)
	if !ok {
		that2, ok := that.(UserSearchReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Page != that1.Page {
		return false
	}
	if this.PerPage != that1.PerPage {
		return false
	}
	if len(this.Sorts) != len(that1.Sorts) {
		return false
	}
	for i := range this.Sorts {
		if this.Sorts[i] != that1.Sorts[i] {
			return false
		}
	}
	if !this.UserId.Equal(that1.UserId) {
		return false
	}
	if !this.Principal.Equal(that1.Principal) {
		return false
	}
	return true
}
func (this *SquadCreateReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SquadCreateReq)
	if !ok {
		that2, ok := that.(SquadCreateReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	return true
}
func (this *SquadGetReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SquadGetReq)
	if !ok {
		that2, ok := that.(SquadGetReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	return true
}
func (this *SquadUpdateReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SquadUpdateReq)
	if !ok {
		that2, ok := that.(SquadUpdateReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if !this.Name.Equal(that1.Name) {
		return false
	}
	return true
}
func (this *SingleSquadRes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SingleSquadRes)
	if !ok {
		that2, ok := that.(SingleSquadRes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Error.Equal(that1.Error) {
		return false
	}
	if !this.Entity.Equal(that1.Entity) {
		return false
	}
	return true
}
func (this *PaginatedSquadRes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PaginatedSquadRes)
	if !ok {
		that2, ok := that.(PaginatedSquadRes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Error.Equal(that1.Error) {
		return false
	}
	if this.Total != that1.Total {
		return false
	}
	if this.PerPage != that1.PerPage {
		return false
	}
	if this.Count != that1.Count {
		return false
	}
	if this.CurrentPage != that1.CurrentPage {
		return false
	}
	if len(this.Members) != len(that1.Members) {
		return false
	}
	for i := range this.Members {
		if !this.Members[i].Equal(that1.Members[i]) {
			return false
		}
	}
	return true
}
func (this *SquadSearchReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SquadSearchReq)
	if !ok {
		that2, ok := that.(SquadSearchReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Page != that1.Page {
		return false
	}
	if this.PerPage != that1.PerPage {
		return false
	}
	if len(this.Sorts) != len(that1.Sorts) {
		return false
	}
	for i := range this.Sorts {
		if this.Sorts[i] != that1.Sorts[i] {
			return false
		}
	}
	if !this.SquadId.Equal(that1.SquadId) {
		return false
	}
	if !this.Name.Equal(that1.Name) {
		return false
	}
	if !this.Slug.Equal(that1.Slug) {
		return false
	}
	return true
}
func (this *ChapterCreateReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ChapterCreateReq)
	if !ok {
		that2, ok := that.(ChapterCreateReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	return true
}
func (this *ChapterGetReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ChapterGetReq)
	if !ok {
		that2, ok := that.(ChapterGetReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	return true
}
func (this *ChapterUpdateReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ChapterUpdateReq)
	if !ok {
		that2, ok := that.(ChapterUpdateReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if !this.Name.Equal(that1.Name) {
		return false
	}
	return true
}
func (this *SingleChapterRes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SingleChapterRes)
	if !ok {
		that2, ok := that.(SingleChapterRes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Error.Equal(that1.Error) {
		return false
	}
	if !this.Entity.Equal(that1.Entity) {
		return false
	}
	return true
}
func (this *PaginatedChapterRes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PaginatedChapterRes)
	if !ok {
		that2, ok := that.(PaginatedChapterRes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Error.Equal(that1.Error) {
		return false
	}
	if this.Total != that1.Total {
		return false
	}
	if this.PerPage != that1.PerPage {
		return false
	}
	if this.Count != that1.Count {
		return false
	}
	if this.CurrentPage != that1.CurrentPage {
		return false
	}
	if len(this.Members) != len(that1.Members) {
		return false
	}
	for i := range this.Members {
		if !this.Members[i].Equal(that1.Members[i]) {
			return false
		}
	}
	return true
}
func (this *ChapterSearchReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ChapterSearchReq)
	if !ok {
		that2, ok := that.(ChapterSearchReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Page != that1.Page {
		return false
	}
	if this.PerPage != that1.PerPage {
		return false
	}
	if len(this.Sorts) != len(that1.Sorts) {
		return false
	}
	for i := range this.Sorts {
		if this.Sorts[i] != that1.Sorts[i] {
			return false
		}
	}
	if !this.ChapterId.Equal(that1.ChapterId) {
		return false
	}
	if !this.Name.Equal(that1.Name) {
		return false
	}
	if !this.Slug.Equal(that1.Slug) {
		return false
	}
	return true
}
func (this *GuildCreateReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GuildCreateReq)
	if !ok {
		that2, ok := that.(GuildCreateReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	return true
}
func (this *GuildGetReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GuildGetReq)
	if !ok {
		that2, ok := that.(GuildGetReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	return true
}
func (this *GuildUpdateReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GuildUpdateReq)
	if !ok {
		that2, ok := that.(GuildUpdateReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if !this.Name.Equal(that1.Name) {
		return false
	}
	return true
}
func (this *SingleGuildRes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SingleGuildRes)
	if !ok {
		that2, ok := that.(SingleGuildRes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Error.Equal(that1.Error) {
		return false
	}
	if !this.Entity.Equal(that1.Entity) {
		return false
	}
	return true
}
func (this *PaginatedGuildRes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PaginatedGuildRes)
	if !ok {
		that2, ok := that.(PaginatedGuildRes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Error.Equal(that1.Error) {
		return false
	}
	if this.Total != that1.Total {
		return false
	}
	if this.PerPage != that1.PerPage {
		return false
	}
	if this.Count != that1.Count {
		return false
	}
	if this.CurrentPage != that1.CurrentPage {
		return false
	}
	if len(this.Members) != len(that1.Members) {
		return false
	}
	for i := range this.Members {
		if !this.Members[i].Equal(that1.Members[i]) {
			return false
		}
	}
	return true
}
func (this *GuildSearchReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GuildSearchReq)
	if !ok {
		that2, ok := that.(GuildSearchReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Page != that1.Page {
		return false
	}
	if this.PerPage != that1.PerPage {
		return false
	}
	if len(this.Sorts) != len(that1.Sorts) {
		return false
	}
	for i := range this.Sorts {
		if this.Sorts[i] != that1.Sorts[i] {
			return false
		}
	}
	if !this.GuildId.Equal(that1.GuildId) {
		return false
	}
	if !this.Name.Equal(that1.Name) {
		return false
	}
	if !this.Slug.Equal(that1.Slug) {
		return false
	}
	return true
}
func (this *TribeCreateReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TribeCreateReq)
	if !ok {
		that2, ok := that.(TribeCreateReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	return true
}
func (this *TribeGetReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TribeGetReq)
	if !ok {
		that2, ok := that.(TribeGetReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	return true
}
func (this *TribeUpdateReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TribeUpdateReq)
	if !ok {
		that2, ok := that.(TribeUpdateReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if !this.Name.Equal(that1.Name) {
		return false
	}
	return true
}
func (this *SingleTribeRes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SingleTribeRes)
	if !ok {
		that2, ok := that.(SingleTribeRes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Error.Equal(that1.Error) {
		return false
	}
	if !this.Entity.Equal(that1.Entity) {
		return false
	}
	return true
}
func (this *PaginatedTribeRes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PaginatedTribeRes)
	if !ok {
		that2, ok := that.(PaginatedTribeRes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Error.Equal(that1.Error) {
		return false
	}
	if this.Total != that1.Total {
		return false
	}
	if this.PerPage != that1.PerPage {
		return false
	}
	if this.Count != that1.Count {
		return false
	}
	if this.CurrentPage != that1.CurrentPage {
		return false
	}
	if len(this.Members) != len(that1.Members) {
		return false
	}
	for i := range this.Members {
		if !this.Members[i].Equal(that1.Members[i]) {
			return false
		}
	}
	return true
}
func (this *TribeSearchReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TribeSearchReq)
	if !ok {
		that2, ok := that.(TribeSearchReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Page != that1.Page {
		return false
	}
	if this.PerPage != that1.PerPage {
		return false
	}
	if len(this.Sorts) != len(that1.Sorts) {
		return false
	}
	for i := range this.Sorts {
		if this.Sorts[i] != that1.Sorts[i] {
			return false
		}
	}
	if !this.TribeId.Equal(that1.TribeId) {
		return false
	}
	if !this.Name.Equal(that1.Name) {
		return false
	}
	if !this.Slug.Equal(that1.Slug) {
		return false
	}
	return true
}
func (this *NodeInfoReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NodeInfoReq)
	if !ok {
		that2, ok := that.(NodeInfoReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Urn != that1.Urn {
		return false
	}
	return true
}
func (this *GraphRes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GraphRes)
	if !ok {
		that2, ok := that.(GraphRes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Error.Equal(that1.Error) {
		return false
	}
	if !this.Graph.Equal(that1.Graph) {
		return false
	}
	return true
}
func (m *Error) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Error) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSpotigraph(dAtA, i, uint64(m.Code))
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSpotigraph(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	return i, nil
}

func (m *EmptyRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EmptyRes) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Error != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSpotigraph(dAtA, i, uint64(m.Error.Size()))
		n1, err := m.Error.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *Domain) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Domain) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *Domain_User) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Domain_User) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSpotigraph(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.Principal) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSpotigraph(dAtA, i, uint64(len(m.Principal)))
		i += copy(dAtA[i:], m.Principal)
	}
	if len(m.Urn) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSpotigraph(dAtA, i, uint64(len(m.Urn)))
		i += copy(dAtA[i:], m.Urn)
	}
	return i, nil
}

func (m *Domain_Squad) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Domain_Squad) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSpotigraph(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSpotigraph(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Urn) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSpotigraph(dAtA, i, uint64(len(m.Urn)))
		i += copy(dAtA[i:], m.Urn)
	}
	return i, nil
}

func (m *Domain_Chapter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Domain_Chapter) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSpotigraph(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSpotigraph(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Urn) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSpotigraph(dAtA, i, uint64(len(m.Urn)))
		i += copy(dAtA[i:], m.Urn)
	}
	return i, nil
}

func (m *Domain_Guild) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Domain_Guild) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSpotigraph(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSpotigraph(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Urn) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSpotigraph(dAtA, i, uint64(len(m.Urn)))
		i += copy(dAtA[i:], m.Urn)
	}
	return i, nil
}

func (m *Domain_Tribe) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Domain_Tribe) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSpotigraph(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSpotigraph(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Urn) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSpotigraph(dAtA, i, uint64(len(m.Urn)))
		i += copy(dAtA[i:], m.Urn)
	}
	return i, nil
}

func (m *Graph) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Graph) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Nodes) > 0 {
		for _, msg := range m.Nodes {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSpotigraph(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Edges) > 0 {
		for _, msg := range m.Edges {
			dAtA[i] = 0x12
			i++
			i = encodeVarintSpotigraph(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Properties) > 0 {
		for k, _ := range m.Properties {
			dAtA[i] = 0x1a
			i++
			v := m.Properties[k]
			mapSize := 1 + len(k) + sovSpotigraph(uint64(len(k))) + 1 + len(v) + sovSpotigraph(uint64(len(v)))
			i = encodeVarintSpotigraph(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintSpotigraph(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintSpotigraph(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	return i, nil
}

func (m *Graph_Node) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Graph_Node) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Urn) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSpotigraph(dAtA, i, uint64(len(m.Urn)))
		i += copy(dAtA[i:], m.Urn)
	}
	if m.Type != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSpotigraph(dAtA, i, uint64(m.Type))
	}
	if m.Entity != nil {
		nn2, err := m.Entity.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn2
	}
	if len(m.Properties) > 0 {
		for k, _ := range m.Properties {
			dAtA[i] = 0x42
			i++
			v := m.Properties[k]
			mapSize := 1 + len(k) + sovSpotigraph(uint64(len(k))) + 1 + len(v) + sovSpotigraph(uint64(len(v)))
			i = encodeVarintSpotigraph(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintSpotigraph(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintSpotigraph(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	return i, nil
}

func (m *Graph_Node_User) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.User != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSpotigraph(dAtA, i, uint64(m.User.Size()))
		n3, err := m.User.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}
func (m *Graph_Node_Chapter) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Chapter != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintSpotigraph(dAtA, i, uint64(m.Chapter.Size()))
		n4, err := m.Chapter.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}
func (m *Graph_Node_Guild) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Guild != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintSpotigraph(dAtA, i, uint64(m.Guild.Size()))
		n5, err := m.Guild.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}
func (m *Graph_Node_Squad) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Squad != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintSpotigraph(dAtA, i, uint64(m.Squad.Size()))
		n6, err := m.Squad.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}
func (m *Graph_Node_Tribe) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Tribe != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintSpotigraph(dAtA, i, uint64(m.Tribe.Size()))
		n7, err := m.Tribe.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}
func (m *Graph_Edge) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Graph_Edge) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Source) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSpotigraph(dAtA, i, uint64(len(m.Source)))
		i += copy(dAtA[i:], m.Source)
	}
	if len(m.Destination) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSpotigraph(dAtA, i, uint64(len(m.Destination)))
		i += copy(dAtA[i:], m.Destination)
	}
	if len(m.Properties) > 0 {
		for k, _ := range m.Properties {
			dAtA[i] = 0x1a
			i++
			v := m.Properties[k]
			mapSize := 1 + len(k) + sovSpotigraph(uint64(len(k))) + 1 + len(v) + sovSpotigraph(uint64(len(v)))
			i = encodeVarintSpotigraph(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintSpotigraph(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintSpotigraph(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	return i, nil
}

func (m *UserCreateReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserCreateReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Principal) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSpotigraph(dAtA, i, uint64(len(m.Principal)))
		i += copy(dAtA[i:], m.Principal)
	}
	return i, nil
}

func (m *UserGetReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserGetReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSpotigraph(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	return i, nil
}

func (m *UserUpdateReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserUpdateReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSpotigraph(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if m.Principal != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSpotigraph(dAtA, i, uint64(m.Principal.Size()))
		n8, err := m.Principal.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}

func (m *SingleUserRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SingleUserRes) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Error != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSpotigraph(dAtA, i, uint64(m.Error.Size()))
		n9, err := m.Error.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	if m.Entity != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSpotigraph(dAtA, i, uint64(m.Entity.Size()))
		n10, err := m.Entity.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	return i, nil
}

func (m *PaginatedUserRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PaginatedUserRes) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Error != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSpotigraph(dAtA, i, uint64(m.Error.Size()))
		n11, err := m.Error.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	if m.Total != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSpotigraph(dAtA, i, uint64(m.Total))
	}
	if m.PerPage != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSpotigraph(dAtA, i, uint64(m.PerPage))
	}
	if m.Count != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintSpotigraph(dAtA, i, uint64(m.Count))
	}
	if m.CurrentPage != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintSpotigraph(dAtA, i, uint64(m.CurrentPage))
	}
	if len(m.Members) > 0 {
		for _, msg := range m.Members {
			dAtA[i] = 0x32
			i++
			i = encodeVarintSpotigraph(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *UserSearchReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserSearchReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Page != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSpotigraph(dAtA, i, uint64(m.Page))
	}
	if m.PerPage != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSpotigraph(dAtA, i, uint64(m.PerPage))
	}
	if len(m.Sorts) > 0 {
		for _, s := range m.Sorts {
			dAtA[i] = 0x1a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.UserId != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintSpotigraph(dAtA, i, uint64(m.UserId.Size()))
		n12, err := m.UserId.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	if m.Principal != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintSpotigraph(dAtA, i, uint64(m.Principal.Size()))
		n13, err := m.Principal.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	return i, nil
}

func (m *SquadCreateReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SquadCreateReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSpotigraph(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	return i, nil
}

func (m *SquadGetReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SquadGetReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSpotigraph(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	return i, nil
}

func (m *SquadUpdateReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SquadUpdateReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSpotigraph(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if m.Name != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSpotigraph(dAtA, i, uint64(m.Name.Size()))
		n14, err := m.Name.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	return i, nil
}

func (m *SingleSquadRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SingleSquadRes) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Error != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSpotigraph(dAtA, i, uint64(m.Error.Size()))
		n15, err := m.Error.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	if m.Entity != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSpotigraph(dAtA, i, uint64(m.Entity.Size()))
		n16, err := m.Entity.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	return i, nil
}

func (m *PaginatedSquadRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PaginatedSquadRes) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Error != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSpotigraph(dAtA, i, uint64(m.Error.Size()))
		n17, err := m.Error.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n17
	}
	if m.Total != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSpotigraph(dAtA, i, uint64(m.Total))
	}
	if m.PerPage != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSpotigraph(dAtA, i, uint64(m.PerPage))
	}
	if m.Count != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintSpotigraph(dAtA, i, uint64(m.Count))
	}
	if m.CurrentPage != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintSpotigraph(dAtA, i, uint64(m.CurrentPage))
	}
	if len(m.Members) > 0 {
		for _, msg := range m.Members {
			dAtA[i] = 0x32
			i++
			i = encodeVarintSpotigraph(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *SquadSearchReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SquadSearchReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Page != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSpotigraph(dAtA, i, uint64(m.Page))
	}
	if m.PerPage != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSpotigraph(dAtA, i, uint64(m.PerPage))
	}
	if len(m.Sorts) > 0 {
		for _, s := range m.Sorts {
			dAtA[i] = 0x1a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.SquadId != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintSpotigraph(dAtA, i, uint64(m.SquadId.Size()))
		n18, err := m.SquadId.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n18
	}
	if m.Name != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintSpotigraph(dAtA, i, uint64(m.Name.Size()))
		n19, err := m.Name.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n19
	}
	if m.Slug != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintSpotigraph(dAtA, i, uint64(m.Slug.Size()))
		n20, err := m.Slug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n20
	}
	return i, nil
}

func (m *ChapterCreateReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChapterCreateReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSpotigraph(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	return i, nil
}

func (m *ChapterGetReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChapterGetReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSpotigraph(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	return i, nil
}

func (m *ChapterUpdateReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChapterUpdateReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSpotigraph(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if m.Name != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSpotigraph(dAtA, i, uint64(m.Name.Size()))
		n21, err := m.Name.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n21
	}
	return i, nil
}

func (m *SingleChapterRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SingleChapterRes) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Error != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSpotigraph(dAtA, i, uint64(m.Error.Size()))
		n22, err := m.Error.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n22
	}
	if m.Entity != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSpotigraph(dAtA, i, uint64(m.Entity.Size()))
		n23, err := m.Entity.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n23
	}
	return i, nil
}

func (m *PaginatedChapterRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PaginatedChapterRes) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Error != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSpotigraph(dAtA, i, uint64(m.Error.Size()))
		n24, err := m.Error.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n24
	}
	if m.Total != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSpotigraph(dAtA, i, uint64(m.Total))
	}
	if m.PerPage != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSpotigraph(dAtA, i, uint64(m.PerPage))
	}
	if m.Count != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintSpotigraph(dAtA, i, uint64(m.Count))
	}
	if m.CurrentPage != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintSpotigraph(dAtA, i, uint64(m.CurrentPage))
	}
	if len(m.Members) > 0 {
		for _, msg := range m.Members {
			dAtA[i] = 0x32
			i++
			i = encodeVarintSpotigraph(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ChapterSearchReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChapterSearchReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Page != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSpotigraph(dAtA, i, uint64(m.Page))
	}
	if m.PerPage != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSpotigraph(dAtA, i, uint64(m.PerPage))
	}
	if len(m.Sorts) > 0 {
		for _, s := range m.Sorts {
			dAtA[i] = 0x1a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.ChapterId != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintSpotigraph(dAtA, i, uint64(m.ChapterId.Size()))
		n25, err := m.ChapterId.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n25
	}
	if m.Name != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintSpotigraph(dAtA, i, uint64(m.Name.Size()))
		n26, err := m.Name.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n26
	}
	if m.Slug != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintSpotigraph(dAtA, i, uint64(m.Slug.Size()))
		n27, err := m.Slug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n27
	}
	return i, nil
}

func (m *GuildCreateReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuildCreateReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSpotigraph(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	return i, nil
}

func (m *GuildGetReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuildGetReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSpotigraph(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	return i, nil
}

func (m *GuildUpdateReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuildUpdateReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSpotigraph(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if m.Name != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSpotigraph(dAtA, i, uint64(m.Name.Size()))
		n28, err := m.Name.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n28
	}
	return i, nil
}

func (m *SingleGuildRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SingleGuildRes) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Error != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSpotigraph(dAtA, i, uint64(m.Error.Size()))
		n29, err := m.Error.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n29
	}
	if m.Entity != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSpotigraph(dAtA, i, uint64(m.Entity.Size()))
		n30, err := m.Entity.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n30
	}
	return i, nil
}

func (m *PaginatedGuildRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PaginatedGuildRes) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Error != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSpotigraph(dAtA, i, uint64(m.Error.Size()))
		n31, err := m.Error.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n31
	}
	if m.Total != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSpotigraph(dAtA, i, uint64(m.Total))
	}
	if m.PerPage != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSpotigraph(dAtA, i, uint64(m.PerPage))
	}
	if m.Count != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintSpotigraph(dAtA, i, uint64(m.Count))
	}
	if m.CurrentPage != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintSpotigraph(dAtA, i, uint64(m.CurrentPage))
	}
	if len(m.Members) > 0 {
		for _, msg := range m.Members {
			dAtA[i] = 0x32
			i++
			i = encodeVarintSpotigraph(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *GuildSearchReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuildSearchReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Page != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSpotigraph(dAtA, i, uint64(m.Page))
	}
	if m.PerPage != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSpotigraph(dAtA, i, uint64(m.PerPage))
	}
	if len(m.Sorts) > 0 {
		for _, s := range m.Sorts {
			dAtA[i] = 0x1a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.GuildId != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintSpotigraph(dAtA, i, uint64(m.GuildId.Size()))
		n32, err := m.GuildId.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n32
	}
	if m.Name != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintSpotigraph(dAtA, i, uint64(m.Name.Size()))
		n33, err := m.Name.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n33
	}
	if m.Slug != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintSpotigraph(dAtA, i, uint64(m.Slug.Size()))
		n34, err := m.Slug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n34
	}
	return i, nil
}

func (m *TribeCreateReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TribeCreateReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSpotigraph(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	return i, nil
}

func (m *TribeGetReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TribeGetReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSpotigraph(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	return i, nil
}

func (m *TribeUpdateReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TribeUpdateReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSpotigraph(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if m.Name != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSpotigraph(dAtA, i, uint64(m.Name.Size()))
		n35, err := m.Name.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n35
	}
	return i, nil
}

func (m *SingleTribeRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SingleTribeRes) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Error != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSpotigraph(dAtA, i, uint64(m.Error.Size()))
		n36, err := m.Error.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n36
	}
	if m.Entity != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSpotigraph(dAtA, i, uint64(m.Entity.Size()))
		n37, err := m.Entity.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n37
	}
	return i, nil
}

func (m *PaginatedTribeRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PaginatedTribeRes) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Error != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSpotigraph(dAtA, i, uint64(m.Error.Size()))
		n38, err := m.Error.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n38
	}
	if m.Total != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSpotigraph(dAtA, i, uint64(m.Total))
	}
	if m.PerPage != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSpotigraph(dAtA, i, uint64(m.PerPage))
	}
	if m.Count != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintSpotigraph(dAtA, i, uint64(m.Count))
	}
	if m.CurrentPage != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintSpotigraph(dAtA, i, uint64(m.CurrentPage))
	}
	if len(m.Members) > 0 {
		for _, msg := range m.Members {
			dAtA[i] = 0x32
			i++
			i = encodeVarintSpotigraph(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *TribeSearchReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TribeSearchReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Page != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSpotigraph(dAtA, i, uint64(m.Page))
	}
	if m.PerPage != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSpotigraph(dAtA, i, uint64(m.PerPage))
	}
	if len(m.Sorts) > 0 {
		for _, s := range m.Sorts {
			dAtA[i] = 0x1a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.TribeId != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintSpotigraph(dAtA, i, uint64(m.TribeId.Size()))
		n39, err := m.TribeId.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n39
	}
	if m.Name != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintSpotigraph(dAtA, i, uint64(m.Name.Size()))
		n40, err := m.Name.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n40
	}
	if m.Slug != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintSpotigraph(dAtA, i, uint64(m.Slug.Size()))
		n41, err := m.Slug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n41
	}
	return i, nil
}

func (m *NodeInfoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeInfoReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Urn) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSpotigraph(dAtA, i, uint64(len(m.Urn)))
		i += copy(dAtA[i:], m.Urn)
	}
	return i, nil
}

func (m *GraphRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GraphRes) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Error != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSpotigraph(dAtA, i, uint64(m.Error.Size()))
		n42, err := m.Error.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n42
	}
	if m.Graph != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSpotigraph(dAtA, i, uint64(m.Graph.Size()))
		n43, err := m.Graph.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n43
	}
	return i, nil
}

func encodeVarintSpotigraph(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedError(r randySpotigraph, easy bool) *Error {
	this := &Error{}
	this.Code = uint32(r.Uint32())
	this.Message = string(randStringSpotigraph(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedEmptyRes(r randySpotigraph, easy bool) *EmptyRes {
	this := &EmptyRes{}
	if r.Intn(10) != 0 {
		this.Error = NewPopulatedError(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedDomain(r randySpotigraph, easy bool) *Domain {
	this := &Domain{}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedDomain_User(r randySpotigraph, easy bool) *Domain_User {
	this := &Domain_User{}
	this.Id = string(randStringSpotigraph(r))
	this.Principal = string(randStringSpotigraph(r))
	this.Urn = string(randStringSpotigraph(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedDomain_Squad(r randySpotigraph, easy bool) *Domain_Squad {
	this := &Domain_Squad{}
	this.Id = string(randStringSpotigraph(r))
	this.Name = string(randStringSpotigraph(r))
	this.Urn = string(randStringSpotigraph(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedDomain_Chapter(r randySpotigraph, easy bool) *Domain_Chapter {
	this := &Domain_Chapter{}
	this.Id = string(randStringSpotigraph(r))
	this.Name = string(randStringSpotigraph(r))
	this.Urn = string(randStringSpotigraph(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedDomain_Guild(r randySpotigraph, easy bool) *Domain_Guild {
	this := &Domain_Guild{}
	this.Id = string(randStringSpotigraph(r))
	this.Name = string(randStringSpotigraph(r))
	this.Urn = string(randStringSpotigraph(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedDomain_Tribe(r randySpotigraph, easy bool) *Domain_Tribe {
	this := &Domain_Tribe{}
	this.Id = string(randStringSpotigraph(r))
	this.Name = string(randStringSpotigraph(r))
	this.Urn = string(randStringSpotigraph(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGraph(r randySpotigraph, easy bool) *Graph {
	this := &Graph{}
	if r.Intn(10) != 0 {
		v1 := r.Intn(5)
		this.Nodes = make([]*Graph_Node, v1)
		for i := 0; i < v1; i++ {
			this.Nodes[i] = NewPopulatedGraph_Node(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v2 := r.Intn(5)
		this.Edges = make([]*Graph_Edge, v2)
		for i := 0; i < v2; i++ {
			this.Edges[i] = NewPopulatedGraph_Edge(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v3 := r.Intn(10)
		this.Properties = make(map[string]string)
		for i := 0; i < v3; i++ {
			this.Properties[randStringSpotigraph(r)] = randStringSpotigraph(r)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGraph_Node(r randySpotigraph, easy bool) *Graph_Node {
	this := &Graph_Node{}
	this.Urn = string(randStringSpotigraph(r))
	this.Type = Graph_Node_Type([]int32{0, 1, 2, 3, 4, 5}[r.Intn(6)])
	oneofNumber_Entity := []int32{3, 4, 5, 6, 7}[r.Intn(5)]
	switch oneofNumber_Entity {
	case 3:
		this.Entity = NewPopulatedGraph_Node_User(r, easy)
	case 4:
		this.Entity = NewPopulatedGraph_Node_Chapter(r, easy)
	case 5:
		this.Entity = NewPopulatedGraph_Node_Guild(r, easy)
	case 6:
		this.Entity = NewPopulatedGraph_Node_Squad(r, easy)
	case 7:
		this.Entity = NewPopulatedGraph_Node_Tribe(r, easy)
	}
	if r.Intn(10) != 0 {
		v4 := r.Intn(10)
		this.Properties = make(map[string]string)
		for i := 0; i < v4; i++ {
			this.Properties[randStringSpotigraph(r)] = randStringSpotigraph(r)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGraph_Node_User(r randySpotigraph, easy bool) *Graph_Node_User {
	this := &Graph_Node_User{}
	this.User = NewPopulatedDomain_User(r, easy)
	return this
}
func NewPopulatedGraph_Node_Chapter(r randySpotigraph, easy bool) *Graph_Node_Chapter {
	this := &Graph_Node_Chapter{}
	this.Chapter = NewPopulatedDomain_Chapter(r, easy)
	return this
}
func NewPopulatedGraph_Node_Guild(r randySpotigraph, easy bool) *Graph_Node_Guild {
	this := &Graph_Node_Guild{}
	this.Guild = NewPopulatedDomain_Guild(r, easy)
	return this
}
func NewPopulatedGraph_Node_Squad(r randySpotigraph, easy bool) *Graph_Node_Squad {
	this := &Graph_Node_Squad{}
	this.Squad = NewPopulatedDomain_Squad(r, easy)
	return this
}
func NewPopulatedGraph_Node_Tribe(r randySpotigraph, easy bool) *Graph_Node_Tribe {
	this := &Graph_Node_Tribe{}
	this.Tribe = NewPopulatedDomain_Tribe(r, easy)
	return this
}
func NewPopulatedGraph_Edge(r randySpotigraph, easy bool) *Graph_Edge {
	this := &Graph_Edge{}
	this.Source = string(randStringSpotigraph(r))
	this.Destination = string(randStringSpotigraph(r))
	if r.Intn(10) != 0 {
		v5 := r.Intn(10)
		this.Properties = make(map[string]string)
		for i := 0; i < v5; i++ {
			this.Properties[randStringSpotigraph(r)] = randStringSpotigraph(r)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedUserCreateReq(r randySpotigraph, easy bool) *UserCreateReq {
	this := &UserCreateReq{}
	this.Principal = string(randStringSpotigraph(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedUserGetReq(r randySpotigraph, easy bool) *UserGetReq {
	this := &UserGetReq{}
	this.Id = string(randStringSpotigraph(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedUserUpdateReq(r randySpotigraph, easy bool) *UserUpdateReq {
	this := &UserUpdateReq{}
	this.Id = string(randStringSpotigraph(r))
	if r.Intn(10) != 0 {
		this.Principal = google_protobuf3.NewPopulatedStringValue(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSingleUserRes(r randySpotigraph, easy bool) *SingleUserRes {
	this := &SingleUserRes{}
	if r.Intn(10) != 0 {
		this.Error = NewPopulatedError(r, easy)
	}
	if r.Intn(10) != 0 {
		this.Entity = NewPopulatedDomain_User(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedPaginatedUserRes(r randySpotigraph, easy bool) *PaginatedUserRes {
	this := &PaginatedUserRes{}
	if r.Intn(10) != 0 {
		this.Error = NewPopulatedError(r, easy)
	}
	this.Total = uint32(r.Uint32())
	this.PerPage = uint32(r.Uint32())
	this.Count = uint32(r.Uint32())
	this.CurrentPage = uint32(r.Uint32())
	if r.Intn(10) != 0 {
		v6 := r.Intn(5)
		this.Members = make([]*Domain_User, v6)
		for i := 0; i < v6; i++ {
			this.Members[i] = NewPopulatedDomain_User(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedUserSearchReq(r randySpotigraph, easy bool) *UserSearchReq {
	this := &UserSearchReq{}
	this.Page = uint32(r.Uint32())
	this.PerPage = uint32(r.Uint32())
	v7 := r.Intn(10)
	this.Sorts = make([]string, v7)
	for i := 0; i < v7; i++ {
		this.Sorts[i] = string(randStringSpotigraph(r))
	}
	if r.Intn(10) != 0 {
		this.UserId = google_protobuf3.NewPopulatedStringValue(r, easy)
	}
	if r.Intn(10) != 0 {
		this.Principal = google_protobuf3.NewPopulatedStringValue(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSquadCreateReq(r randySpotigraph, easy bool) *SquadCreateReq {
	this := &SquadCreateReq{}
	this.Name = string(randStringSpotigraph(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSquadGetReq(r randySpotigraph, easy bool) *SquadGetReq {
	this := &SquadGetReq{}
	this.Id = string(randStringSpotigraph(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSquadUpdateReq(r randySpotigraph, easy bool) *SquadUpdateReq {
	this := &SquadUpdateReq{}
	this.Id = string(randStringSpotigraph(r))
	if r.Intn(10) != 0 {
		this.Name = google_protobuf3.NewPopulatedStringValue(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSingleSquadRes(r randySpotigraph, easy bool) *SingleSquadRes {
	this := &SingleSquadRes{}
	if r.Intn(10) != 0 {
		this.Error = NewPopulatedError(r, easy)
	}
	if r.Intn(10) != 0 {
		this.Entity = NewPopulatedDomain_Squad(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedPaginatedSquadRes(r randySpotigraph, easy bool) *PaginatedSquadRes {
	this := &PaginatedSquadRes{}
	if r.Intn(10) != 0 {
		this.Error = NewPopulatedError(r, easy)
	}
	this.Total = uint32(r.Uint32())
	this.PerPage = uint32(r.Uint32())
	this.Count = uint32(r.Uint32())
	this.CurrentPage = uint32(r.Uint32())
	if r.Intn(10) != 0 {
		v8 := r.Intn(5)
		this.Members = make([]*Domain_Squad, v8)
		for i := 0; i < v8; i++ {
			this.Members[i] = NewPopulatedDomain_Squad(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSquadSearchReq(r randySpotigraph, easy bool) *SquadSearchReq {
	this := &SquadSearchReq{}
	this.Page = uint32(r.Uint32())
	this.PerPage = uint32(r.Uint32())
	v9 := r.Intn(10)
	this.Sorts = make([]string, v9)
	for i := 0; i < v9; i++ {
		this.Sorts[i] = string(randStringSpotigraph(r))
	}
	if r.Intn(10) != 0 {
		this.SquadId = google_protobuf3.NewPopulatedStringValue(r, easy)
	}
	if r.Intn(10) != 0 {
		this.Name = google_protobuf3.NewPopulatedStringValue(r, easy)
	}
	if r.Intn(10) != 0 {
		this.Slug = google_protobuf3.NewPopulatedStringValue(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedChapterCreateReq(r randySpotigraph, easy bool) *ChapterCreateReq {
	this := &ChapterCreateReq{}
	this.Name = string(randStringSpotigraph(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedChapterGetReq(r randySpotigraph, easy bool) *ChapterGetReq {
	this := &ChapterGetReq{}
	this.Id = string(randStringSpotigraph(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedChapterUpdateReq(r randySpotigraph, easy bool) *ChapterUpdateReq {
	this := &ChapterUpdateReq{}
	this.Id = string(randStringSpotigraph(r))
	if r.Intn(10) != 0 {
		this.Name = google_protobuf3.NewPopulatedStringValue(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSingleChapterRes(r randySpotigraph, easy bool) *SingleChapterRes {
	this := &SingleChapterRes{}
	if r.Intn(10) != 0 {
		this.Error = NewPopulatedError(r, easy)
	}
	if r.Intn(10) != 0 {
		this.Entity = NewPopulatedDomain_Chapter(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedPaginatedChapterRes(r randySpotigraph, easy bool) *PaginatedChapterRes {
	this := &PaginatedChapterRes{}
	if r.Intn(10) != 0 {
		this.Error = NewPopulatedError(r, easy)
	}
	this.Total = uint32(r.Uint32())
	this.PerPage = uint32(r.Uint32())
	this.Count = uint32(r.Uint32())
	this.CurrentPage = uint32(r.Uint32())
	if r.Intn(10) != 0 {
		v10 := r.Intn(5)
		this.Members = make([]*Domain_Chapter, v10)
		for i := 0; i < v10; i++ {
			this.Members[i] = NewPopulatedDomain_Chapter(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedChapterSearchReq(r randySpotigraph, easy bool) *ChapterSearchReq {
	this := &ChapterSearchReq{}
	this.Page = uint32(r.Uint32())
	this.PerPage = uint32(r.Uint32())
	v11 := r.Intn(10)
	this.Sorts = make([]string, v11)
	for i := 0; i < v11; i++ {
		this.Sorts[i] = string(randStringSpotigraph(r))
	}
	if r.Intn(10) != 0 {
		this.ChapterId = google_protobuf3.NewPopulatedStringValue(r, easy)
	}
	if r.Intn(10) != 0 {
		this.Name = google_protobuf3.NewPopulatedStringValue(r, easy)
	}
	if r.Intn(10) != 0 {
		this.Slug = google_protobuf3.NewPopulatedStringValue(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGuildCreateReq(r randySpotigraph, easy bool) *GuildCreateReq {
	this := &GuildCreateReq{}
	this.Name = string(randStringSpotigraph(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGuildGetReq(r randySpotigraph, easy bool) *GuildGetReq {
	this := &GuildGetReq{}
	this.Id = string(randStringSpotigraph(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGuildUpdateReq(r randySpotigraph, easy bool) *GuildUpdateReq {
	this := &GuildUpdateReq{}
	this.Id = string(randStringSpotigraph(r))
	if r.Intn(10) != 0 {
		this.Name = google_protobuf3.NewPopulatedStringValue(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSingleGuildRes(r randySpotigraph, easy bool) *SingleGuildRes {
	this := &SingleGuildRes{}
	if r.Intn(10) != 0 {
		this.Error = NewPopulatedError(r, easy)
	}
	if r.Intn(10) != 0 {
		this.Entity = NewPopulatedDomain_Guild(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedPaginatedGuildRes(r randySpotigraph, easy bool) *PaginatedGuildRes {
	this := &PaginatedGuildRes{}
	if r.Intn(10) != 0 {
		this.Error = NewPopulatedError(r, easy)
	}
	this.Total = uint32(r.Uint32())
	this.PerPage = uint32(r.Uint32())
	this.Count = uint32(r.Uint32())
	this.CurrentPage = uint32(r.Uint32())
	if r.Intn(10) != 0 {
		v12 := r.Intn(5)
		this.Members = make([]*Domain_Guild, v12)
		for i := 0; i < v12; i++ {
			this.Members[i] = NewPopulatedDomain_Guild(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGuildSearchReq(r randySpotigraph, easy bool) *GuildSearchReq {
	this := &GuildSearchReq{}
	this.Page = uint32(r.Uint32())
	this.PerPage = uint32(r.Uint32())
	v13 := r.Intn(10)
	this.Sorts = make([]string, v13)
	for i := 0; i < v13; i++ {
		this.Sorts[i] = string(randStringSpotigraph(r))
	}
	if r.Intn(10) != 0 {
		this.GuildId = google_protobuf3.NewPopulatedStringValue(r, easy)
	}
	if r.Intn(10) != 0 {
		this.Name = google_protobuf3.NewPopulatedStringValue(r, easy)
	}
	if r.Intn(10) != 0 {
		this.Slug = google_protobuf3.NewPopulatedStringValue(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedTribeCreateReq(r randySpotigraph, easy bool) *TribeCreateReq {
	this := &TribeCreateReq{}
	this.Name = string(randStringSpotigraph(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedTribeGetReq(r randySpotigraph, easy bool) *TribeGetReq {
	this := &TribeGetReq{}
	this.Id = string(randStringSpotigraph(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedTribeUpdateReq(r randySpotigraph, easy bool) *TribeUpdateReq {
	this := &TribeUpdateReq{}
	this.Id = string(randStringSpotigraph(r))
	if r.Intn(10) != 0 {
		this.Name = google_protobuf3.NewPopulatedStringValue(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSingleTribeRes(r randySpotigraph, easy bool) *SingleTribeRes {
	this := &SingleTribeRes{}
	if r.Intn(10) != 0 {
		this.Error = NewPopulatedError(r, easy)
	}
	if r.Intn(10) != 0 {
		this.Entity = NewPopulatedDomain_Tribe(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedPaginatedTribeRes(r randySpotigraph, easy bool) *PaginatedTribeRes {
	this := &PaginatedTribeRes{}
	if r.Intn(10) != 0 {
		this.Error = NewPopulatedError(r, easy)
	}
	this.Total = uint32(r.Uint32())
	this.PerPage = uint32(r.Uint32())
	this.Count = uint32(r.Uint32())
	this.CurrentPage = uint32(r.Uint32())
	if r.Intn(10) != 0 {
		v14 := r.Intn(5)
		this.Members = make([]*Domain_Tribe, v14)
		for i := 0; i < v14; i++ {
			this.Members[i] = NewPopulatedDomain_Tribe(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedTribeSearchReq(r randySpotigraph, easy bool) *TribeSearchReq {
	this := &TribeSearchReq{}
	this.Page = uint32(r.Uint32())
	this.PerPage = uint32(r.Uint32())
	v15 := r.Intn(10)
	this.Sorts = make([]string, v15)
	for i := 0; i < v15; i++ {
		this.Sorts[i] = string(randStringSpotigraph(r))
	}
	if r.Intn(10) != 0 {
		this.TribeId = google_protobuf3.NewPopulatedStringValue(r, easy)
	}
	if r.Intn(10) != 0 {
		this.Name = google_protobuf3.NewPopulatedStringValue(r, easy)
	}
	if r.Intn(10) != 0 {
		this.Slug = google_protobuf3.NewPopulatedStringValue(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedNodeInfoReq(r randySpotigraph, easy bool) *NodeInfoReq {
	this := &NodeInfoReq{}
	this.Urn = string(randStringSpotigraph(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGraphRes(r randySpotigraph, easy bool) *GraphRes {
	this := &GraphRes{}
	if r.Intn(10) != 0 {
		this.Error = NewPopulatedError(r, easy)
	}
	if r.Intn(10) != 0 {
		this.Graph = NewPopulatedGraph(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randySpotigraph interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneSpotigraph(r randySpotigraph) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringSpotigraph(r randySpotigraph) string {
	v16 := r.Intn(100)
	tmps := make([]rune, v16)
	for i := 0; i < v16; i++ {
		tmps[i] = randUTF8RuneSpotigraph(r)
	}
	return string(tmps)
}
func randUnrecognizedSpotigraph(r randySpotigraph, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldSpotigraph(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldSpotigraph(dAtA []byte, r randySpotigraph, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateSpotigraph(dAtA, uint64(key))
		v17 := r.Int63()
		if r.Intn(2) == 0 {
			v17 *= -1
		}
		dAtA = encodeVarintPopulateSpotigraph(dAtA, uint64(v17))
	case 1:
		dAtA = encodeVarintPopulateSpotigraph(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateSpotigraph(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateSpotigraph(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateSpotigraph(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateSpotigraph(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *Error) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovSpotigraph(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovSpotigraph(uint64(l))
	}
	return n
}

func (m *EmptyRes) Size() (n int) {
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovSpotigraph(uint64(l))
	}
	return n
}

func (m *Domain) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *Domain_User) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovSpotigraph(uint64(l))
	}
	l = len(m.Principal)
	if l > 0 {
		n += 1 + l + sovSpotigraph(uint64(l))
	}
	l = len(m.Urn)
	if l > 0 {
		n += 1 + l + sovSpotigraph(uint64(l))
	}
	return n
}

func (m *Domain_Squad) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovSpotigraph(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSpotigraph(uint64(l))
	}
	l = len(m.Urn)
	if l > 0 {
		n += 1 + l + sovSpotigraph(uint64(l))
	}
	return n
}

func (m *Domain_Chapter) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovSpotigraph(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSpotigraph(uint64(l))
	}
	l = len(m.Urn)
	if l > 0 {
		n += 1 + l + sovSpotigraph(uint64(l))
	}
	return n
}

func (m *Domain_Guild) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovSpotigraph(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSpotigraph(uint64(l))
	}
	l = len(m.Urn)
	if l > 0 {
		n += 1 + l + sovSpotigraph(uint64(l))
	}
	return n
}

func (m *Domain_Tribe) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovSpotigraph(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSpotigraph(uint64(l))
	}
	l = len(m.Urn)
	if l > 0 {
		n += 1 + l + sovSpotigraph(uint64(l))
	}
	return n
}

func (m *Graph) Size() (n int) {
	var l int
	_ = l
	if len(m.Nodes) > 0 {
		for _, e := range m.Nodes {
			l = e.Size()
			n += 1 + l + sovSpotigraph(uint64(l))
		}
	}
	if len(m.Edges) > 0 {
		for _, e := range m.Edges {
			l = e.Size()
			n += 1 + l + sovSpotigraph(uint64(l))
		}
	}
	if len(m.Properties) > 0 {
		for k, v := range m.Properties {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovSpotigraph(uint64(len(k))) + 1 + len(v) + sovSpotigraph(uint64(len(v)))
			n += mapEntrySize + 1 + sovSpotigraph(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *Graph_Node) Size() (n int) {
	var l int
	_ = l
	l = len(m.Urn)
	if l > 0 {
		n += 1 + l + sovSpotigraph(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovSpotigraph(uint64(m.Type))
	}
	if m.Entity != nil {
		n += m.Entity.Size()
	}
	if len(m.Properties) > 0 {
		for k, v := range m.Properties {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovSpotigraph(uint64(len(k))) + 1 + len(v) + sovSpotigraph(uint64(len(v)))
			n += mapEntrySize + 1 + sovSpotigraph(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *Graph_Node_User) Size() (n int) {
	var l int
	_ = l
	if m.User != nil {
		l = m.User.Size()
		n += 1 + l + sovSpotigraph(uint64(l))
	}
	return n
}
func (m *Graph_Node_Chapter) Size() (n int) {
	var l int
	_ = l
	if m.Chapter != nil {
		l = m.Chapter.Size()
		n += 1 + l + sovSpotigraph(uint64(l))
	}
	return n
}
func (m *Graph_Node_Guild) Size() (n int) {
	var l int
	_ = l
	if m.Guild != nil {
		l = m.Guild.Size()
		n += 1 + l + sovSpotigraph(uint64(l))
	}
	return n
}
func (m *Graph_Node_Squad) Size() (n int) {
	var l int
	_ = l
	if m.Squad != nil {
		l = m.Squad.Size()
		n += 1 + l + sovSpotigraph(uint64(l))
	}
	return n
}
func (m *Graph_Node_Tribe) Size() (n int) {
	var l int
	_ = l
	if m.Tribe != nil {
		l = m.Tribe.Size()
		n += 1 + l + sovSpotigraph(uint64(l))
	}
	return n
}
func (m *Graph_Edge) Size() (n int) {
	var l int
	_ = l
	l = len(m.Source)
	if l > 0 {
		n += 1 + l + sovSpotigraph(uint64(l))
	}
	l = len(m.Destination)
	if l > 0 {
		n += 1 + l + sovSpotigraph(uint64(l))
	}
	if len(m.Properties) > 0 {
		for k, v := range m.Properties {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovSpotigraph(uint64(len(k))) + 1 + len(v) + sovSpotigraph(uint64(len(v)))
			n += mapEntrySize + 1 + sovSpotigraph(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *UserCreateReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.Principal)
	if l > 0 {
		n += 1 + l + sovSpotigraph(uint64(l))
	}
	return n
}

func (m *UserGetReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovSpotigraph(uint64(l))
	}
	return n
}

func (m *UserUpdateReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovSpotigraph(uint64(l))
	}
	if m.Principal != nil {
		l = m.Principal.Size()
		n += 1 + l + sovSpotigraph(uint64(l))
	}
	return n
}

func (m *SingleUserRes) Size() (n int) {
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovSpotigraph(uint64(l))
	}
	if m.Entity != nil {
		l = m.Entity.Size()
		n += 1 + l + sovSpotigraph(uint64(l))
	}
	return n
}

func (m *PaginatedUserRes) Size() (n int) {
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovSpotigraph(uint64(l))
	}
	if m.Total != 0 {
		n += 1 + sovSpotigraph(uint64(m.Total))
	}
	if m.PerPage != 0 {
		n += 1 + sovSpotigraph(uint64(m.PerPage))
	}
	if m.Count != 0 {
		n += 1 + sovSpotigraph(uint64(m.Count))
	}
	if m.CurrentPage != 0 {
		n += 1 + sovSpotigraph(uint64(m.CurrentPage))
	}
	if len(m.Members) > 0 {
		for _, e := range m.Members {
			l = e.Size()
			n += 1 + l + sovSpotigraph(uint64(l))
		}
	}
	return n
}

func (m *UserSearchReq) Size() (n int) {
	var l int
	_ = l
	if m.Page != 0 {
		n += 1 + sovSpotigraph(uint64(m.Page))
	}
	if m.PerPage != 0 {
		n += 1 + sovSpotigraph(uint64(m.PerPage))
	}
	if len(m.Sorts) > 0 {
		for _, s := range m.Sorts {
			l = len(s)
			n += 1 + l + sovSpotigraph(uint64(l))
		}
	}
	if m.UserId != nil {
		l = m.UserId.Size()
		n += 1 + l + sovSpotigraph(uint64(l))
	}
	if m.Principal != nil {
		l = m.Principal.Size()
		n += 1 + l + sovSpotigraph(uint64(l))
	}
	return n
}

func (m *SquadCreateReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSpotigraph(uint64(l))
	}
	return n
}

func (m *SquadGetReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovSpotigraph(uint64(l))
	}
	return n
}

func (m *SquadUpdateReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovSpotigraph(uint64(l))
	}
	if m.Name != nil {
		l = m.Name.Size()
		n += 1 + l + sovSpotigraph(uint64(l))
	}
	return n
}

func (m *SingleSquadRes) Size() (n int) {
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovSpotigraph(uint64(l))
	}
	if m.Entity != nil {
		l = m.Entity.Size()
		n += 1 + l + sovSpotigraph(uint64(l))
	}
	return n
}

func (m *PaginatedSquadRes) Size() (n int) {
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovSpotigraph(uint64(l))
	}
	if m.Total != 0 {
		n += 1 + sovSpotigraph(uint64(m.Total))
	}
	if m.PerPage != 0 {
		n += 1 + sovSpotigraph(uint64(m.PerPage))
	}
	if m.Count != 0 {
		n += 1 + sovSpotigraph(uint64(m.Count))
	}
	if m.CurrentPage != 0 {
		n += 1 + sovSpotigraph(uint64(m.CurrentPage))
	}
	if len(m.Members) > 0 {
		for _, e := range m.Members {
			l = e.Size()
			n += 1 + l + sovSpotigraph(uint64(l))
		}
	}
	return n
}

func (m *SquadSearchReq) Size() (n int) {
	var l int
	_ = l
	if m.Page != 0 {
		n += 1 + sovSpotigraph(uint64(m.Page))
	}
	if m.PerPage != 0 {
		n += 1 + sovSpotigraph(uint64(m.PerPage))
	}
	if len(m.Sorts) > 0 {
		for _, s := range m.Sorts {
			l = len(s)
			n += 1 + l + sovSpotigraph(uint64(l))
		}
	}
	if m.SquadId != nil {
		l = m.SquadId.Size()
		n += 1 + l + sovSpotigraph(uint64(l))
	}
	if m.Name != nil {
		l = m.Name.Size()
		n += 1 + l + sovSpotigraph(uint64(l))
	}
	if m.Slug != nil {
		l = m.Slug.Size()
		n += 1 + l + sovSpotigraph(uint64(l))
	}
	return n
}

func (m *ChapterCreateReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSpotigraph(uint64(l))
	}
	return n
}

func (m *ChapterGetReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovSpotigraph(uint64(l))
	}
	return n
}

func (m *ChapterUpdateReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovSpotigraph(uint64(l))
	}
	if m.Name != nil {
		l = m.Name.Size()
		n += 1 + l + sovSpotigraph(uint64(l))
	}
	return n
}

func (m *SingleChapterRes) Size() (n int) {
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovSpotigraph(uint64(l))
	}
	if m.Entity != nil {
		l = m.Entity.Size()
		n += 1 + l + sovSpotigraph(uint64(l))
	}
	return n
}

func (m *PaginatedChapterRes) Size() (n int) {
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovSpotigraph(uint64(l))
	}
	if m.Total != 0 {
		n += 1 + sovSpotigraph(uint64(m.Total))
	}
	if m.PerPage != 0 {
		n += 1 + sovSpotigraph(uint64(m.PerPage))
	}
	if m.Count != 0 {
		n += 1 + sovSpotigraph(uint64(m.Count))
	}
	if m.CurrentPage != 0 {
		n += 1 + sovSpotigraph(uint64(m.CurrentPage))
	}
	if len(m.Members) > 0 {
		for _, e := range m.Members {
			l = e.Size()
			n += 1 + l + sovSpotigraph(uint64(l))
		}
	}
	return n
}

func (m *ChapterSearchReq) Size() (n int) {
	var l int
	_ = l
	if m.Page != 0 {
		n += 1 + sovSpotigraph(uint64(m.Page))
	}
	if m.PerPage != 0 {
		n += 1 + sovSpotigraph(uint64(m.PerPage))
	}
	if len(m.Sorts) > 0 {
		for _, s := range m.Sorts {
			l = len(s)
			n += 1 + l + sovSpotigraph(uint64(l))
		}
	}
	if m.ChapterId != nil {
		l = m.ChapterId.Size()
		n += 1 + l + sovSpotigraph(uint64(l))
	}
	if m.Name != nil {
		l = m.Name.Size()
		n += 1 + l + sovSpotigraph(uint64(l))
	}
	if m.Slug != nil {
		l = m.Slug.Size()
		n += 1 + l + sovSpotigraph(uint64(l))
	}
	return n
}

func (m *GuildCreateReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSpotigraph(uint64(l))
	}
	return n
}

func (m *GuildGetReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovSpotigraph(uint64(l))
	}
	return n
}

func (m *GuildUpdateReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovSpotigraph(uint64(l))
	}
	if m.Name != nil {
		l = m.Name.Size()
		n += 1 + l + sovSpotigraph(uint64(l))
	}
	return n
}

func (m *SingleGuildRes) Size() (n int) {
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovSpotigraph(uint64(l))
	}
	if m.Entity != nil {
		l = m.Entity.Size()
		n += 1 + l + sovSpotigraph(uint64(l))
	}
	return n
}

func (m *PaginatedGuildRes) Size() (n int) {
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovSpotigraph(uint64(l))
	}
	if m.Total != 0 {
		n += 1 + sovSpotigraph(uint64(m.Total))
	}
	if m.PerPage != 0 {
		n += 1 + sovSpotigraph(uint64(m.PerPage))
	}
	if m.Count != 0 {
		n += 1 + sovSpotigraph(uint64(m.Count))
	}
	if m.CurrentPage != 0 {
		n += 1 + sovSpotigraph(uint64(m.CurrentPage))
	}
	if len(m.Members) > 0 {
		for _, e := range m.Members {
			l = e.Size()
			n += 1 + l + sovSpotigraph(uint64(l))
		}
	}
	return n
}

func (m *GuildSearchReq) Size() (n int) {
	var l int
	_ = l
	if m.Page != 0 {
		n += 1 + sovSpotigraph(uint64(m.Page))
	}
	if m.PerPage != 0 {
		n += 1 + sovSpotigraph(uint64(m.PerPage))
	}
	if len(m.Sorts) > 0 {
		for _, s := range m.Sorts {
			l = len(s)
			n += 1 + l + sovSpotigraph(uint64(l))
		}
	}
	if m.GuildId != nil {
		l = m.GuildId.Size()
		n += 1 + l + sovSpotigraph(uint64(l))
	}
	if m.Name != nil {
		l = m.Name.Size()
		n += 1 + l + sovSpotigraph(uint64(l))
	}
	if m.Slug != nil {
		l = m.Slug.Size()
		n += 1 + l + sovSpotigraph(uint64(l))
	}
	return n
}

func (m *TribeCreateReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSpotigraph(uint64(l))
	}
	return n
}

func (m *TribeGetReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovSpotigraph(uint64(l))
	}
	return n
}

func (m *TribeUpdateReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovSpotigraph(uint64(l))
	}
	if m.Name != nil {
		l = m.Name.Size()
		n += 1 + l + sovSpotigraph(uint64(l))
	}
	return n
}

func (m *SingleTribeRes) Size() (n int) {
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovSpotigraph(uint64(l))
	}
	if m.Entity != nil {
		l = m.Entity.Size()
		n += 1 + l + sovSpotigraph(uint64(l))
	}
	return n
}

func (m *PaginatedTribeRes) Size() (n int) {
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovSpotigraph(uint64(l))
	}
	if m.Total != 0 {
		n += 1 + sovSpotigraph(uint64(m.Total))
	}
	if m.PerPage != 0 {
		n += 1 + sovSpotigraph(uint64(m.PerPage))
	}
	if m.Count != 0 {
		n += 1 + sovSpotigraph(uint64(m.Count))
	}
	if m.CurrentPage != 0 {
		n += 1 + sovSpotigraph(uint64(m.CurrentPage))
	}
	if len(m.Members) > 0 {
		for _, e := range m.Members {
			l = e.Size()
			n += 1 + l + sovSpotigraph(uint64(l))
		}
	}
	return n
}

func (m *TribeSearchReq) Size() (n int) {
	var l int
	_ = l
	if m.Page != 0 {
		n += 1 + sovSpotigraph(uint64(m.Page))
	}
	if m.PerPage != 0 {
		n += 1 + sovSpotigraph(uint64(m.PerPage))
	}
	if len(m.Sorts) > 0 {
		for _, s := range m.Sorts {
			l = len(s)
			n += 1 + l + sovSpotigraph(uint64(l))
		}
	}
	if m.TribeId != nil {
		l = m.TribeId.Size()
		n += 1 + l + sovSpotigraph(uint64(l))
	}
	if m.Name != nil {
		l = m.Name.Size()
		n += 1 + l + sovSpotigraph(uint64(l))
	}
	if m.Slug != nil {
		l = m.Slug.Size()
		n += 1 + l + sovSpotigraph(uint64(l))
	}
	return n
}

func (m *NodeInfoReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.Urn)
	if l > 0 {
		n += 1 + l + sovSpotigraph(uint64(l))
	}
	return n
}

func (m *GraphRes) Size() (n int) {
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovSpotigraph(uint64(l))
	}
	if m.Graph != nil {
		l = m.Graph.Size()
		n += 1 + l + sovSpotigraph(uint64(l))
	}
	return n
}

func sovSpotigraph(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozSpotigraph(x uint64) (n int) {
	return sovSpotigraph(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Error) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpotigraph
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Error: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Error: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpotigraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpotigraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpotigraph
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpotigraph(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpotigraph
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EmptyRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpotigraph
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EmptyRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EmptyRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpotigraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpotigraph
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpotigraph(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpotigraph
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Domain) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpotigraph
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Domain: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Domain: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSpotigraph(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpotigraph
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Domain_User) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpotigraph
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: User: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: User: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpotigraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpotigraph
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Principal", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpotigraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpotigraph
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Principal = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Urn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpotigraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpotigraph
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Urn = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpotigraph(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpotigraph
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Domain_Squad) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpotigraph
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Squad: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Squad: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpotigraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpotigraph
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpotigraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpotigraph
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Urn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpotigraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpotigraph
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Urn = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpotigraph(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpotigraph
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Domain_Chapter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpotigraph
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Chapter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Chapter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpotigraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpotigraph
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpotigraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpotigraph
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Urn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpotigraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpotigraph
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Urn = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpotigraph(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpotigraph
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Domain_Guild) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpotigraph
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Guild: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Guild: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpotigraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpotigraph
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpotigraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpotigraph
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Urn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpotigraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpotigraph
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Urn = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpotigraph(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpotigraph
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Domain_Tribe) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpotigraph
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Tribe: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Tribe: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpotigraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpotigraph
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpotigraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpotigraph
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Urn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpotigraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpotigraph
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Urn = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpotigraph(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpotigraph
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Graph) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpotigraph
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Graph: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Graph: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nodes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpotigraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpotigraph
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nodes = append(m.Nodes, &Graph_Node{})
			if err := m.Nodes[len(m.Nodes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Edges", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpotigraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpotigraph
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Edges = append(m.Edges, &Graph_Edge{})
			if err := m.Edges[len(m.Edges)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Properties", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpotigraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpotigraph
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Properties == nil {
				m.Properties = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSpotigraph
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSpotigraph
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthSpotigraph
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSpotigraph
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthSpotigraph
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipSpotigraph(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthSpotigraph
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Properties[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpotigraph(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpotigraph
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Graph_Node) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpotigraph
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Node: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Node: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Urn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpotigraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpotigraph
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Urn = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpotigraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (Graph_Node_Type(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpotigraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpotigraph
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Domain_User{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Entity = &Graph_Node_User{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chapter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpotigraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpotigraph
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Domain_Chapter{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Entity = &Graph_Node_Chapter{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Guild", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpotigraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpotigraph
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Domain_Guild{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Entity = &Graph_Node_Guild{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Squad", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpotigraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpotigraph
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Domain_Squad{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Entity = &Graph_Node_Squad{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tribe", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpotigraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpotigraph
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Domain_Tribe{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Entity = &Graph_Node_Tribe{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Properties", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpotigraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpotigraph
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Properties == nil {
				m.Properties = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSpotigraph
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSpotigraph
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthSpotigraph
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSpotigraph
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthSpotigraph
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipSpotigraph(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthSpotigraph
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Properties[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpotigraph(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpotigraph
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Graph_Edge) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpotigraph
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Edge: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Edge: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpotigraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpotigraph
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Source = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Destination", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpotigraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpotigraph
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Destination = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Properties", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpotigraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpotigraph
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Properties == nil {
				m.Properties = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSpotigraph
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSpotigraph
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthSpotigraph
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSpotigraph
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthSpotigraph
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipSpotigraph(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthSpotigraph
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Properties[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpotigraph(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpotigraph
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserCreateReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpotigraph
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserCreateReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserCreateReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Principal", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpotigraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpotigraph
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Principal = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpotigraph(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpotigraph
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserGetReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpotigraph
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserGetReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserGetReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpotigraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpotigraph
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpotigraph(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpotigraph
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserUpdateReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpotigraph
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserUpdateReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserUpdateReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpotigraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpotigraph
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Principal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpotigraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpotigraph
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Principal == nil {
				m.Principal = &google_protobuf3.StringValue{}
			}
			if err := m.Principal.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpotigraph(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpotigraph
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SingleUserRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpotigraph
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SingleUserRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SingleUserRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpotigraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpotigraph
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpotigraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpotigraph
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Entity == nil {
				m.Entity = &Domain_User{}
			}
			if err := m.Entity.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpotigraph(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpotigraph
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PaginatedUserRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpotigraph
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PaginatedUserRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PaginatedUserRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpotigraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpotigraph
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpotigraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PerPage", wireType)
			}
			m.PerPage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpotigraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PerPage |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpotigraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentPage", wireType)
			}
			m.CurrentPage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpotigraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentPage |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Members", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpotigraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpotigraph
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Members = append(m.Members, &Domain_User{})
			if err := m.Members[len(m.Members)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpotigraph(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpotigraph
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserSearchReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpotigraph
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserSearchReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserSearchReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpotigraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PerPage", wireType)
			}
			m.PerPage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpotigraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PerPage |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sorts", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpotigraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpotigraph
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sorts = append(m.Sorts, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpotigraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpotigraph
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserId == nil {
				m.UserId = &google_protobuf3.StringValue{}
			}
			if err := m.UserId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Principal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpotigraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpotigraph
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Principal == nil {
				m.Principal = &google_protobuf3.StringValue{}
			}
			if err := m.Principal.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpotigraph(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpotigraph
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SquadCreateReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpotigraph
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SquadCreateReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SquadCreateReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpotigraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpotigraph
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpotigraph(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpotigraph
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SquadGetReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpotigraph
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SquadGetReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SquadGetReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpotigraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpotigraph
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpotigraph(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpotigraph
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SquadUpdateReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpotigraph
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SquadUpdateReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SquadUpdateReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpotigraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpotigraph
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpotigraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpotigraph
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Name == nil {
				m.Name = &google_protobuf3.StringValue{}
			}
			if err := m.Name.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpotigraph(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpotigraph
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SingleSquadRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpotigraph
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SingleSquadRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SingleSquadRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpotigraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpotigraph
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpotigraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpotigraph
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Entity == nil {
				m.Entity = &Domain_Squad{}
			}
			if err := m.Entity.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpotigraph(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpotigraph
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PaginatedSquadRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpotigraph
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PaginatedSquadRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PaginatedSquadRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpotigraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpotigraph
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpotigraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PerPage", wireType)
			}
			m.PerPage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpotigraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PerPage |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpotigraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentPage", wireType)
			}
			m.CurrentPage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpotigraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentPage |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Members", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpotigraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpotigraph
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Members = append(m.Members, &Domain_Squad{})
			if err := m.Members[len(m.Members)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpotigraph(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpotigraph
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SquadSearchReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpotigraph
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SquadSearchReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SquadSearchReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpotigraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PerPage", wireType)
			}
			m.PerPage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpotigraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PerPage |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sorts", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpotigraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpotigraph
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sorts = append(m.Sorts, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SquadId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpotigraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpotigraph
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SquadId == nil {
				m.SquadId = &google_protobuf3.StringValue{}
			}
			if err := m.SquadId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpotigraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpotigraph
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Name == nil {
				m.Name = &google_protobuf3.StringValue{}
			}
			if err := m.Name.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpotigraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpotigraph
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Slug == nil {
				m.Slug = &google_protobuf3.StringValue{}
			}
			if err := m.Slug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpotigraph(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpotigraph
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChapterCreateReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpotigraph
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChapterCreateReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChapterCreateReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpotigraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpotigraph
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpotigraph(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpotigraph
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChapterGetReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpotigraph
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChapterGetReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChapterGetReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpotigraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpotigraph
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpotigraph(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpotigraph
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChapterUpdateReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpotigraph
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChapterUpdateReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChapterUpdateReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpotigraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpotigraph
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpotigraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpotigraph
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Name == nil {
				m.Name = &google_protobuf3.StringValue{}
			}
			if err := m.Name.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpotigraph(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpotigraph
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SingleChapterRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpotigraph
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SingleChapterRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SingleChapterRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpotigraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpotigraph
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpotigraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpotigraph
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Entity == nil {
				m.Entity = &Domain_Chapter{}
			}
			if err := m.Entity.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpotigraph(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpotigraph
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PaginatedChapterRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpotigraph
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PaginatedChapterRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PaginatedChapterRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpotigraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpotigraph
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpotigraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PerPage", wireType)
			}
			m.PerPage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpotigraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PerPage |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpotigraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentPage", wireType)
			}
			m.CurrentPage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpotigraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentPage |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Members", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpotigraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpotigraph
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Members = append(m.Members, &Domain_Chapter{})
			if err := m.Members[len(m.Members)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpotigraph(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpotigraph
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChapterSearchReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpotigraph
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChapterSearchReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChapterSearchReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpotigraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PerPage", wireType)
			}
			m.PerPage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpotigraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PerPage |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sorts", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpotigraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpotigraph
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sorts = append(m.Sorts, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChapterId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpotigraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpotigraph
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChapterId == nil {
				m.ChapterId = &google_protobuf3.StringValue{}
			}
			if err := m.ChapterId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpotigraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpotigraph
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Name == nil {
				m.Name = &google_protobuf3.StringValue{}
			}
			if err := m.Name.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpotigraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpotigraph
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Slug == nil {
				m.Slug = &google_protobuf3.StringValue{}
			}
			if err := m.Slug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpotigraph(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpotigraph
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuildCreateReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpotigraph
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GuildCreateReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GuildCreateReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpotigraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpotigraph
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpotigraph(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpotigraph
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuildGetReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpotigraph
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GuildGetReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GuildGetReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpotigraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpotigraph
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpotigraph(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpotigraph
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuildUpdateReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpotigraph
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GuildUpdateReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GuildUpdateReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpotigraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpotigraph
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpotigraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpotigraph
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Name == nil {
				m.Name = &google_protobuf3.StringValue{}
			}
			if err := m.Name.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpotigraph(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpotigraph
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SingleGuildRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpotigraph
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SingleGuildRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SingleGuildRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpotigraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpotigraph
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpotigraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpotigraph
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Entity == nil {
				m.Entity = &Domain_Guild{}
			}
			if err := m.Entity.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpotigraph(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpotigraph
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PaginatedGuildRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpotigraph
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PaginatedGuildRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PaginatedGuildRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpotigraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpotigraph
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpotigraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PerPage", wireType)
			}
			m.PerPage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpotigraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PerPage |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpotigraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentPage", wireType)
			}
			m.CurrentPage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpotigraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentPage |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Members", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpotigraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpotigraph
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Members = append(m.Members, &Domain_Guild{})
			if err := m.Members[len(m.Members)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpotigraph(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpotigraph
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuildSearchReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpotigraph
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GuildSearchReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GuildSearchReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpotigraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PerPage", wireType)
			}
			m.PerPage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpotigraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PerPage |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sorts", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpotigraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpotigraph
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sorts = append(m.Sorts, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuildId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpotigraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpotigraph
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GuildId == nil {
				m.GuildId = &google_protobuf3.StringValue{}
			}
			if err := m.GuildId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpotigraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpotigraph
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Name == nil {
				m.Name = &google_protobuf3.StringValue{}
			}
			if err := m.Name.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpotigraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpotigraph
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Slug == nil {
				m.Slug = &google_protobuf3.StringValue{}
			}
			if err := m.Slug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpotigraph(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpotigraph
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TribeCreateReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpotigraph
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TribeCreateReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TribeCreateReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpotigraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpotigraph
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpotigraph(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpotigraph
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TribeGetReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpotigraph
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TribeGetReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TribeGetReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpotigraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpotigraph
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpotigraph(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpotigraph
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TribeUpdateReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpotigraph
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TribeUpdateReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TribeUpdateReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpotigraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpotigraph
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpotigraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpotigraph
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Name == nil {
				m.Name = &google_protobuf3.StringValue{}
			}
			if err := m.Name.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpotigraph(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpotigraph
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SingleTribeRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpotigraph
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SingleTribeRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SingleTribeRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpotigraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpotigraph
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpotigraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpotigraph
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Entity == nil {
				m.Entity = &Domain_Tribe{}
			}
			if err := m.Entity.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpotigraph(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpotigraph
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PaginatedTribeRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpotigraph
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PaginatedTribeRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PaginatedTribeRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpotigraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpotigraph
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpotigraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PerPage", wireType)
			}
			m.PerPage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpotigraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PerPage |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpotigraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentPage", wireType)
			}
			m.CurrentPage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpotigraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentPage |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Members", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpotigraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpotigraph
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Members = append(m.Members, &Domain_Tribe{})
			if err := m.Members[len(m.Members)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpotigraph(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpotigraph
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TribeSearchReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpotigraph
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TribeSearchReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TribeSearchReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpotigraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PerPage", wireType)
			}
			m.PerPage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpotigraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PerPage |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sorts", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpotigraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpotigraph
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sorts = append(m.Sorts, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TribeId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpotigraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpotigraph
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TribeId == nil {
				m.TribeId = &google_protobuf3.StringValue{}
			}
			if err := m.TribeId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpotigraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpotigraph
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Name == nil {
				m.Name = &google_protobuf3.StringValue{}
			}
			if err := m.Name.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpotigraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpotigraph
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Slug == nil {
				m.Slug = &google_protobuf3.StringValue{}
			}
			if err := m.Slug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpotigraph(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpotigraph
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeInfoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpotigraph
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeInfoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeInfoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Urn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpotigraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpotigraph
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Urn = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpotigraph(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpotigraph
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GraphRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpotigraph
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GraphRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GraphRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpotigraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpotigraph
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Graph", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpotigraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpotigraph
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Graph == nil {
				m.Graph = &Graph{}
			}
			if err := m.Graph.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpotigraph(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpotigraph
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSpotigraph(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSpotigraph
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSpotigraph
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSpotigraph
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthSpotigraph
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSpotigraph
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSpotigraph(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSpotigraph = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSpotigraph   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("pkg/protocol/v1/spotigraph/spotigraph.proto", fileDescriptorSpotigraph)
}

var fileDescriptorSpotigraph = []byte{
	// 1372 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x58, 0x4f, 0x6f, 0x1b, 0x45,
	0x14, 0xcf, 0xd8, 0xbb, 0xfe, 0xf3, 0x8c, 0x53, 0x33, 0x0d, 0xc8, 0x75, 0x8b, 0x49, 0x4d, 0x25,
	0xd2, 0x54, 0x71, 0x5a, 0x97, 0xd0, 0xb4, 0xa5, 0x82, 0xa6, 0x71, 0x13, 0x4b, 0x10, 0x85, 0x4d,
	0xc2, 0xa1, 0x15, 0x2d, 0x1b, 0xef, 0x74, 0xb3, 0xaa, 0xb3, 0xbb, 0x9d, 0x5d, 0xa7, 0x32, 0x27,
	0x3e, 0x06, 0x1f, 0x81, 0x8f, 0x50, 0x71, 0xaa, 0xb8, 0x80, 0x38, 0x20, 0x3e, 0x01, 0x2a, 0x11,
	0x97, 0x5e, 0x39, 0xf5, 0x88, 0xe6, 0xcd, 0xd8, 0x71, 0x1c, 0xd7, 0x8d, 0x17, 0xc7, 0xea, 0x6d,
	0x66, 0xf6, 0xfd, 0xde, 0x9b, 0x37, 0xef, 0xf7, 0x9b, 0xb7, 0xbb, 0x70, 0xc9, 0x7f, 0x6c, 0xcf,
	0xfb, 0xdc, 0x0b, 0xbd, 0xba, 0xd7, 0x98, 0xdf, 0xbb, 0x32, 0x1f, 0xf8, 0x5e, 0xe8, 0xd8, 0xdc,
	0xf4, 0x77, 0xba, 0x86, 0x65, 0xb4, 0xa0, 0xd9, 0xae, 0x95, 0xbd, 0x2b, 0x85, 0x39, 0xdb, 0x09,
	0x77, 0x9a, 0xdb, 0xe5, 0xba, 0xb7, 0x3b, 0x6f, 0x7b, 0xb6, 0x27, 0xfd, 0x6c, 0x37, 0x1f, 0xe1,
	0x0c, 0x27, 0x38, 0x92, 0xe8, 0xc2, 0xcd, 0x2e, 0xf3, 0x46, 0xeb, 0x51, 0xa8, 0xc2, 0xce, 0xd9,
	0xcc, 0x9d, 0xdb, 0x33, 0x1b, 0x8e, 0x65, 0x86, 0x6c, 0xfe, 0xc8, 0x40, 0x81, 0x8b, 0xb6, 0xe7,
	0xd9, 0x0d, 0x76, 0x10, 0xe2, 0x29, 0x37, 0x7d, 0x9f, 0xf1, 0x40, 0x3e, 0x2f, 0x2d, 0x80, 0x5e,
	0xe5, 0xdc, 0xe3, 0x94, 0x82, 0x56, 0xf7, 0x2c, 0x96, 0x27, 0xd3, 0x64, 0x26, 0x6b, 0xe0, 0x98,
	0xe6, 0x21, 0xb9, 0xcb, 0x82, 0xc0, 0xb4, 0x59, 0x3e, 0x36, 0x4d, 0x66, 0xd2, 0x46, 0x7b, 0x5a,
	0xfa, 0x14, 0x52, 0xd5, 0x5d, 0x3f, 0x6c, 0x19, 0x2c, 0xa0, 0xb3, 0xa0, 0x33, 0xe1, 0x02, 0xa1,
	0x99, 0xca, 0x54, 0xf9, 0x50, 0xb6, 0x65, 0x74, 0x6f, 0x48, 0x93, 0xd2, 0x1f, 0x31, 0x48, 0x2c,
	0x7b, 0xbb, 0xa6, 0xe3, 0x16, 0xee, 0x82, 0xb6, 0x15, 0x30, 0x4e, 0x27, 0x21, 0xe6, 0x58, 0x88,
	0x4d, 0x1b, 0x31, 0xc7, 0xa2, 0xe7, 0x20, 0xed, 0x73, 0xc7, 0xad, 0x3b, 0xbe, 0xd9, 0x50, 0x61,
	0x0f, 0x16, 0x68, 0x0e, 0xe2, 0x4d, 0xee, 0xe6, 0xe3, 0xb8, 0x2e, 0x86, 0x85, 0x5b, 0xa0, 0x6f,
	0x3c, 0x69, 0x9a, 0xd6, 0x11, 0x47, 0x14, 0x34, 0xd7, 0xdc, 0x6d, 0x6f, 0x1d, 0xc7, 0x7d, 0xe0,
	0x9f, 0x43, 0xf2, 0xce, 0x8e, 0xe9, 0x87, 0x7d, 0x76, 0x72, 0x3c, 0x07, 0xb7, 0x40, 0x5f, 0x69,
	0x3a, 0x0d, 0x2b, 0x3a, 0x7c, 0x93, 0x3b, 0xdb, 0x2c, 0x1a, 0xbc, 0xf4, 0x43, 0x0a, 0xf4, 0x15,
	0x71, 0xd4, 0x74, 0x1e, 0x74, 0xd7, 0xb3, 0x58, 0x90, 0x27, 0xd3, 0xf1, 0x99, 0x4c, 0xe5, 0x4c,
	0x4f, 0x19, 0xd0, 0xa8, 0xbc, 0xe6, 0x59, 0xcc, 0x90, 0x76, 0x02, 0xc0, 0x2c, 0x9b, 0x05, 0xf9,
	0xd8, 0x00, 0x40, 0xd5, 0xb2, 0x99, 0x21, 0xed, 0xe8, 0x32, 0x80, 0xcf, 0x3d, 0x9f, 0xf1, 0xd0,
	0x61, 0x41, 0x3e, 0x8e, 0xa8, 0x0b, 0x7d, 0x51, 0xeb, 0x1d, 0xb3, 0xaa, 0x1b, 0xf2, 0x96, 0xd1,
	0x85, 0x2b, 0xfc, 0xa2, 0x81, 0x26, 0xb6, 0xd1, 0x4e, 0x86, 0x74, 0x92, 0xa1, 0x15, 0xd0, 0xc2,
	0x96, 0x2f, 0x53, 0x9e, 0xac, 0x14, 0x5f, 0x9b, 0x41, 0x79, 0xb3, 0xe5, 0x33, 0x03, 0x6d, 0xe9,
	0x65, 0xd0, 0x9a, 0x01, 0xe3, 0x78, 0x26, 0x99, 0x4a, 0xa1, 0x07, 0x23, 0xb9, 0x56, 0x16, 0x44,
	0x5b, 0x9d, 0x30, 0xd0, 0x92, 0x5e, 0x87, 0x64, 0x5d, 0x56, 0x3c, 0xaf, 0x21, 0xe8, 0x83, 0xfe,
	0x20, 0x45, 0x8b, 0xd5, 0x09, 0xa3, 0x6d, 0x4f, 0xaf, 0x82, 0x6e, 0x8b, 0x5a, 0xe7, 0x75, 0x04,
	0x9e, 0xed, 0x0f, 0x44, 0x3a, 0xac, 0x4e, 0x18, 0xd2, 0x56, 0x80, 0x02, 0x41, 0xd0, 0x7c, 0x62,
	0x10, 0x08, 0x39, 0x2c, 0x40, 0x68, 0x2b, 0x40, 0xa1, 0xa0, 0x45, 0x3e, 0x39, 0x08, 0x84, 0xcc,
	0x11, 0x20, 0xb4, 0xa5, 0xb5, 0x43, 0x05, 0x4a, 0x61, 0x81, 0x2e, 0xbe, 0xfe, 0x14, 0x07, 0x55,
	0xe9, 0x16, 0x9c, 0xea, 0x79, 0x2c, 0xea, 0xf5, 0x98, 0xb5, 0xda, 0xf5, 0x7a, 0xcc, 0x5a, 0x74,
	0x0a, 0xf4, 0x3d, 0xb3, 0xd1, 0x6c, 0x73, 0x54, 0x4e, 0x6e, 0xc4, 0x16, 0x49, 0xe9, 0x2b, 0xd0,
	0x44, 0x8d, 0x68, 0x16, 0xd2, 0x5b, 0x6b, 0xcb, 0xd5, 0xbb, 0xb5, 0xb5, 0xea, 0x72, 0x6e, 0x82,
	0xa6, 0x40, 0xdb, 0xda, 0xa8, 0x1a, 0x39, 0x42, 0x33, 0x90, 0xbc, 0xb3, 0x7a, 0x7b, 0x7d, 0xb3,
	0x6a, 0xe4, 0x62, 0x34, 0x0d, 0xfa, 0xca, 0x56, 0xed, 0xcb, 0xe5, 0x5c, 0x5c, 0x0c, 0x37, 0xbe,
	0xde, 0xba, 0xbd, 0x9c, 0xd3, 0xc4, 0x70, 0xd3, 0xa8, 0x2d, 0x55, 0x73, 0xfa, 0xd2, 0x29, 0x48,
	0x30, 0x37, 0x74, 0xc2, 0x16, 0xd5, 0x9f, 0xbd, 0x7c, 0x1e, 0x27, 0x85, 0xdf, 0x09, 0x68, 0x82,
	0x9a, 0xf4, 0x7d, 0x48, 0x04, 0x5e, 0x93, 0xd7, 0x99, 0xda, 0x97, 0x9a, 0xd1, 0x69, 0xc8, 0x58,
	0x2c, 0x08, 0x1d, 0xd7, 0x0c, 0x1d, 0xcf, 0x55, 0x1b, 0xec, 0x5e, 0xea, 0x39, 0xac, 0xf8, 0x80,
	0xc3, 0x12, 0x81, 0x4e, 0xf0, 0xb0, 0xfe, 0xef, 0x59, 0x2f, 0x42, 0x56, 0xf0, 0xfb, 0x0e, 0x67,
	0x66, 0xc8, 0x0c, 0xf6, 0x84, 0x7e, 0xdc, 0x7d, 0x83, 0xa2, 0x8b, 0xa5, 0xf4, 0xcf, 0x2f, 0x9f,
	0xc7, 0x35, 0x1e, 0xfb, 0x8e, 0x74, 0x5d, 0xa6, 0xa5, 0x45, 0x00, 0x81, 0x5c, 0x61, 0xa1, 0x80,
	0xcd, 0x1e, 0x5c, 0x40, 0x4b, 0x05, 0x61, 0xff, 0x1e, 0x3f, 0x5d, 0x99, 0x7c, 0x70, 0xff, 0xf2,
	0xdc, 0xf5, 0xdb, 0x73, 0xf7, 0xcc, 0xb9, 0xef, 0xbf, 0xbd, 0x74, 0xe1, 0x47, 0xf2, 0x85, 0xb8,
	0x9c, 0x4a, 0x4f, 0x65, 0xcc, 0x2d, 0xdf, 0x52, 0x31, 0x87, 0x00, 0xd3, 0x1b, 0xbd, 0x37, 0x7c,
	0xa6, 0x72, 0xae, 0x2c, 0xfb, 0x54, 0xb9, 0xdd, 0xa7, 0xca, 0x1b, 0x21, 0x77, 0x5c, 0xfb, 0x1b,
	0x91, 0x65, 0xf7, 0x96, 0x3d, 0xc8, 0x6e, 0x38, 0xae, 0xdd, 0x60, 0x22, 0xfc, 0x90, 0xdd, 0x87,
	0x56, 0xda, 0x34, 0x52, 0x51, 0x07, 0xdc, 0x16, 0x86, 0xb2, 0x2c, 0xfd, 0x45, 0x20, 0xb7, 0x6e,
	0xda, 0x82, 0x35, 0xcc, 0x8a, 0x12, 0x74, 0x0a, 0xf4, 0xd0, 0x0b, 0x55, 0xa6, 0x59, 0x43, 0x4e,
	0xe8, 0x19, 0x48, 0xf9, 0x8c, 0x3f, 0xf4, 0x45, 0x6f, 0x8d, 0xe3, 0x83, 0xa4, 0xcf, 0xf8, 0xba,
	0x69, 0x33, 0x01, 0xa8, 0x7b, 0x4d, 0x37, 0xc4, 0xdb, 0x29, 0x6b, 0xc8, 0x09, 0x3d, 0x0f, 0xef,
	0xd4, 0x9b, 0x9c, 0x33, 0x37, 0x94, 0x20, 0x1d, 0x1f, 0x66, 0xd4, 0x1a, 0x02, 0x3f, 0x11, 0xed,
	0x7a, 0x77, 0x9b, 0xf1, 0x20, 0x9f, 0x40, 0x3a, 0x0f, 0xca, 0xaf, 0x6d, 0x5a, 0xfa, 0x95, 0xc8,
	0x5a, 0x6e, 0x30, 0x93, 0xd7, 0x77, 0x44, 0x2d, 0x29, 0x68, 0x18, 0x42, 0xbd, 0x0a, 0x88, 0xf1,
	0xa1, 0xfd, 0xc6, 0x8e, 0xec, 0x37, 0xf0, 0x78, 0x28, 0x35, 0x94, 0x36, 0xe4, 0x84, 0x2e, 0x40,
	0x52, 0xdc, 0xb6, 0x0f, 0x1d, 0x4b, 0xdd, 0xb2, 0x83, 0x4b, 0x9c, 0x10, 0xc6, 0xb5, 0x1e, 0x6e,
	0xe8, 0xc3, 0x71, 0x63, 0x0d, 0x26, 0xf1, 0x16, 0x3d, 0x50, 0xc2, 0x67, 0xaa, 0x87, 0x4a, 0x5e,
	0xce, 0x08, 0x5e, 0x7e, 0xc4, 0xcf, 0x4f, 0xc7, 0x67, 0x2a, 0x95, 0xb3, 0x0f, 0xee, 0xb7, 0x89,
	0x39, 0x73, 0x7f, 0xba, 0x8b, 0xa6, 0x17, 0x67, 0x2f, 0xc8, 0x6e, 0x5b, 0xba, 0x0e, 0x19, 0xf4,
	0x17, 0x41, 0x1f, 0xae, 0xda, 0x4a, 0x34, 0x81, 0x5c, 0xee, 0x6a, 0xfd, 0x6f, 0xca, 0x5f, 0x6e,
	0xf5, 0x09, 0x4c, 0x4a, 0x59, 0x60, 0xd4, 0x61, 0x29, 0x7a, 0xb5, 0x47, 0x17, 0x83, 0x5a, 0x54,
	0x47, 0x18, 0x2f, 0x08, 0xbc, 0xdb, 0x11, 0x46, 0xa4, 0xb0, 0xe3, 0x53, 0xc6, 0x42, 0xaf, 0x32,
	0x06, 0x66, 0xd8, 0x91, 0xc6, 0xbf, 0x44, 0x95, 0x71, 0xc4, 0xda, 0xb8, 0x06, 0x29, 0xec, 0xf2,
	0xc7, 0x15, 0x47, 0x12, 0xad, 0x6b, 0x07, 0xc4, 0xd0, 0x8f, 0x4b, 0x0c, 0x81, 0x08, 0x1a, 0x4d,
	0x5b, 0xbd, 0x7b, 0xbc, 0x01, 0x21, 0x2c, 0x4b, 0xeb, 0x90, 0x53, 0x6f, 0x3e, 0xa3, 0xd2, 0xd1,
	0x4d, 0xc8, 0x2a, 0x8f, 0x11, 0x94, 0xe4, 0x77, 0xb6, 0x33, 0x2e, 0x2d, 0x35, 0x21, 0x27, 0xb5,
	0xa4, 0xe2, 0x0e, 0x4b, 0xeb, 0x85, 0x1e, 0x35, 0x0d, 0x7e, 0xbd, 0xec, 0xe8, 0xe9, 0x1f, 0x02,
	0xa7, 0x3b, 0x7a, 0x8a, 0x18, 0x7a, 0x7c, 0x8a, 0xba, 0xd6, 0xab, 0xa8, 0x37, 0x64, 0xd9, 0xd1,
	0xd4, 0x2b, 0xd2, 0x29, 0xe8, 0x88, 0x55, 0x75, 0x13, 0x40, 0xbd, 0xa7, 0x1f, 0x57, 0x57, 0x69,
	0x65, 0x3f, 0x26, 0x65, 0xad, 0xc1, 0x24, 0x7e, 0x1a, 0x8c, 0xb0, 0x3f, 0xa1, 0xbf, 0x68, 0xfd,
	0x09, 0xa1, 0x63, 0xef, 0x4f, 0x18, 0xf5, 0x84, 0xfa, 0x93, 0xf4, 0xdd, 0xb7, 0x3f, 0x45, 0x0a,
	0xfb, 0xf6, 0xf5, 0x27, 0x99, 0xc6, 0xa1, 0xfe, 0x84, 0x4b, 0xa3, 0xef, 0x4f, 0xf8, 0xe9, 0x7a,
	0xec, 0xfe, 0x84, 0xd6, 0xe3, 0x53, 0x11, 0x7e, 0xf6, 0x8e, 0x50, 0x45, 0xe8, 0x2f, 0x9a, 0x8a,
	0x10, 0x3a, 0x76, 0x15, 0x61, 0xd4, 0x13, 0x52, 0x91, 0xf4, 0xdd, 0x57, 0x45, 0x91, 0xc2, 0xbe,
	0x7d, 0x2a, 0x92, 0x69, 0x1c, 0x52, 0x11, 0x2e, 0x8d, 0x5e, 0x45, 0xf8, 0x5b, 0xe6, 0xd8, 0x2a,
	0x42, 0xeb, 0x31, 0xa9, 0xe8, 0x43, 0xc8, 0xac, 0x79, 0x16, 0xab, 0xb9, 0x8f, 0x3c, 0x91, 0xf0,
	0x91, 0x7f, 0x71, 0xa5, 0x6d, 0x48, 0xe1, 0xdf, 0x8f, 0x61, 0xcb, 0x3d, 0x0b, 0x3a, 0x3e, 0x50,
	0x24, 0x9b, 0xea, 0xf7, 0x47, 0xc5, 0x90, 0x26, 0x4b, 0x8b, 0xaf, 0xfe, 0x2e, 0x92, 0x9f, 0xf6,
	0x8b, 0xe4, 0xd9, 0x7e, 0x91, 0x3c, 0xdf, 0x2f, 0x92, 0xdf, 0xf6, 0x8b, 0xe4, 0xcf, 0xfd, 0x22,
	0x79, 0xb1, 0x5f, 0x24, 0xf7, 0x0a, 0xaf, 0xff, 0xc5, 0xbe, 0x9d, 0xc0, 0xf5, 0xab, 0xff, 0x05,
	0x00, 0x00, 0xff, 0xff, 0x50, 0xbb, 0xb6, 0x1f, 0x87, 0x17, 0x00, 0x00,
}
