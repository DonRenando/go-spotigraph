// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: pkg/protocol/v1/spotigraph/spotigraph.proto

package spotigraph

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/gogo/protobuf/types"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = types.DynamicAny{}
)

// Validate checks the field values on Error with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Error) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	return nil
}

// ErrorValidationError is the validation error returned by Error.Validate if
// the designated constraints aren't met.
type ErrorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ErrorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ErrorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ErrorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ErrorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ErrorValidationError) ErrorName() string { return "ErrorValidationError" }

// Error satisfies the builtin error interface
func (e ErrorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sError.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ErrorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ErrorValidationError{}

// Validate checks the field values on EmptyRes with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *EmptyRes) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EmptyResValidationError{
				field:  "Error",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// EmptyResValidationError is the validation error returned by
// EmptyRes.Validate if the designated constraints aren't met.
type EmptyResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EmptyResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EmptyResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EmptyResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EmptyResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EmptyResValidationError) ErrorName() string { return "EmptyResValidationError" }

// Error satisfies the builtin error interface
func (e EmptyResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEmptyRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EmptyResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EmptyResValidationError{}

// Validate checks the field values on Domain with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Domain) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// DomainValidationError is the validation error returned by Domain.Validate if
// the designated constraints aren't met.
type DomainValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DomainValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DomainValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DomainValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DomainValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DomainValidationError) ErrorName() string { return "DomainValidationError" }

// Error satisfies the builtin error interface
func (e DomainValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDomain.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DomainValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DomainValidationError{}

// Validate checks the field values on Graph with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Graph) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetNodes() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GraphValidationError{
					field:  fmt.Sprintf("Nodes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetEdges() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GraphValidationError{
					field:  fmt.Sprintf("Edges[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Properties

	return nil
}

// GraphValidationError is the validation error returned by Graph.Validate if
// the designated constraints aren't met.
type GraphValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GraphValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GraphValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GraphValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GraphValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GraphValidationError) ErrorName() string { return "GraphValidationError" }

// Error satisfies the builtin error interface
func (e GraphValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGraph.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GraphValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GraphValidationError{}

// Validate checks the field values on UserCreateReq with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *UserCreateReq) Validate() error {
	if m == nil {
		return nil
	}

	if err := m._validateEmail(m.GetPrincipal()); err != nil {
		return UserCreateReqValidationError{
			field:  "Principal",
			reason: "value must be a valid email address",
			cause:  err,
		}
	}

	return nil
}

func (m *UserCreateReq) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *UserCreateReq) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// UserCreateReqValidationError is the validation error returned by
// UserCreateReq.Validate if the designated constraints aren't met.
type UserCreateReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserCreateReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserCreateReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserCreateReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserCreateReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserCreateReqValidationError) ErrorName() string { return "UserCreateReqValidationError" }

// Error satisfies the builtin error interface
func (e UserCreateReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserCreateReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserCreateReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserCreateReqValidationError{}

// Validate checks the field values on UserGetReq with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *UserGetReq) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetId()) != 64 {
		return UserGetReqValidationError{
			field:  "Id",
			reason: "value length must be 64 runes",
		}
	}

	if !_UserGetReq_Id_Pattern.MatchString(m.GetId()) {
		return UserGetReqValidationError{
			field:  "Id",
			reason: "value does not match regex pattern \"^[0-9A-Za-z]+$\"",
		}
	}

	return nil
}

// UserGetReqValidationError is the validation error returned by
// UserGetReq.Validate if the designated constraints aren't met.
type UserGetReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserGetReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserGetReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserGetReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserGetReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserGetReqValidationError) ErrorName() string { return "UserGetReqValidationError" }

// Error satisfies the builtin error interface
func (e UserGetReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserGetReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserGetReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserGetReqValidationError{}

var _UserGetReq_Id_Pattern = regexp.MustCompile("^[0-9A-Za-z]+$")

// Validate checks the field values on UserUpdateReq with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *UserUpdateReq) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetId()) != 64 {
		return UserUpdateReqValidationError{
			field:  "Id",
			reason: "value length must be 64 runes",
		}
	}

	if !_UserUpdateReq_Id_Pattern.MatchString(m.GetId()) {
		return UserUpdateReqValidationError{
			field:  "Id",
			reason: "value does not match regex pattern \"^[0-9A-Za-z]+$\"",
		}
	}

	if v, ok := interface{}(m.GetPrincipal()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserUpdateReqValidationError{
				field:  "Principal",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UserUpdateReqValidationError is the validation error returned by
// UserUpdateReq.Validate if the designated constraints aren't met.
type UserUpdateReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserUpdateReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserUpdateReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserUpdateReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserUpdateReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserUpdateReqValidationError) ErrorName() string { return "UserUpdateReqValidationError" }

// Error satisfies the builtin error interface
func (e UserUpdateReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserUpdateReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserUpdateReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserUpdateReqValidationError{}

var _UserUpdateReq_Id_Pattern = regexp.MustCompile("^[0-9A-Za-z]+$")

// Validate checks the field values on SingleUserRes with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *SingleUserRes) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SingleUserResValidationError{
				field:  "Error",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetEntity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SingleUserResValidationError{
				field:  "Entity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// SingleUserResValidationError is the validation error returned by
// SingleUserRes.Validate if the designated constraints aren't met.
type SingleUserResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SingleUserResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SingleUserResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SingleUserResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SingleUserResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SingleUserResValidationError) ErrorName() string { return "SingleUserResValidationError" }

// Error satisfies the builtin error interface
func (e SingleUserResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSingleUserRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SingleUserResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SingleUserResValidationError{}

// Validate checks the field values on PaginatedUserRes with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *PaginatedUserRes) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PaginatedUserResValidationError{
				field:  "Error",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Total

	// no validation rules for PerPage

	// no validation rules for Count

	// no validation rules for CurrentPage

	for idx, item := range m.GetMembers() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PaginatedUserResValidationError{
					field:  fmt.Sprintf("Members[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// PaginatedUserResValidationError is the validation error returned by
// PaginatedUserRes.Validate if the designated constraints aren't met.
type PaginatedUserResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PaginatedUserResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PaginatedUserResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PaginatedUserResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PaginatedUserResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PaginatedUserResValidationError) ErrorName() string { return "PaginatedUserResValidationError" }

// Error satisfies the builtin error interface
func (e PaginatedUserResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPaginatedUserRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PaginatedUserResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PaginatedUserResValidationError{}

// Validate checks the field values on UserSearchReq with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *UserSearchReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Page

	// no validation rules for PerPage

	if v, ok := interface{}(m.GetUserId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserSearchReqValidationError{
				field:  "UserId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPrincipal()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserSearchReqValidationError{
				field:  "Principal",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UserSearchReqValidationError is the validation error returned by
// UserSearchReq.Validate if the designated constraints aren't met.
type UserSearchReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserSearchReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserSearchReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserSearchReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserSearchReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserSearchReqValidationError) ErrorName() string { return "UserSearchReqValidationError" }

// Error satisfies the builtin error interface
func (e UserSearchReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserSearchReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserSearchReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserSearchReqValidationError{}

// Validate checks the field values on SquadCreateReq with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *SquadCreateReq) Validate() error {
	if m == nil {
		return nil
	}

	if l := len(m.GetName()); l < 3 || l > 50 {
		return SquadCreateReqValidationError{
			field:  "Name",
			reason: "value length must be between 3 and 50 bytes, inclusive",
		}
	}

	if !_SquadCreateReq_Name_Pattern.MatchString(m.GetName()) {
		return SquadCreateReqValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"^[A-Za-z]+([ 0-9A-Za-z]+)*$\"",
		}
	}

	return nil
}

// SquadCreateReqValidationError is the validation error returned by
// SquadCreateReq.Validate if the designated constraints aren't met.
type SquadCreateReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SquadCreateReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SquadCreateReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SquadCreateReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SquadCreateReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SquadCreateReqValidationError) ErrorName() string { return "SquadCreateReqValidationError" }

// Error satisfies the builtin error interface
func (e SquadCreateReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSquadCreateReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SquadCreateReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SquadCreateReqValidationError{}

var _SquadCreateReq_Name_Pattern = regexp.MustCompile("^[A-Za-z]+([ 0-9A-Za-z]+)*$")

// Validate checks the field values on SquadGetReq with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *SquadGetReq) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetId()) != 64 {
		return SquadGetReqValidationError{
			field:  "Id",
			reason: "value length must be 64 runes",
		}
	}

	if !_SquadGetReq_Id_Pattern.MatchString(m.GetId()) {
		return SquadGetReqValidationError{
			field:  "Id",
			reason: "value does not match regex pattern \"^[0-9A-Za-z]+$\"",
		}
	}

	return nil
}

// SquadGetReqValidationError is the validation error returned by
// SquadGetReq.Validate if the designated constraints aren't met.
type SquadGetReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SquadGetReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SquadGetReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SquadGetReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SquadGetReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SquadGetReqValidationError) ErrorName() string { return "SquadGetReqValidationError" }

// Error satisfies the builtin error interface
func (e SquadGetReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSquadGetReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SquadGetReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SquadGetReqValidationError{}

var _SquadGetReq_Id_Pattern = regexp.MustCompile("^[0-9A-Za-z]+$")

// Validate checks the field values on SquadUpdateReq with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *SquadUpdateReq) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetId()) != 64 {
		return SquadUpdateReqValidationError{
			field:  "Id",
			reason: "value length must be 64 runes",
		}
	}

	if !_SquadUpdateReq_Id_Pattern.MatchString(m.GetId()) {
		return SquadUpdateReqValidationError{
			field:  "Id",
			reason: "value does not match regex pattern \"^[0-9A-Za-z]+$\"",
		}
	}

	if v, ok := interface{}(m.GetName()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SquadUpdateReqValidationError{
				field:  "Name",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if wrapper := m.GetProductOwnerId(); wrapper != nil {

		if utf8.RuneCountInString(wrapper.GetValue()) != 64 {
			return SquadUpdateReqValidationError{
				field:  "ProductOwnerId",
				reason: "value length must be 64 runes",
			}
		}

		if !_SquadUpdateReq_ProductOwnerId_Pattern.MatchString(wrapper.GetValue()) {
			return SquadUpdateReqValidationError{
				field:  "ProductOwnerId",
				reason: "value does not match regex pattern \"^[0-9A-Za-z]+$\"",
			}
		}

	}

	return nil
}

// SquadUpdateReqValidationError is the validation error returned by
// SquadUpdateReq.Validate if the designated constraints aren't met.
type SquadUpdateReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SquadUpdateReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SquadUpdateReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SquadUpdateReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SquadUpdateReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SquadUpdateReqValidationError) ErrorName() string { return "SquadUpdateReqValidationError" }

// Error satisfies the builtin error interface
func (e SquadUpdateReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSquadUpdateReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SquadUpdateReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SquadUpdateReqValidationError{}

var _SquadUpdateReq_Id_Pattern = regexp.MustCompile("^[0-9A-Za-z]+$")

var _SquadUpdateReq_ProductOwnerId_Pattern = regexp.MustCompile("^[0-9A-Za-z]+$")

// Validate checks the field values on SingleSquadRes with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *SingleSquadRes) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SingleSquadResValidationError{
				field:  "Error",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetEntity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SingleSquadResValidationError{
				field:  "Entity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// SingleSquadResValidationError is the validation error returned by
// SingleSquadRes.Validate if the designated constraints aren't met.
type SingleSquadResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SingleSquadResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SingleSquadResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SingleSquadResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SingleSquadResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SingleSquadResValidationError) ErrorName() string { return "SingleSquadResValidationError" }

// Error satisfies the builtin error interface
func (e SingleSquadResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSingleSquadRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SingleSquadResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SingleSquadResValidationError{}

// Validate checks the field values on PaginatedSquadRes with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *PaginatedSquadRes) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PaginatedSquadResValidationError{
				field:  "Error",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Total

	// no validation rules for PerPage

	// no validation rules for Count

	// no validation rules for CurrentPage

	for idx, item := range m.GetMembers() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PaginatedSquadResValidationError{
					field:  fmt.Sprintf("Members[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// PaginatedSquadResValidationError is the validation error returned by
// PaginatedSquadRes.Validate if the designated constraints aren't met.
type PaginatedSquadResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PaginatedSquadResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PaginatedSquadResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PaginatedSquadResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PaginatedSquadResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PaginatedSquadResValidationError) ErrorName() string {
	return "PaginatedSquadResValidationError"
}

// Error satisfies the builtin error interface
func (e PaginatedSquadResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPaginatedSquadRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PaginatedSquadResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PaginatedSquadResValidationError{}

// Validate checks the field values on SquadSearchReq with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *SquadSearchReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Page

	// no validation rules for PerPage

	if v, ok := interface{}(m.GetSquadId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SquadSearchReqValidationError{
				field:  "SquadId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetName()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SquadSearchReqValidationError{
				field:  "Name",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetSlug()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SquadSearchReqValidationError{
				field:  "Slug",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// SquadSearchReqValidationError is the validation error returned by
// SquadSearchReq.Validate if the designated constraints aren't met.
type SquadSearchReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SquadSearchReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SquadSearchReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SquadSearchReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SquadSearchReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SquadSearchReqValidationError) ErrorName() string { return "SquadSearchReqValidationError" }

// Error satisfies the builtin error interface
func (e SquadSearchReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSquadSearchReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SquadSearchReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SquadSearchReqValidationError{}

// Validate checks the field values on ChapterCreateReq with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ChapterCreateReq) Validate() error {
	if m == nil {
		return nil
	}

	if l := len(m.GetName()); l < 3 || l > 50 {
		return ChapterCreateReqValidationError{
			field:  "Name",
			reason: "value length must be between 3 and 50 bytes, inclusive",
		}
	}

	if !_ChapterCreateReq_Name_Pattern.MatchString(m.GetName()) {
		return ChapterCreateReqValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"^[A-Za-z]+([ 0-9A-Za-z]+)*$\"",
		}
	}

	return nil
}

// ChapterCreateReqValidationError is the validation error returned by
// ChapterCreateReq.Validate if the designated constraints aren't met.
type ChapterCreateReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChapterCreateReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChapterCreateReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChapterCreateReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChapterCreateReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChapterCreateReqValidationError) ErrorName() string { return "ChapterCreateReqValidationError" }

// Error satisfies the builtin error interface
func (e ChapterCreateReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChapterCreateReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChapterCreateReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChapterCreateReqValidationError{}

var _ChapterCreateReq_Name_Pattern = regexp.MustCompile("^[A-Za-z]+([ 0-9A-Za-z]+)*$")

// Validate checks the field values on ChapterGetReq with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ChapterGetReq) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetId()) != 64 {
		return ChapterGetReqValidationError{
			field:  "Id",
			reason: "value length must be 64 runes",
		}
	}

	if !_ChapterGetReq_Id_Pattern.MatchString(m.GetId()) {
		return ChapterGetReqValidationError{
			field:  "Id",
			reason: "value does not match regex pattern \"^[0-9A-Za-z]+$\"",
		}
	}

	return nil
}

// ChapterGetReqValidationError is the validation error returned by
// ChapterGetReq.Validate if the designated constraints aren't met.
type ChapterGetReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChapterGetReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChapterGetReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChapterGetReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChapterGetReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChapterGetReqValidationError) ErrorName() string { return "ChapterGetReqValidationError" }

// Error satisfies the builtin error interface
func (e ChapterGetReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChapterGetReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChapterGetReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChapterGetReqValidationError{}

var _ChapterGetReq_Id_Pattern = regexp.MustCompile("^[0-9A-Za-z]+$")

// Validate checks the field values on ChapterUpdateReq with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ChapterUpdateReq) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetId()) != 64 {
		return ChapterUpdateReqValidationError{
			field:  "Id",
			reason: "value length must be 64 runes",
		}
	}

	if !_ChapterUpdateReq_Id_Pattern.MatchString(m.GetId()) {
		return ChapterUpdateReqValidationError{
			field:  "Id",
			reason: "value does not match regex pattern \"^[0-9A-Za-z]+$\"",
		}
	}

	if v, ok := interface{}(m.GetName()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChapterUpdateReqValidationError{
				field:  "Name",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if wrapper := m.GetLeaderId(); wrapper != nil {

		if utf8.RuneCountInString(wrapper.GetValue()) != 64 {
			return ChapterUpdateReqValidationError{
				field:  "LeaderId",
				reason: "value length must be 64 runes",
			}
		}

		if !_ChapterUpdateReq_LeaderId_Pattern.MatchString(wrapper.GetValue()) {
			return ChapterUpdateReqValidationError{
				field:  "LeaderId",
				reason: "value does not match regex pattern \"^[0-9A-Za-z]+$\"",
			}
		}

	}

	return nil
}

// ChapterUpdateReqValidationError is the validation error returned by
// ChapterUpdateReq.Validate if the designated constraints aren't met.
type ChapterUpdateReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChapterUpdateReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChapterUpdateReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChapterUpdateReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChapterUpdateReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChapterUpdateReqValidationError) ErrorName() string { return "ChapterUpdateReqValidationError" }

// Error satisfies the builtin error interface
func (e ChapterUpdateReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChapterUpdateReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChapterUpdateReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChapterUpdateReqValidationError{}

var _ChapterUpdateReq_Id_Pattern = regexp.MustCompile("^[0-9A-Za-z]+$")

var _ChapterUpdateReq_LeaderId_Pattern = regexp.MustCompile("^[0-9A-Za-z]+$")

// Validate checks the field values on SingleChapterRes with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *SingleChapterRes) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SingleChapterResValidationError{
				field:  "Error",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetEntity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SingleChapterResValidationError{
				field:  "Entity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// SingleChapterResValidationError is the validation error returned by
// SingleChapterRes.Validate if the designated constraints aren't met.
type SingleChapterResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SingleChapterResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SingleChapterResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SingleChapterResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SingleChapterResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SingleChapterResValidationError) ErrorName() string { return "SingleChapterResValidationError" }

// Error satisfies the builtin error interface
func (e SingleChapterResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSingleChapterRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SingleChapterResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SingleChapterResValidationError{}

// Validate checks the field values on PaginatedChapterRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *PaginatedChapterRes) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PaginatedChapterResValidationError{
				field:  "Error",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Total

	// no validation rules for PerPage

	// no validation rules for Count

	// no validation rules for CurrentPage

	for idx, item := range m.GetMembers() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PaginatedChapterResValidationError{
					field:  fmt.Sprintf("Members[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// PaginatedChapterResValidationError is the validation error returned by
// PaginatedChapterRes.Validate if the designated constraints aren't met.
type PaginatedChapterResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PaginatedChapterResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PaginatedChapterResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PaginatedChapterResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PaginatedChapterResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PaginatedChapterResValidationError) ErrorName() string {
	return "PaginatedChapterResValidationError"
}

// Error satisfies the builtin error interface
func (e PaginatedChapterResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPaginatedChapterRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PaginatedChapterResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PaginatedChapterResValidationError{}

// Validate checks the field values on ChapterSearchReq with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ChapterSearchReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Page

	// no validation rules for PerPage

	if v, ok := interface{}(m.GetChapterId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChapterSearchReqValidationError{
				field:  "ChapterId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetName()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChapterSearchReqValidationError{
				field:  "Name",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetSlug()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChapterSearchReqValidationError{
				field:  "Slug",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ChapterSearchReqValidationError is the validation error returned by
// ChapterSearchReq.Validate if the designated constraints aren't met.
type ChapterSearchReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChapterSearchReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChapterSearchReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChapterSearchReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChapterSearchReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChapterSearchReqValidationError) ErrorName() string { return "ChapterSearchReqValidationError" }

// Error satisfies the builtin error interface
func (e ChapterSearchReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChapterSearchReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChapterSearchReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChapterSearchReqValidationError{}

// Validate checks the field values on GuildCreateReq with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *GuildCreateReq) Validate() error {
	if m == nil {
		return nil
	}

	if l := len(m.GetName()); l < 3 || l > 50 {
		return GuildCreateReqValidationError{
			field:  "Name",
			reason: "value length must be between 3 and 50 bytes, inclusive",
		}
	}

	if !_GuildCreateReq_Name_Pattern.MatchString(m.GetName()) {
		return GuildCreateReqValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"^[A-Za-z]+([ 0-9A-Za-z]+)*$\"",
		}
	}

	return nil
}

// GuildCreateReqValidationError is the validation error returned by
// GuildCreateReq.Validate if the designated constraints aren't met.
type GuildCreateReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GuildCreateReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GuildCreateReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GuildCreateReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GuildCreateReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GuildCreateReqValidationError) ErrorName() string { return "GuildCreateReqValidationError" }

// Error satisfies the builtin error interface
func (e GuildCreateReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGuildCreateReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GuildCreateReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GuildCreateReqValidationError{}

var _GuildCreateReq_Name_Pattern = regexp.MustCompile("^[A-Za-z]+([ 0-9A-Za-z]+)*$")

// Validate checks the field values on GuildGetReq with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *GuildGetReq) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetId()) != 64 {
		return GuildGetReqValidationError{
			field:  "Id",
			reason: "value length must be 64 runes",
		}
	}

	if !_GuildGetReq_Id_Pattern.MatchString(m.GetId()) {
		return GuildGetReqValidationError{
			field:  "Id",
			reason: "value does not match regex pattern \"^[0-9A-Za-z]+$\"",
		}
	}

	return nil
}

// GuildGetReqValidationError is the validation error returned by
// GuildGetReq.Validate if the designated constraints aren't met.
type GuildGetReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GuildGetReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GuildGetReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GuildGetReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GuildGetReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GuildGetReqValidationError) ErrorName() string { return "GuildGetReqValidationError" }

// Error satisfies the builtin error interface
func (e GuildGetReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGuildGetReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GuildGetReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GuildGetReqValidationError{}

var _GuildGetReq_Id_Pattern = regexp.MustCompile("^[0-9A-Za-z]+$")

// Validate checks the field values on GuildUpdateReq with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *GuildUpdateReq) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetId()) != 64 {
		return GuildUpdateReqValidationError{
			field:  "Id",
			reason: "value length must be 64 runes",
		}
	}

	if !_GuildUpdateReq_Id_Pattern.MatchString(m.GetId()) {
		return GuildUpdateReqValidationError{
			field:  "Id",
			reason: "value does not match regex pattern \"^[0-9A-Za-z]+$\"",
		}
	}

	if v, ok := interface{}(m.GetName()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GuildUpdateReqValidationError{
				field:  "Name",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GuildUpdateReqValidationError is the validation error returned by
// GuildUpdateReq.Validate if the designated constraints aren't met.
type GuildUpdateReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GuildUpdateReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GuildUpdateReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GuildUpdateReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GuildUpdateReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GuildUpdateReqValidationError) ErrorName() string { return "GuildUpdateReqValidationError" }

// Error satisfies the builtin error interface
func (e GuildUpdateReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGuildUpdateReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GuildUpdateReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GuildUpdateReqValidationError{}

var _GuildUpdateReq_Id_Pattern = regexp.MustCompile("^[0-9A-Za-z]+$")

// Validate checks the field values on SingleGuildRes with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *SingleGuildRes) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SingleGuildResValidationError{
				field:  "Error",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetEntity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SingleGuildResValidationError{
				field:  "Entity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// SingleGuildResValidationError is the validation error returned by
// SingleGuildRes.Validate if the designated constraints aren't met.
type SingleGuildResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SingleGuildResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SingleGuildResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SingleGuildResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SingleGuildResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SingleGuildResValidationError) ErrorName() string { return "SingleGuildResValidationError" }

// Error satisfies the builtin error interface
func (e SingleGuildResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSingleGuildRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SingleGuildResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SingleGuildResValidationError{}

// Validate checks the field values on PaginatedGuildRes with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *PaginatedGuildRes) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PaginatedGuildResValidationError{
				field:  "Error",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Total

	// no validation rules for PerPage

	// no validation rules for Count

	// no validation rules for CurrentPage

	for idx, item := range m.GetMembers() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PaginatedGuildResValidationError{
					field:  fmt.Sprintf("Members[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// PaginatedGuildResValidationError is the validation error returned by
// PaginatedGuildRes.Validate if the designated constraints aren't met.
type PaginatedGuildResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PaginatedGuildResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PaginatedGuildResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PaginatedGuildResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PaginatedGuildResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PaginatedGuildResValidationError) ErrorName() string {
	return "PaginatedGuildResValidationError"
}

// Error satisfies the builtin error interface
func (e PaginatedGuildResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPaginatedGuildRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PaginatedGuildResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PaginatedGuildResValidationError{}

// Validate checks the field values on GuildSearchReq with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *GuildSearchReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Page

	// no validation rules for PerPage

	if v, ok := interface{}(m.GetGuildId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GuildSearchReqValidationError{
				field:  "GuildId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetName()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GuildSearchReqValidationError{
				field:  "Name",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetSlug()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GuildSearchReqValidationError{
				field:  "Slug",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GuildSearchReqValidationError is the validation error returned by
// GuildSearchReq.Validate if the designated constraints aren't met.
type GuildSearchReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GuildSearchReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GuildSearchReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GuildSearchReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GuildSearchReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GuildSearchReqValidationError) ErrorName() string { return "GuildSearchReqValidationError" }

// Error satisfies the builtin error interface
func (e GuildSearchReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGuildSearchReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GuildSearchReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GuildSearchReqValidationError{}

// Validate checks the field values on TribeCreateReq with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *TribeCreateReq) Validate() error {
	if m == nil {
		return nil
	}

	if l := len(m.GetName()); l < 3 || l > 50 {
		return TribeCreateReqValidationError{
			field:  "Name",
			reason: "value length must be between 3 and 50 bytes, inclusive",
		}
	}

	if !_TribeCreateReq_Name_Pattern.MatchString(m.GetName()) {
		return TribeCreateReqValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"^[A-Za-z]+([ 0-9A-Za-z]+)*$\"",
		}
	}

	return nil
}

// TribeCreateReqValidationError is the validation error returned by
// TribeCreateReq.Validate if the designated constraints aren't met.
type TribeCreateReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TribeCreateReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TribeCreateReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TribeCreateReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TribeCreateReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TribeCreateReqValidationError) ErrorName() string { return "TribeCreateReqValidationError" }

// Error satisfies the builtin error interface
func (e TribeCreateReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTribeCreateReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TribeCreateReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TribeCreateReqValidationError{}

var _TribeCreateReq_Name_Pattern = regexp.MustCompile("^[A-Za-z]+([ 0-9A-Za-z]+)*$")

// Validate checks the field values on TribeGetReq with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *TribeGetReq) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetId()) != 64 {
		return TribeGetReqValidationError{
			field:  "Id",
			reason: "value length must be 64 runes",
		}
	}

	if !_TribeGetReq_Id_Pattern.MatchString(m.GetId()) {
		return TribeGetReqValidationError{
			field:  "Id",
			reason: "value does not match regex pattern \"^[0-9A-Za-z]+$\"",
		}
	}

	return nil
}

// TribeGetReqValidationError is the validation error returned by
// TribeGetReq.Validate if the designated constraints aren't met.
type TribeGetReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TribeGetReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TribeGetReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TribeGetReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TribeGetReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TribeGetReqValidationError) ErrorName() string { return "TribeGetReqValidationError" }

// Error satisfies the builtin error interface
func (e TribeGetReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTribeGetReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TribeGetReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TribeGetReqValidationError{}

var _TribeGetReq_Id_Pattern = regexp.MustCompile("^[0-9A-Za-z]+$")

// Validate checks the field values on TribeUpdateReq with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *TribeUpdateReq) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetId()) != 64 {
		return TribeUpdateReqValidationError{
			field:  "Id",
			reason: "value length must be 64 runes",
		}
	}

	if !_TribeUpdateReq_Id_Pattern.MatchString(m.GetId()) {
		return TribeUpdateReqValidationError{
			field:  "Id",
			reason: "value does not match regex pattern \"^[0-9A-Za-z]+$\"",
		}
	}

	if v, ok := interface{}(m.GetName()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TribeUpdateReqValidationError{
				field:  "Name",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// TribeUpdateReqValidationError is the validation error returned by
// TribeUpdateReq.Validate if the designated constraints aren't met.
type TribeUpdateReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TribeUpdateReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TribeUpdateReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TribeUpdateReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TribeUpdateReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TribeUpdateReqValidationError) ErrorName() string { return "TribeUpdateReqValidationError" }

// Error satisfies the builtin error interface
func (e TribeUpdateReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTribeUpdateReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TribeUpdateReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TribeUpdateReqValidationError{}

var _TribeUpdateReq_Id_Pattern = regexp.MustCompile("^[0-9A-Za-z]+$")

// Validate checks the field values on SingleTribeRes with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *SingleTribeRes) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SingleTribeResValidationError{
				field:  "Error",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetEntity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SingleTribeResValidationError{
				field:  "Entity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// SingleTribeResValidationError is the validation error returned by
// SingleTribeRes.Validate if the designated constraints aren't met.
type SingleTribeResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SingleTribeResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SingleTribeResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SingleTribeResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SingleTribeResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SingleTribeResValidationError) ErrorName() string { return "SingleTribeResValidationError" }

// Error satisfies the builtin error interface
func (e SingleTribeResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSingleTribeRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SingleTribeResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SingleTribeResValidationError{}

// Validate checks the field values on PaginatedTribeRes with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *PaginatedTribeRes) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PaginatedTribeResValidationError{
				field:  "Error",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Total

	// no validation rules for PerPage

	// no validation rules for Count

	// no validation rules for CurrentPage

	for idx, item := range m.GetMembers() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PaginatedTribeResValidationError{
					field:  fmt.Sprintf("Members[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// PaginatedTribeResValidationError is the validation error returned by
// PaginatedTribeRes.Validate if the designated constraints aren't met.
type PaginatedTribeResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PaginatedTribeResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PaginatedTribeResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PaginatedTribeResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PaginatedTribeResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PaginatedTribeResValidationError) ErrorName() string {
	return "PaginatedTribeResValidationError"
}

// Error satisfies the builtin error interface
func (e PaginatedTribeResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPaginatedTribeRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PaginatedTribeResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PaginatedTribeResValidationError{}

// Validate checks the field values on TribeSearchReq with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *TribeSearchReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Page

	// no validation rules for PerPage

	if v, ok := interface{}(m.GetTribeId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TribeSearchReqValidationError{
				field:  "TribeId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetName()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TribeSearchReqValidationError{
				field:  "Name",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetSlug()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TribeSearchReqValidationError{
				field:  "Slug",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// TribeSearchReqValidationError is the validation error returned by
// TribeSearchReq.Validate if the designated constraints aren't met.
type TribeSearchReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TribeSearchReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TribeSearchReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TribeSearchReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TribeSearchReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TribeSearchReqValidationError) ErrorName() string { return "TribeSearchReqValidationError" }

// Error satisfies the builtin error interface
func (e TribeSearchReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTribeSearchReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TribeSearchReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TribeSearchReqValidationError{}

// Validate checks the field values on NodeInfoReq with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *NodeInfoReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Urn

	return nil
}

// NodeInfoReqValidationError is the validation error returned by
// NodeInfoReq.Validate if the designated constraints aren't met.
type NodeInfoReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NodeInfoReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NodeInfoReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NodeInfoReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NodeInfoReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NodeInfoReqValidationError) ErrorName() string { return "NodeInfoReqValidationError" }

// Error satisfies the builtin error interface
func (e NodeInfoReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNodeInfoReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NodeInfoReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NodeInfoReqValidationError{}

// Validate checks the field values on GraphRes with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *GraphRes) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GraphResValidationError{
				field:  "Error",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetGraph()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GraphResValidationError{
				field:  "Graph",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GraphResValidationError is the validation error returned by
// GraphRes.Validate if the designated constraints aren't met.
type GraphResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GraphResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GraphResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GraphResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GraphResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GraphResValidationError) ErrorName() string { return "GraphResValidationError" }

// Error satisfies the builtin error interface
func (e GraphResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGraphRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GraphResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GraphResValidationError{}

// Validate checks the field values on Domain_User with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *Domain_User) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Principal

	// no validation rules for Urn

	return nil
}

// Domain_UserValidationError is the validation error returned by
// Domain_User.Validate if the designated constraints aren't met.
type Domain_UserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Domain_UserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Domain_UserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Domain_UserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Domain_UserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Domain_UserValidationError) ErrorName() string { return "Domain_UserValidationError" }

// Error satisfies the builtin error interface
func (e Domain_UserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDomain_User.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Domain_UserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Domain_UserValidationError{}

// Validate checks the field values on Domain_Squad with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *Domain_Squad) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Urn

	return nil
}

// Domain_SquadValidationError is the validation error returned by
// Domain_Squad.Validate if the designated constraints aren't met.
type Domain_SquadValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Domain_SquadValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Domain_SquadValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Domain_SquadValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Domain_SquadValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Domain_SquadValidationError) ErrorName() string { return "Domain_SquadValidationError" }

// Error satisfies the builtin error interface
func (e Domain_SquadValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDomain_Squad.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Domain_SquadValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Domain_SquadValidationError{}

// Validate checks the field values on Domain_Chapter with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *Domain_Chapter) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Urn

	return nil
}

// Domain_ChapterValidationError is the validation error returned by
// Domain_Chapter.Validate if the designated constraints aren't met.
type Domain_ChapterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Domain_ChapterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Domain_ChapterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Domain_ChapterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Domain_ChapterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Domain_ChapterValidationError) ErrorName() string { return "Domain_ChapterValidationError" }

// Error satisfies the builtin error interface
func (e Domain_ChapterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDomain_Chapter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Domain_ChapterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Domain_ChapterValidationError{}

// Validate checks the field values on Domain_Guild with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *Domain_Guild) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Urn

	return nil
}

// Domain_GuildValidationError is the validation error returned by
// Domain_Guild.Validate if the designated constraints aren't met.
type Domain_GuildValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Domain_GuildValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Domain_GuildValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Domain_GuildValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Domain_GuildValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Domain_GuildValidationError) ErrorName() string { return "Domain_GuildValidationError" }

// Error satisfies the builtin error interface
func (e Domain_GuildValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDomain_Guild.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Domain_GuildValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Domain_GuildValidationError{}

// Validate checks the field values on Domain_Tribe with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *Domain_Tribe) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Urn

	return nil
}

// Domain_TribeValidationError is the validation error returned by
// Domain_Tribe.Validate if the designated constraints aren't met.
type Domain_TribeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Domain_TribeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Domain_TribeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Domain_TribeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Domain_TribeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Domain_TribeValidationError) ErrorName() string { return "Domain_TribeValidationError" }

// Error satisfies the builtin error interface
func (e Domain_TribeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDomain_Tribe.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Domain_TribeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Domain_TribeValidationError{}

// Validate checks the field values on Graph_Node with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Graph_Node) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Urn

	// no validation rules for Type

	// no validation rules for Properties

	switch m.Entity.(type) {

	case *Graph_Node_User:

		if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return Graph_NodeValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Graph_Node_Chapter:

		if v, ok := interface{}(m.GetChapter()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return Graph_NodeValidationError{
					field:  "Chapter",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Graph_Node_Guild:

		if v, ok := interface{}(m.GetGuild()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return Graph_NodeValidationError{
					field:  "Guild",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Graph_Node_Squad:

		if v, ok := interface{}(m.GetSquad()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return Graph_NodeValidationError{
					field:  "Squad",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Graph_Node_Tribe:

		if v, ok := interface{}(m.GetTribe()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return Graph_NodeValidationError{
					field:  "Tribe",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		return Graph_NodeValidationError{
			field:  "Entity",
			reason: "value is required",
		}

	}

	return nil
}

// Graph_NodeValidationError is the validation error returned by
// Graph_Node.Validate if the designated constraints aren't met.
type Graph_NodeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Graph_NodeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Graph_NodeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Graph_NodeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Graph_NodeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Graph_NodeValidationError) ErrorName() string { return "Graph_NodeValidationError" }

// Error satisfies the builtin error interface
func (e Graph_NodeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGraph_Node.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Graph_NodeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Graph_NodeValidationError{}

// Validate checks the field values on Graph_Edge with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Graph_Edge) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Source

	// no validation rules for Destination

	// no validation rules for Properties

	return nil
}

// Graph_EdgeValidationError is the validation error returned by
// Graph_Edge.Validate if the designated constraints aren't met.
type Graph_EdgeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Graph_EdgeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Graph_EdgeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Graph_EdgeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Graph_EdgeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Graph_EdgeValidationError) ErrorName() string { return "Graph_EdgeValidationError" }

// Error satisfies the builtin error interface
func (e Graph_EdgeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGraph_Edge.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Graph_EdgeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Graph_EdgeValidationError{}
