// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: v1/spotigraph/spotigraph.proto

package spotigraph

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/gogo/protobuf/types"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = types.DynamicAny{}
)

// Validate checks the field values on Error with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Error) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	return nil
}

// ErrorValidationError is the validation error returned by Error.Validate if
// the designated constraints aren't met.
type ErrorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ErrorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ErrorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ErrorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ErrorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ErrorValidationError) ErrorName() string { return "ErrorValidationError" }

// Error satisfies the builtin error interface
func (e ErrorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sError.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ErrorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ErrorValidationError{}

// Validate checks the field values on EmptyRes with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *EmptyRes) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EmptyResValidationError{
				field:  "Error",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// EmptyResValidationError is the validation error returned by
// EmptyRes.Validate if the designated constraints aren't met.
type EmptyResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EmptyResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EmptyResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EmptyResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EmptyResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EmptyResValidationError) ErrorName() string { return "EmptyResValidationError" }

// Error satisfies the builtin error interface
func (e EmptyResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEmptyRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EmptyResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EmptyResValidationError{}

// Validate checks the field values on Domain with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Domain) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// DomainValidationError is the validation error returned by Domain.Validate if
// the designated constraints aren't met.
type DomainValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DomainValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DomainValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DomainValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DomainValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DomainValidationError) ErrorName() string { return "DomainValidationError" }

// Error satisfies the builtin error interface
func (e DomainValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDomain.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DomainValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DomainValidationError{}

// Validate checks the field values on UserCreateReq with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *UserCreateReq) Validate() error {
	if m == nil {
		return nil
	}

	if err := m._validateEmail(m.GetPrincipal()); err != nil {
		return UserCreateReqValidationError{
			field:  "Principal",
			reason: "value must be a valid email address",
			cause:  err,
		}
	}

	return nil
}

func (m *UserCreateReq) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *UserCreateReq) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// UserCreateReqValidationError is the validation error returned by
// UserCreateReq.Validate if the designated constraints aren't met.
type UserCreateReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserCreateReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserCreateReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserCreateReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserCreateReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserCreateReqValidationError) ErrorName() string { return "UserCreateReqValidationError" }

// Error satisfies the builtin error interface
func (e UserCreateReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserCreateReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserCreateReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserCreateReqValidationError{}

// Validate checks the field values on UserGetReq with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *UserGetReq) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetId()) != 64 {
		return UserGetReqValidationError{
			field:  "Id",
			reason: "value length must be 64 runes",
		}

	}

	if !_UserGetReq_Id_Pattern.MatchString(m.GetId()) {
		return UserGetReqValidationError{
			field:  "Id",
			reason: "value does not match regex pattern \"^[0-9A-Za-z]+$\"",
		}
	}

	return nil
}

// UserGetReqValidationError is the validation error returned by
// UserGetReq.Validate if the designated constraints aren't met.
type UserGetReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserGetReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserGetReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserGetReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserGetReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserGetReqValidationError) ErrorName() string { return "UserGetReqValidationError" }

// Error satisfies the builtin error interface
func (e UserGetReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserGetReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserGetReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserGetReqValidationError{}

var _UserGetReq_Id_Pattern = regexp.MustCompile("^[0-9A-Za-z]+$")

// Validate checks the field values on UserUpdateReq with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *UserUpdateReq) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetId()) != 64 {
		return UserUpdateReqValidationError{
			field:  "Id",
			reason: "value length must be 64 runes",
		}

	}

	if !_UserUpdateReq_Id_Pattern.MatchString(m.GetId()) {
		return UserUpdateReqValidationError{
			field:  "Id",
			reason: "value does not match regex pattern \"^[0-9A-Za-z]+$\"",
		}
	}

	if v, ok := interface{}(m.GetPrincipal()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserUpdateReqValidationError{
				field:  "Principal",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UserUpdateReqValidationError is the validation error returned by
// UserUpdateReq.Validate if the designated constraints aren't met.
type UserUpdateReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserUpdateReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserUpdateReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserUpdateReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserUpdateReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserUpdateReqValidationError) ErrorName() string { return "UserUpdateReqValidationError" }

// Error satisfies the builtin error interface
func (e UserUpdateReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserUpdateReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserUpdateReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserUpdateReqValidationError{}

var _UserUpdateReq_Id_Pattern = regexp.MustCompile("^[0-9A-Za-z]+$")

// Validate checks the field values on SingleUserRes with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *SingleUserRes) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SingleUserResValidationError{
				field:  "Error",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetEntity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SingleUserResValidationError{
				field:  "Entity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// SingleUserResValidationError is the validation error returned by
// SingleUserRes.Validate if the designated constraints aren't met.
type SingleUserResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SingleUserResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SingleUserResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SingleUserResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SingleUserResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SingleUserResValidationError) ErrorName() string { return "SingleUserResValidationError" }

// Error satisfies the builtin error interface
func (e SingleUserResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSingleUserRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SingleUserResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SingleUserResValidationError{}

// Validate checks the field values on PaginatedUserRes with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *PaginatedUserRes) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PaginatedUserResValidationError{
				field:  "Error",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Total

	// no validation rules for PerPage

	// no validation rules for Count

	// no validation rules for CurrentPage

	for idx, item := range m.GetMembers() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PaginatedUserResValidationError{
					field:  fmt.Sprintf("Members[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// PaginatedUserResValidationError is the validation error returned by
// PaginatedUserRes.Validate if the designated constraints aren't met.
type PaginatedUserResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PaginatedUserResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PaginatedUserResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PaginatedUserResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PaginatedUserResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PaginatedUserResValidationError) ErrorName() string { return "PaginatedUserResValidationError" }

// Error satisfies the builtin error interface
func (e PaginatedUserResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPaginatedUserRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PaginatedUserResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PaginatedUserResValidationError{}

// Validate checks the field values on UserSearchReq with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *UserSearchReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Page

	// no validation rules for PerPage

	if v, ok := interface{}(m.GetUserId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserSearchReqValidationError{
				field:  "UserId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPrincipal()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserSearchReqValidationError{
				field:  "Principal",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UserSearchReqValidationError is the validation error returned by
// UserSearchReq.Validate if the designated constraints aren't met.
type UserSearchReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserSearchReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserSearchReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserSearchReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserSearchReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserSearchReqValidationError) ErrorName() string { return "UserSearchReqValidationError" }

// Error satisfies the builtin error interface
func (e UserSearchReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserSearchReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserSearchReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserSearchReqValidationError{}

// Validate checks the field values on Domain_User with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *Domain_User) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Principal

	// no validation rules for Urn

	return nil
}

// Domain_UserValidationError is the validation error returned by
// Domain_User.Validate if the designated constraints aren't met.
type Domain_UserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Domain_UserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Domain_UserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Domain_UserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Domain_UserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Domain_UserValidationError) ErrorName() string { return "Domain_UserValidationError" }

// Error satisfies the builtin error interface
func (e Domain_UserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDomain_User.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Domain_UserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Domain_UserValidationError{}

// Validate checks the field values on Domain_Squad with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *Domain_Squad) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Slug

	// no validation rules for Urn

	return nil
}

// Domain_SquadValidationError is the validation error returned by
// Domain_Squad.Validate if the designated constraints aren't met.
type Domain_SquadValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Domain_SquadValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Domain_SquadValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Domain_SquadValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Domain_SquadValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Domain_SquadValidationError) ErrorName() string { return "Domain_SquadValidationError" }

// Error satisfies the builtin error interface
func (e Domain_SquadValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDomain_Squad.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Domain_SquadValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Domain_SquadValidationError{}

// Validate checks the field values on Domain_Chapter with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *Domain_Chapter) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Slug

	// no validation rules for Urn

	return nil
}

// Domain_ChapterValidationError is the validation error returned by
// Domain_Chapter.Validate if the designated constraints aren't met.
type Domain_ChapterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Domain_ChapterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Domain_ChapterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Domain_ChapterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Domain_ChapterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Domain_ChapterValidationError) ErrorName() string { return "Domain_ChapterValidationError" }

// Error satisfies the builtin error interface
func (e Domain_ChapterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDomain_Chapter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Domain_ChapterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Domain_ChapterValidationError{}

// Validate checks the field values on Domain_Guild with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *Domain_Guild) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Slug

	// no validation rules for Urn

	return nil
}

// Domain_GuildValidationError is the validation error returned by
// Domain_Guild.Validate if the designated constraints aren't met.
type Domain_GuildValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Domain_GuildValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Domain_GuildValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Domain_GuildValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Domain_GuildValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Domain_GuildValidationError) ErrorName() string { return "Domain_GuildValidationError" }

// Error satisfies the builtin error interface
func (e Domain_GuildValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDomain_Guild.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Domain_GuildValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Domain_GuildValidationError{}

// Validate checks the field values on Domain_Tribe with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *Domain_Tribe) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Slug

	// no validation rules for Urn

	return nil
}

// Domain_TribeValidationError is the validation error returned by
// Domain_Tribe.Validate if the designated constraints aren't met.
type Domain_TribeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Domain_TribeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Domain_TribeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Domain_TribeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Domain_TribeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Domain_TribeValidationError) ErrorName() string { return "Domain_TribeValidationError" }

// Error satisfies the builtin error interface
func (e Domain_TribeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDomain_Tribe.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Domain_TribeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Domain_TribeValidationError{}
