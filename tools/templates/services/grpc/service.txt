import (
	"context"

	"github.com/pkg/errors"
	"go.zenithar.org/spotigraph/internal/services"
	"go.zenithar.org/spotigraph/pkg/grpc/v1/spotigraph/pb"
	"go.zenithar.org/spotigraph/pkg/protocol/v1/spotigraph"
)

{{ $decorator := (or .Vars.DecoratorName (printf "%sClient" .Interface.Name)) }}

type grpc{{$decorator}} struct {
	factory ConnectionFactory
}

// New{{$decorator}} returns a service client wrapped for gRPC
func New{{$decorator}}(factory ConnectionFactory) {{.Interface.Type}} {
	return &grpc{{$decorator}}{
		factory: factory,
	}
}

// -----------------------------------------------------------------------------

{{ $itf := .Interface }}
{{range $method := .Interface.Methods}}
func (c *grpc{{$decorator}}) {{$method.Declaration}} {
	// Retrieve a connection from factory
	conn, releaser, err := c.factory(ctx)
	if err != nil {
		return nil, errors.Wrap(err, "unable to initialize gRPC connection")
	}
	defer releaser()

	// Wrap the connection
	cli := pb.New{{ $itf.Name }}Client(conn)

	// Call remote service
	{{ $method.Pass "cli." }}
}
{{end}}
